@* Release-7.7 - D-1 Set additional CalendarEvents times-offsets based on timezone.cshtml
 *@
@{
    //LcHelpers.TestArea();
    Layout = "~/tests/_TestLayout.cshtml";

    DateTime start = DateTime.Now;

    using (var db = new LcDatabase()) {
        var data = db.Query("SELECT id, timezone, stampTime, updatedDate, createdDate, deleted FROM CalendarEvents");
        // To update the data AFTER being upgraded from a datetime column type to a datetimeoffset(0) all the additional
        // fields not updated at the "Release-7.7 - A.x" process.
        // We read the already updated events timezone, the raw data for the date-time fields not previously updated
        // (that just get added a zero offset automatically --no conversions done by the server)
        // and since that data (that looks like UTC because of the auto offset) were actually times in the server
        // timezone (PST), we read the DateTime value, we use that value to create a new DateTimeOffset without setting
        // the offset, so will be empty, and we convert that into local, so offset will get added acorded to 
        // machine time zone and DST rules.
        // To prevent smash correct data, it only operate on data with a 'zero' offset and timezone different than 'UTC' (*1)
        // Then we need to convert each one to the offset of the timezone field.
        // Then we use that to update the value on the server
        // and will get the correct offset.
        //
        // *1 This allows the process to be save against running this twice (or more) hover the same data when doing the upgrade
        // (just in case execution stopped, another error break the process, etc.), but no after new incoming data later.
        // EXCEPTION: Other edge cases for zero offset and a timezone with that offset at that time would fail, but are cases
        // that doesn't happens as of writting/applying this upgrade.
        foreach (var r in data)
        {
            var tz = r.timezone;
            var id = r.id;

            var needsConversion = false;
            var createdDate = r.createdDate as DateTimeOffset?;
            if (createdDate != null)
            {
                needsConversion = createdDate.Value.Offset.Equals(TimeSpan.Zero) && tz != "UTC";
                createdDate = new DateTimeOffset(createdDate.Value.DateTime).ToLocalTime();
            }
            
            if (needsConversion)
            {
                var stampTime = r.stampTime as DateTimeOffset?;
                if (stampTime != null)
                {
                    stampTime = new DateTimeOffset(stampTime.Value.DateTime).ToLocalTime();
                }
                var updatedDate = r.updatedDate as DateTimeOffset?;
                if (updatedDate != null)
                {
                    updatedDate = new DateTimeOffset(updatedDate.Value.DateTime).ToLocalTime();
                }
                var deleted = r.deleted as DateTimeOffset?;
                if (deleted != null)
                {
                    deleted = new DateTimeOffset(deleted.Value.DateTime).ToLocalTime();
                }
                db.Execute("UPDATE CalendarEvents SET createdDate=@1, stampTime=@2, updatedDate=@3, deleted=@4 WHERE Id=@0",
                    id, createdDate, stampTime, updatedDate, deleted);

                // Related tables
                var exceptions = db.Query(@"SELECT idException, dateStart, dateEnd FROM CalendarEventExceptionsPeriod WHERE IdException IN (SELECT L.Id FROM CalendarEventExceptionsPeriodsList as L WHERE L.IdEvent=@0)", id);
                foreach(var a in exceptions)
                {
                    var dateStart = a.dateStart as DateTimeOffset?;
                    if (dateStart != null)
                    {
                        dateStart = new DateTimeOffset(dateStart.Value.DateTime).ToLocalTime();
                    }
                    var dateEnd = a.dateEnd as DateTimeOffset?;
                    if (dateEnd != null)
                    {
                        dateEnd = new DateTimeOffset(dateEnd.Value.DateTime).ToLocalTime();
                    }

                    db.Execute("UPDATE CalendarEventExceptionsPeriod SET dateStart=@1, dateEnd=@2 WHERE IdException=@0 AND dateStart=@1", a.idException, dateStart, dateEnd);
                }
                var recurrences = db.Query(@"SELECT idRecurrence, dateStart, dateEnd FROM CalendarEventRecurrencesPeriod WHERE IdRecurrence IN (SELECT L.Id FROM CalendarEventRecurrencesPeriodList as L WHERE L.IdEvent=@0)", id);
                foreach (var a in recurrences)
                {
                    var dateStart = a.dateStart as DateTimeOffset?;
                    if (dateStart != null)
                    {
                        dateStart = new DateTimeOffset(dateStart.Value.DateTime).ToLocalTime();
                    }
                    var dateEnd = a.dateEnd as DateTimeOffset?;
                    if (dateEnd != null)
                    {
                        dateEnd = new DateTimeOffset(dateEnd.Value.DateTime).ToLocalTime();
                    }

                    db.Execute("UPDATE CalendarEventRecurrencesPeriod SET dateStart=@1, dateEnd=@2 WHERE IdException=@0 AND dateStart=@1", a.idException, dateStart, dateEnd);
                }
                var rrules = db.Query(@"SELECT id, until FROM CalendarReccurrence WHERE eventID=@0", id);
                foreach (var a in rrules)
                {
                    var until = a.until as DateTimeOffset?;
                    if (until != null)
                    {
                        until = new DateTimeOffset(until.Value.DateTime).ToLocalTime();
                    }

                    db.Execute("UPDATE CalendarReccurrence SET until=@1 WHERE ID=@0", a.id, until);
                }
            }
        }
    }
}
PROCESS DURATION: @((DateTime.Now - start).ToString())
