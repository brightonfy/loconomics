
@* 
 * View Helpers
 *@
@helper getChecked(string name, string value, dynamic poptvar){
    if (IsPost) {
        @Html.Raw(Request[name] == value ? "checked='checked'" : "")
    } else {
        @Html.Raw(poptvar.CustomerDataInputValue != null ? "checked='checked'" : "")
    }
}
@helper getSelected(string name, string value, dynamic poptvar){
    if (IsPost) {
        @Html.Raw(Request[name] == value ? "selected='selected'" : "")
    } else {
        @Html.Raw(poptvar.CustomerDataInputValue == value ? "selected='selected'" : "")
    }
}

@*
 * VIEWS, implemented as helpers
 *@

@helper Packages(LcData.ProviderPackagesView packages, dynamic fee) {
    var idprefix = "pricingwizard";
    var preSelectedPackage = Request["PackageID"];
    var selectedPackage = Request["provider-package"] ?? preSelectedPackage;

    <table class="packages-list calculate-items-totals calculate-summary-group" data-calculation-summary-group="packages">
        <tr>
            <th class="row-selection"></th>
            <th class="package-name name">Name</th>
            <th class="package-duration number">Duration</th>
            <th class="package-total-price number">Price</th>
        </tr>
        @foreach (var pak in packages.Packages)
        {
			var config = LcPricingModel.PackageBasePricingTypeConfigs[(int)pak.PricingTypeID];
            // Calculating final price, with fees and full details, No decimals for fixed prices:
            var price = new LcPricingModel.Price(pak.Price, fee, 0);
            <tr>
                <td>
                    <input id="@(idprefix)-package-@(pak.ProviderPackageID)" class="calculate-item-checked" type="radio" @LcHelpers.IsChecked(pak.ProviderPackageID, selectedPackage) name="provider-package" value="@pak.ProviderPackageID" />
                </td>
                <td class="package-name name">
                    <label for="@(idprefix)-package-@(pak.ProviderPackageID)">@pak.Name @(pak.NumberOfSessions > 1 ? String.Format("({0} appointments)", pak.NumberOfSessions) : "")</label>
					@if (config.Mod != null) {
						<div class="package-extra-data">
							@Html.Raw(config.Mod.GetCustomerHtml(new LcPricingModel.PackageBaseData(pak), fee))
						</div>
					}
                </td>
                <td class="package-duration">@*pak.ServiceDuration minutes*@@(LcHelpers.TimeToSmartLongString(TimeSpan.FromMinutes(pak.ServiceDuration), "N/A"))</td>
                <td class="package-total-price number">
                    <span class="calculate-item-fee">@(String.Format("{0:c}", price.FeePrice))</span>
                    <span class="calculate-item-quantity">1</span>
                    <span class="calculate-item-price">@(String.Format("{0:c}", price.TotalPrice))</span>
                    <span class="calculate-item-total">@(String.Format("{0:c}", price.TotalPrice))</span>
                </td>
            </tr>
        }
    </table>
}

@helper Addons(LcData.ProviderPackagesView addons, dynamic fee) {
    var idprefix = "pricingwizard";
    var selectedAddons = Request.Form.GetValues("provider-package-addons");
    if (selectedAddons == null) {
        selectedAddons = new string[0];
    }

    <table class="packages-list calculate-summary-group" data-calculation-summary-group="addons">
        <tr>
            <th class="row-selection"></th>
            <th class="package-name name">Name</th>
            <th class="package-duration number">Duration</th>
            <th class="package-total-price number">Price</th>
        </tr>
        @foreach (var pak in addons.Packages)
        {
            // Calculating final price, with fees and full details, No decimals for fixed prices:
            var price = new LcPricingModel.Price(pak.Price, fee, 0);
            <tr>
                <td>
                    <input id="@(idprefix)-package-@(pak.ProviderPackageID)" class="calculate-item-checked" type="checkbox" @LcHelpers.IsChecked(selectedAddons.Contains(((int)pak.ProviderPackageID).ToString()), true) name="provider-package-addons" value="@pak.ProviderPackageID" />
                </td>
                <td class="package-name name">
                    <label for="@(idprefix)-package-@(pak.ProviderPackageID)">@pak.Name</label>
                </td>
                <td class="package-duration number">@*pak.ServiceDuration minutes*@@(LcHelpers.TimeToSmartLongString(TimeSpan.FromMinutes(pak.ServiceDuration), "N/A"))</td>
                <td class="package-total-price number">
                    <span class="calculate-item-fee">@(String.Format("{0:c}", price.FeePrice))</span>
                    <span class="calculate-item-quantity">1</span>
                    <span class="calculate-item-price">@(String.Format("{0:c}", price.TotalPrice))</span>
                    <span class="calculate-item-total">@(String.Format("{0:c}", price.TotalPrice))</span>
                </td>
            </tr>
        }
    </table>
}

@helper CustomerPricingSummary(LcPricingModel.PricingSummaryData summary, Dictionary<string, LcPricingModel.PricingSummaryData> summaryLines, bool withRowSelectionColumn = false) {
    <noscript>
        <div class="calculate-price-button actions">
            <button class="button action calculate-price-button ajax-fieldset-submit">Calculate</button>
        </div>
    </noscript>
    <div class="calculation customer-pricing-summary pricing-summary">
        <table class="calculation calculation-summary">

            @foreach(var line in summaryLines) {
                <tr>
                    @if (withRowSelectionColumn) { <td></td> }
                    <th>@Html.Raw(line.Value.Concept)</th>
                    <td class="subtotal-price price calculation-summary-group-@(line.Key.ToLower())">@line.Value.TotalPrice.ToString("c")</td>
                </tr>
            }

            <tr class="separator">
                @if (withRowSelectionColumn) { <td></td> }
                <td class="separator" colspan="2"></td>
            </tr>
            <tr class="total">
                @if (withRowSelectionColumn) { <td class="row-selection"></td> }
                <th class="name">Total price*</th>
                <td class="calculation-summary-total price total-price">@summary.TotalPrice.ToString("c")</td>
            </tr>
            <tr class="fees">
                @if (withRowSelectionColumn) { <td></td> }
                <th colspan="2">*includes a <span class="calculation-summary-fee">@summary.FeePrice.ToString("c")</span> Loconomics service fee</th>
            </tr>
        </table>
    </div>
}

@helper ProviderPricingSummary(LcPricingModel.PricingSummaryData summary, Dictionary<string, LcPricingModel.PricingSummaryData> summaryLines, bool withRowSelectionColumn = false) {
 
    <div class="calculation provider-pricing-summary pricing-summary">
        <table class="calculation">

            @foreach(var line in summaryLines) {
                <tr>
                    @if (withRowSelectionColumn) { <td></td> }
                    <th>@Html.Raw(line.Value.Concept)</th>
                    <td class="subtotal-price price">@line.Value.SubtotalPrice.ToString("c")</td>
                </tr>
            }

            <tr class="fees">
                @if (withRowSelectionColumn) { <td></td> }
                <th>Loconomics service fee (includes credit card processing costs)</th>
                @* As opposite to CustomerPricingSummary, here we show PFeePrice instead of FeePrice, and must be showed as a negative number,
                    because is substracted from previous lines prices *@
                <td>@((0 - summary.PFeePrice).ToString("c"))</td>
            </tr>

            <tr class="separator">
                @if (withRowSelectionColumn) { <td></td> }
                <td class="separator" colspan="2"></td>
            </tr>
            <tr class="total">
                @if (withRowSelectionColumn) { <td class="row-selection"></td> }
                <th class="name">Total price</th>
                @* Provider price to be paid is subtotal less payment processing fees (pfees) 
                *@
                <td class="price total-price">@((summary.SubtotalPrice - summary.PFeePrice).ToString("c"))</td>
            </tr>
        </table>
    </div>
}

@helper EmailCustomerPricingSummary(LcPricingModel.PricingSummaryData summary, Dictionary<string, LcPricingModel.PricingSummaryData> summaryLines) {
    <div>
        <table border="0" style="border:none;width:100%">
            @foreach(var line in summaryLines) {
                <tr>
                    <th style="@LcEmailTemplateHelper.StylePricingSummaryConcept()">@Html.Raw(line.Value.Concept)</th>
                    <td style="@LcEmailTemplateHelper.StylePricingSummaryPrice()">@line.Value.TotalPrice.ToString("c")</td>
                </tr>
            }
            <tr class="separator">
                <td style="@LcEmailTemplateHelper.StylePricingSummarySeparator()" colspan="2"></td>
            </tr>
            <tr class="total">
                <th style="@LcEmailTemplateHelper.StylePricingSummaryConcept()">Total price*</th>
                <td style="@LcEmailTemplateHelper.StylePricingSummaryPrice()">@summary.TotalPrice.ToString("c")</td>
            </tr>
            <tr class="fees">
                <th style="@LcEmailTemplateHelper.StylePricingSummaryConcept()" colspan="2">*includes a @summary.FeePrice.ToString("c") Loconomics service fee</th>
            </tr>
        </table>
    </div>
}

@helper EmailProviderPricingSummary(LcPricingModel.PricingSummaryData summary, Dictionary<string, LcPricingModel.PricingSummaryData> summaryLines) {
     <div>
        <table border="0" style="border:none;width:100%">

            @foreach(var line in summaryLines) {
                <tr>
                    <th style="@LcEmailTemplateHelper.StylePricingSummaryConcept()">@Html.Raw(line.Value.Concept)</th>
                    <td style="@LcEmailTemplateHelper.StylePricingSummaryPrice()">@line.Value.SubtotalPrice.ToString("c")</td>
                </tr>
            }

            <tr class="fees">
                <th style="@LcEmailTemplateHelper.StylePricingSummaryConcept()">Loconomics service fee (includes credit card processing costs)</th>
                @* As opposite to CustomerPricingSummary, here we show PFeePrice instead of FeePrice, and must be showed as a negative number,
                    because is substracted from previous lines prices *@
                <td style="@LcEmailTemplateHelper.StylePricingSummaryPrice()">@((0 - summary.PFeePrice).ToString("c"))</td>
            </tr>

            <tr class="separator">
                <td style="@LcEmailTemplateHelper.StylePricingSummarySeparator()" colspan="2"></td>
            </tr>
            <tr class="total">
                <th style="@LcEmailTemplateHelper.StylePricingSummaryConcept()">Total price</th>
                @* Provider price to be paid is subtotal less payment processing fees (pfees) 
                *@
                <td style="@LcEmailTemplateHelper.StylePricingSummaryPrice()">@((summary.SubtotalPrice - summary.PFeePrice).ToString("c"))</td>
            </tr>
        </table>
    </div>
}

@helper EmailCustomerCancellationPricingSummary(dynamic booking) {
    <table border="0" style="border:none;width:100%">
        <tr>
            <td style="@LcEmailTemplateHelper.StylePricingSummaryConcept()">Original amount charged @(booking.BookingDate.ToShortDateString())</td>
            <td style="@LcEmailTemplateHelper.StylePricingSummaryPrice()">@((booking.TotalPrice ?? 0).ToString("c"))</td>
        </tr>
        <tr>
            <td style="@LcEmailTemplateHelper.StylePricingSummaryConcept()">less cancellation fee</td>
            <td style="@LcEmailTemplateHelper.StylePricingSummaryPrice()">-@(((booking.SubtotalPrice ?? 0) - (booking.SubtotalRefunded ?? 0)).ToString("c"))</td>
        </tr>
        <tr>
            <td style="@LcEmailTemplateHelper.StylePricingSummaryConcept()">less nonrefundable Loconomics service fee</td>
            <td style="@LcEmailTemplateHelper.StylePricingSummaryPrice()">-@(((booking.FeePrice ?? 0) - (booking.FeeRefunded ?? 0)).ToString("c"))</td>
        </tr>
        <tr>
            <th style="@LcEmailTemplateHelper.StylePricingSummaryConcept()">Refund to card ending in @LcEncryptor.Decrypt((string)booking.PaymentCustomerCardLastDigits)</th>
            <th style="@LcEmailTemplateHelper.StylePricingSummaryPrice()">@((booking.TotalRefunded ?? 0).ToString("c"))</th>
        </tr>
    </table>
}

@helper EmailProviderCancellationPricingSummary(dynamic booking) {
    <table border="0" style="border:none;width:100%">
        <tr>
            <td style="@LcEmailTemplateHelper.StylePricingSummaryConcept()">Cancellation fee</td>
            <td style="@LcEmailTemplateHelper.StylePricingSummaryPrice()">@(((booking.SubtotalPrice ?? 0) - (booking.SubtotalRefunded ?? 0)).ToString("c"))</td>
        </tr>
        <tr>
            <td style="@LcEmailTemplateHelper.StylePricingSummaryConcept()">less Loconomics service fee (payment processing costs)</td>
            <td style="@LcEmailTemplateHelper.StylePricingSummaryPrice()">-@((booking.PFeePrice ?? 0).ToString("c"))</td>
        </tr>
        <tr>
            <th style="@LcEmailTemplateHelper.StylePricingSummaryConcept()">Payment to account ending in @LcEncryptor.Decrypt((string)booking.PaymentProviderAccountLastDigits)</th>
            <th style="@LcEmailTemplateHelper.StylePricingSummaryPrice()">@(((booking.SubtotalPrice ?? 0) - (booking.PFeePrice ?? 0) - (booking.SubtotalRefunded ?? 0)).ToString("c"))</th>
        </tr>
    </table>
}

@functions{
    public static string TextOnlyProviderPricingSummary(LcPricingModel.PricingSummaryData summary, Dictionary<string, LcPricingModel.PricingSummaryData> summaryLines) {
        var sb = new System.Text.StringBuilder();
        foreach(var line in summaryLines) {
            sb.AppendFormat("{0}: {1:c}\n",
                LcHelpers.StripHtmlTags(line.Value.Concept),
                line.Value.SubtotalPrice);
        }
        sb.AppendFormat("Loconomics service fee (includes credit card processing costs): {0:c}\n", (0 - summary.PFeePrice));
        sb.AppendFormat("Total price: {0:c}\n", (summary.SubtotalPrice - summary.PFeePrice));
        return sb.ToString();
    }
    public static string TextOnlyCustomerPricingSummary(LcPricingModel.PricingSummaryData summary, Dictionary<string, LcPricingModel.PricingSummaryData> summaryLines) {
        var sb = new System.Text.StringBuilder();
        foreach(var line in summaryLines) {
            sb.AppendFormat("{0}: {1:c}\n",
                LcHelpers.StripHtmlTags(line.Value.Concept),
                line.Value.TotalPrice);
        }
        sb.AppendFormat("Total price*: {0:c}\n", summary.TotalPrice);
        sb.AppendFormat("*includes a {0:c} Loconomics service fee\n", summary.FeePrice);
        return sb.ToString();
    }
}