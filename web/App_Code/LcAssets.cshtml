@* IagoSRL: Assets Helper class similar to buit-in ScriptsHelper but
    with enhancements as cache-busting versioning and support for
    other assets, not only scripts
*@
@using System.Web.WebPages.Scope;

@functions{
    static private string assetsVersion = "20000101";
    static public string AssetsVersion{
        get { return assetsVersion; }
        set { assetsVersion = value; }
    }
    static public string AddVersion(string file, string extension) {
        
        var v = String.IsNullOrEmpty(AssetsVersion) ? "" : "." + AssetsVersion;

        if (file.EndsWith(extension)) {
            return file.Replace(extension, v + extension);
        } else {
            return file + v + extension;
        }
    }
}

@functions{ static public void AddStyle(string cssFile, bool useMinified = false){
    var p = ScopeStorage.CurrentScope;
    if (p["__LcStyles"] == null){
        p["__LcStyles"] = new List<string>();
    }
    ((List<string>)p["__LcStyles"]).Add(cssFile + (useMinified ? ".min" : ""));
}}
@helper GetStylesTags(){
    var p = ScopeStorage.CurrentScope;
    if (p["__LcStyles"] != null){
        foreach(var s in (List<string>)p["__LcStyles"]){
            @PrintStyleTag(s)
        }
    }
}
@helper PrintStyleTag(string f){
    <link rel="stylesheet" href="@AddVersion(f, ".css")"/>
}

@functions{ static public void AddScript(string file, bool useMinified = false){
    var p = ScopeStorage.CurrentScope;
    if (p["__LcScripts"] == null){
        p["__LcScripts"] = new List<string>();
    }
    ((List<string>)p["__LcScripts"]).Add(file + (useMinified ? ".min" : ""));
}}
@helper GetScriptsTags(){
    var p = ScopeStorage.CurrentScope;
    if (p["__LcScripts"] != null){
        foreach(var s in (List<string>)p["__LcScripts"]){
            @PrintScriptTag(s)
        }
    }
}
@helper PrintScriptTag(string f){
    <script type="text/javascript" src="@AddVersion(f, ".js")"></script>
}