@* Helper functions for Email templates page (every file with prefix Email), intended for be requested by a server-side
    http request to generate an email sent to users.
    Because some mail client limitations (specially webmails as gmail and hotmail) that doesn't allow css classes and 
    style element block, here we have helpers prefixed with Style that will print a style attribute (not block, attribute)
    with the desired css attributes for some general classes and tag styles.
*@

@*=== Elements/tags *@
@helper PrintStyle(string styleContent) {
    <text>style="@styleContent"</text>;
}
@helper StyleUlOl(bool withListStyle = false, string addCss = null) {
    @PrintStyle(ClassUlOl(withListStyle, addCss));
}
@helper StyleH1(string addCss = null) {
    @PrintStyle(ClassH1(addCss))
}
@helper StyleH2(string addCss = null) {
    @PrintStyle(ClassH2(addCss))
}
@helper StyleH3(string addCss = null) {
    @PrintStyle(ClassH3(addCss))
}
@helper StyleH4(string addCss = null) {
    @PrintStyle(ClassH4(addCss))
}
@helper StyleH5(string addCss = null) {
    @PrintStyle(ClassH5(addCss))
}
@helper StyleH6(string addCss = null) {
    @PrintStyle(ClassH6(addCss))
}

@*=== Resets *@
@helper StyleResetP(string addCss = null) {
    @PrintStyle(ClassResetP(addCss))
}

@*=== Classes *@
@functions{
    public static string ClassUlOl(bool withListStyle = false, string addCss = null) {
        return (withListStyle ? "list-style-position:inside" : "list-style:none inside none") + ";margin:0;padding:0;" + addCss;
    }
    public static string ClassH1(string addCss = null) {
        return "color:#5a5b5b !important;line-height:100%;" + addCss;
    }
    public static string ClassH2(string addCss = null) {
        return "color:#5a5b5b !important;line-height:100%;" + addCss;
    }
    public static string ClassH3(string addCss = null) {
        return "color: #5a5b5b !important;line-height:100%;font-size:20px;margin:0;font-weight:bold;" + addCss;
    }
    public static string ClassH4(string addCss = null) {
        return "color: #5a5b5b !important;line-height:100%;margin:15px 0 6px;font-size:17px;" + addCss;
    }
    public static string ClassH5(string addCss = null) {
        return "color:#5a5b5b !important;line-height:100%;margin:7px 0 2px;font-size:13px;font-weight:bold;" + addCss;
    }
    public static string ClassH6(string addCss = null) {
        return "color:#5a5b5b !important;line-height:100%;" + addCss;
    }
    public static string ClassResetP(string addCss = null) {
        return "margin:0;padding:0;" + addCss;
    }

    public static string StyleButton() {
        return "background:none repeat scroll 0 0 #99C027;border-radius:4px 4px 4px 4px;-o-border-radius:4px 4px 4px 4px;-webkit-border-radius:4px 4px 4px 4px;-moz-border-radius:4px 4px 4px 4px;color:White;padding:.4em 1em;display:inline-block;text-decoration:none;";
    }
    public static string StyleRespondButton() {
        return StyleButton() + "margin:1em;";
    }
    public static string StyleMessageCopy() {
        return "font-style: italic;";
    }
    public static string StyleMessageSubject() {
        return "margin: 15px 0;";
    }
    public static string StyleMessageSection() {
        return "background: none repeat scroll 0 0 white;border: 1px solid #747474;border-radius: 4px 4px 4px 4px;padding: 15px;";
    }
    public static string StyleHighlighted() {
        return "background-color: #9ACECE;";
    }
    public static string StyleUserPublicName() {
        return "font-weight: bold;";
    }
    public static string StyleMiniUserInfo() {
        return "clear: both;display: inline-block !important;width: 150px;overflow: hidden;";
    }
    public static string StyleMiniUserInfoH5() {
        return "font-size: 1em;color: #747474;display: inline;";
    }

    public static string StyleMiniAvatar() {
        return "display: inline-block;height: 55px;margin: 2px 5px 5px 0;vertical-align: top;width: 55px;";
    }
    public static string StyleRatingNote() {
        return "font-size: .8em;color: #747474;font-style: italic;";
    }

    public static string StylePricingSummaryTotal() {
        return "font-weight: bold;";
    }
    public static string StylePricingSummaryPrice() {
        return "padding-left: 3px;text-align: right;vertical-align: bottom;";
    }
    public static string StylePricingSummaryConcept() {
        return "padding-right: 5px;text-align: left;";
    }
    public static string StylePricingSummarySeparator() {
        return "border-bottom: 1px solid #d8d7d7;height: 0;padding: 4px !important;";
    }
}

@* Some non-css utilities
 *@
@functions{
    
    public static string GetLocationForGoogleMaps(dynamic data) {
        return LcHelpers.JoinNotEmptyStrings(", ", data.AddressLine1, data.City, data.StateProvinceCode, "United States");
    }
    
    public static string GetLastUpdateText(dynamic date) {
        if (date == null) return "";
        return string.Format("last updated: {0:D} at {1:T}",
            date, date);
    }
}
@helper PrintAddress(IDictionary<string, object> addressDetails) {
    <div>
        @if (!String.IsNullOrEmpty((string)addressDetails["name"])) {
        <div>@addressDetails["name"]</div>
        }
        <span>@addressDetails["location"]</span>
        <span>@addressDetails["city"]</span>
        <span>@addressDetails["state"]</span>
        <span>@addressDetails["zipcode"]</span>
    </div>
}
@helper PrintAddress(dynamic addressDetails) {
    <div>
        @if (!String.IsNullOrEmpty((string)addressDetails.Name)) {
        <div>@addressDetails.Name</div>
        }
        <span>@addressDetails.Location</span>
        <span>@addressDetails.City</span>
        <span>@addressDetails.State</span>
        <span>@addressDetails.PostalCode</span>
        @if (!String.IsNullOrEmpty(addressDetails.SpecialInstructions)) {
            <span>(@addressDetails.SpecialInstructions)</span>
        }
    </div>
}
@helper PrintAddressBlock(dynamic data) {
    if (data.StateProvinceCode != null)
    {
        <div>
            @PrintAddress(new {
                Location = data.AddressLine1 + " " + data.AddressLine2,
                City = data.City, 
                State = data.StateProvinceCode,
                PostalCode = data.PostalCode,
                SpecialInstructions = data.LocationSpecialInstructions
            })

            <a target="_blank" href="http://maps.google.com/?q=@GetLocationForGoogleMaps(data)">View direction</a>
        </div>
    }
    else
    {
        // Null, no location
        <div>Address not available</div>
    }
}
@helper PrintAddressLine(dynamic data) {
    if (data.StateProvinceCode != null)
    {
        <span>
            @data.AddressLine1, @(String.IsNullOrEmpty(data.AddressLine2) ? "" : data.AddressLine2 + ",") @data.City, @data.StateProvinceCode @data.PostalCode
            @if (!String.IsNullOrEmpty(data.LocationSpecialInstructions)) {
                <span>(@data.LocationSpecialInstructions)</span>
            }
        </span>
    }
    else
    {
        // Null, no location
        <div>Address not available</div>
    }
}
@helper PrintUserContactInformation(int userID) {
    var user = LcData.UserInfo.GetUserRowWithContactData(userID);
    <div>
        @user.FullName<br />
        Phone: 
        @if(String.IsNullOrEmpty(user.MobilePhone)) { 
            @user.AlternatePhone
        } else if (String.IsNullOrEmpty(user.AlternatePhone)) {
            @user.MobilePhone <text>(mobile)</text>
        } else {
            @user.MobilePhone <text>(mobile) or </text> @user.AlternatePhone <text>(other)</text>
        }
        <br />
        E-mail: <a href="mailto:@user.Email">@LcRestClient.GetEmailFromDb(user.Email)</a>
    </div>
}
@helper PrintUserProfileLink(dynamic userdata, string label = null) {/*
    */<a target="_blank" href="@(LcUrl.SiteUrl + LcData.UserInfo.GetUserPublicURL(userdata.UserID))">@(label ?? LcHelpers.GetUserDisplayName(userdata))</a>/*
*/}
