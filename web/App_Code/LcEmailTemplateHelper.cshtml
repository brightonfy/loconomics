@* Helper functions for Email templates page (every file with prefix Email), intended for be requested by a server-side
    http request to generate an email sent to users.
    Because some mail client limitations (specially webmails as gmail and hotmail) that doesn't allow css classes and 
    style element block, here we have helpers prefixed with Style that will print a style attribute (not block, attribute)
    with the desired css attributes for some general classes and tag styles.
*@

@helper PrintStyle(string styleContent) {
    <text>style="@styleContent"</text>
}

@*=== Elements/tags *@
@helper StyleH1(string addCss = null) {
    @PrintStyle("color:#5a5b5b !important;line-height:100%;" + addCss)
}
@helper StyleH2(string addCss = null) {
    @PrintStyle("color:#5a5b5b !important;line-height:100%;" + addCss)
}
@helper StyleH3(string addCss = null) {
    @PrintStyle("color: #5a5b5b !important;line-height:100%;font-size:20px;margin:0;font-weight:bold;" + addCss)
}
@helper StyleH4(string addCss = null) {
    @PrintStyle("color: #5a5b5b !important;line-height:100%;margin:15px 0 6px;font-size:17px;" + addCss)
}
@helper StyleH5(string addCss = null) {
    @PrintStyle("color:#5a5b5b !important;line-height:100%;" + addCss)
}
@helper StyleH6(string addCss = null) {
    @PrintStyle("color:#5a5b5b !important;line-height:100%;" + addCss)
}
@helper StyleUlOl(bool withListStyle = false, string addCss = null) {
    @PrintStyle((withListStyle ? "list-style-position:inside" : "list-style:none inside none") + ";margin:0;padding:0;" + addCss)
}

@*=== Resets *@
@helper StyleResetP(string addCss = null) {
    @PrintStyle("margin:0;padding:0;" + addCss)
}

@*=== Classes *@
@functions{
    public static string StyleButton() {
        return "background:none repeat scroll 0 0 #99C027;border-radius:4px 4px 4px 4px;-o-border-radius:4px 4px 4px 4px;-webkit-border-radius:4px 4px 4px 4px;-moz-border-radius:4px 4px 4px 4px;color:White;padding:.4em 1em;display:inline-block;text-decoration:none;";
    }
    public static string StyleRespondButton() {
        return StyleButton() + "margin:1em;";
    }
    public static string StyleMessageCopy() {
        return "font-style: italic;";
    }
    public static string StyleMessageSubject() {
        return "margin: 15px 0;";
    }
    public static string StyleMessageSection() {
        return "background: none repeat scroll 0 0 white;border: 1px solid #747474;border-radius: 4px 4px 4px 4px;padding: 15px;";
    }
    public static string StyleHighlighted() {
        return "background-color: #9ACECE;";
    }
    public static string StyleUserPublicName() {
        return "font-weight: bold;";
    }
    public static string StyleMiniUserInfo() {
        return "clear: both;display: inline-block !important;width: 150px;overflow: hidden;";
    }
    public static string StyleMiniUserInfoH5() {
        return "font-size: 1em;color: #747474;display: inline;";
    }

    public static string StyleMiniAvatar() {
        return "display: inline-block;height: 55px;margin: 2px 5px 5px 0;vertical-align: top;width: 55px;";
    }
    public static string StyleRatingNote() {
        return "font-size: .8em;color: #747474;font-style: italic;";
    }

    public static string StylePricingSummaryTotal() {
        return "font-weight: bold;";
    }
    public static string StylePricingSummaryPrice() {
        return "padding-left: 3px;text-align: right;vertical-align: bottom;";
    }
    public static string StylePricingSummaryConcept() {
        return "padding-right: 5px;text-align: left;";
    }
    public static string StylePricingSummarySeparator() {
        return "border-bottom: 1px solid #d8d7d7;height: 0;padding: 4px !important;";
    }
}

@* Some non-css utilities
 *@
@functions{
    public class BookingEmailInfo {
        public int BookingRequestID;
        public int BookingID;
        public dynamic Booking;
        public LcData.UserInfo.UserType SentTo;
        public int SentToUserID;
        public LcData.UserInfo.UserType SentBy;
        public int SentByUserID;
        public LcData.UserInfo.UserType PairUserType;
        public int PairUserID;
        public string ViewOnSiteURL;
        public DateTime ConfirmationLimitDate;
        public bool IsRequest;
        
        private dynamic sentToUser, sentByUser, pairUser;
        public dynamic SentToUser {
            get {
                if (sentToUser == null) 
                    sentToUser = LcData.UserInfo.GetUserRow(SentToUserID);
                return sentToUser;
            }
        }
        public dynamic SentByUser {
            get {
                if (sentByUser == null) 
                    sentByUser = LcData.UserInfo.GetUserRow(SentByUserID);
                return sentByUser;
            }
        }
        public dynamic PairUser {
            get {
                if (pairUser == null) 
                    pairUser = LcData.UserInfo.GetUserRow(PairUserID);
                return pairUser;
            }
        }
        
        private dynamic providerUser, customerUser;
        public dynamic ProviderUser {
            get {
                if (providerUser == null)
                    providerUser = LcData.UserInfo.GetUserRow(Booking.ProviderUserID);
                return providerUser;
            }
        }
        public dynamic CustomerUser {
            get {
                if (customerUser == null)
                    customerUser = LcData.UserInfo.GetUserRow(Booking.CustomerUserID);
                return customerUser;
            }
        }
    }
    public static BookingEmailInfo GetBookingInfo() {
        
        dynamic b = null;
        string viewURL = null;
        var sentTo = LcData.UserInfo.UserType.None;
        var sentBy = LcData.UserInfo.UserType.System;
        var pairType = LcData.UserInfo.UserType.None;
        bool isRequest = false;
        var bID = Request["BookingID"].AsInt();
        var brID = Request["BookingRequestID"].AsInt();
        if (!Enum.TryParse<LcData.UserInfo.UserType> (Request["SentTo"], out sentTo)) {
            throw new ArgumentException("Invalid value for url request parameter SentTo: " + Request["SentTo"]);
        }
        Enum.TryParse<LcData.UserInfo.UserType> (Request["SentBy"], out sentBy);
        DateTime confirmationLimitDate = DateTime.MaxValue;

        if (bID == 0) {
            b = LcData.Booking.GetBookingRequestForUser(brID, 0, true);
            isRequest = true;
            viewURL = LcUrl.LangUrl + LcData.Booking.GetUrlPathForBookingRequest(brID);
            if (b != null) {
                confirmationLimitDate = b.UpdatedDate.AddHours(LcData.Booking.ConfirmationLimitInHours);
            }
        } else {
            b = LcData.Booking.GetBookingForUser(bID, 0, true);
            viewURL = LcUrl.LangUrl + LcData.Booking.GetUrlPathForBooking(bID, brID);
        }
        
        int toUserID = 0, byUserID = 0, pairUserID = 0;
        if (sentTo == LcData.UserInfo.UserType.Provider) {
            toUserID = b.ProviderUserID;
        }

        switch (sentTo) {
            case LcData.UserInfo.UserType.Customer:
                toUserID = b.CustomerUserID;
                pairUserID = b.ProviderUserID;
                pairType = LcData.UserInfo.UserType.Provider;
                break;
            case LcData.UserInfo.UserType.Provider:
                toUserID = b.ProviderUserID;
                pairUserID = b.CustomerUserID;
                pairType = LcData.UserInfo.UserType.Customer;
                break;
        }
        switch (sentBy) {
            case LcData.UserInfo.UserType.Customer:
                byUserID = b.CustomerUserID;
                break;
            case LcData.UserInfo.UserType.Provider:
                byUserID = b.ProviderUserID;
                break;
        }      
        
        return new BookingEmailInfo{
            BookingRequestID = brID
            ,BookingID = bID
            ,Booking = b
            ,IsRequest = isRequest
            ,SentTo = sentTo
            ,SentToUserID = toUserID
            ,SentBy = sentBy
            ,SentByUserID = byUserID
            // If this message is sent to provider, the 'pair' is the customer, and viceversa:
            ,PairUserID = pairUserID
            ,PairUserType = pairType
            ,ViewOnSiteURL = viewURL
            ,ConfirmationLimitDate = confirmationLimitDate
        };
    }
    
    public static string GetLocationForGoogleMaps(dynamic data){
        return LcHelpers.JoinNotEmptyStrings(", ", data.AddressLine1, data.City, data.StateProvinceCode, "United States");
    }
    
    public static string GetLastUpdateText(dynamic date) {
        if (date == null) return "";
        return string.Format("last updated: {0:D} at {1:T}",
            date, date);
    }
}
@helper PrintAddress(IDictionary<string, object> addressDetails) {
    <div>
        @if (!String.IsNullOrEmpty((string)addressDetails["name"])) {
        <div>@addressDetails["name"]</div>
        }
        <span>@addressDetails["location"]</span>
        <span>@addressDetails["city"]</span>
        <span>@addressDetails["state"]</span>
        <span>@addressDetails["zipcode"]</span>
    </div>
}
@helper PrintAddress(dynamic addressDetails) {
    <div>
        @if (!String.IsNullOrEmpty((string)addressDetails.Name)) {
        <div>@addressDetails.Name</div>
        }
        <span>@addressDetails.Location</span>
        <span>@addressDetails.City</span>
        <span>@addressDetails.State</span>
        <span>@addressDetails.PostalCode</span>
        @if (!String.IsNullOrEmpty(addressDetails.SpecialInstructions)) {
            <span>(@addressDetails.SpecialInstructions)</span>
        }
    </div>
}
@helper PrintAddressBlock(dynamic data) {
    if (data.StateProvinceCode != null)
    {
        <div>
            @PrintAddress(new {
                Location = data.AddressLine1 + " " + data.AddressLine2,
                City = data.City, 
                State = data.StateProvinceCode,
                PostalCode = data.PostalCode,
                SpecialInstructions = data.LocationSpecialInstructions
            })

            <a target="_blank" href="http://maps.google.com/?q=@GetLocationForGoogleMaps(data)">View direction</a>
        </div>
    }
    else
    {
        // Null, no location
        <div>Address not available</div>
    }
}
@helper PrintAddressLine(dynamic data) {
    if (data.StateProvinceCode != null)
    {
        <span>
            @data.AddressLine1, @(String.IsNullOrEmpty(data.AddressLine2) ? "" : data.AddressLine2 + ",") @data.City, @data.StateProvinceCode @data.PostalCode
            @if (!String.IsNullOrEmpty(data.LocationSpecialInstructions)) {
                <span>(@data.LocationSpecialInstructions)</span>
            }
        </span>
    }
    else
    {
        // Null, no location
        <div>Address not available</div>
    }
}
@helper PrintUserContactInformation(int userID) {
    var user = LcData.UserInfo.GetUserRowWithContactData(userID);
    <div>
        @user.FullName<br />
        Phone: 
        @if(String.IsNullOrEmpty(user.MobilePhone)) { 
            @user.AlternatePhone
        } else if (String.IsNullOrEmpty(user.AlternatePhone)) {
            @user.MobilePhone <text>(mobile)</text>
        } else {
            @user.MobilePhone <text>(mobile) or </text> @user.AlternatePhone <text>(other)</text>
        }
        <br />
        e-mail: <a href="mailto:@user.Email">@user.Email</a>
    </div>
}
@helper PrintUserProfileLink(dynamic userdata, string label = null) {
    <a target="_blank" href="@(LcUrl.SiteUrl + LcData.UserInfo.GetUserPublicURL(userdata.UserID))">@(label ?? LcHelpers.GetUserDisplayName(userdata))</a>
}
