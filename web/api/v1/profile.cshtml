@*
    Reading and updating the User Profile.

    Options:

    - GET: no params
    
    - PUT:
        // Name
        firstName:string Editable
        lastName:string Editable
        secondLastName:string Editable
        businessName:string Editable
        // Contact
        alternativeEmail:string Editable
        phone:string Editable
        canReceiveSms:bool Editable
        birthMonthDay:int Editable. Day of the month of the birthday (the year is not wanted)
        birthMonth:int Editable. Month of the birthday (the year is not wanted)

    - PUT /tracking: This URL is intented to be a differencial update of the profile tracking related fields, where
            all values are optional from being specified. Right now there is only one possible value:
        onboardingStep:string Editable

    - @Result {
        // ID
        userID:int Auto
        email:string

        // Name
        firstName:string Editable
        lastName:string Editable
        secondLastName:string Editable
        businessName:string Editable

        // Contact
        alternativeEmail:string Editable
        phone:string Editable
        canReceiveSms:bool Editable
        birthMonthDay:int Editable. Day of the month of the birthday (the year is not wanted)
        birthMonth:int Editable. Month of the birthday (the year is not wanted)
   
        // Account Type
        isServiceProfessional:bool Auto
        isClient:bool Auto
        isMember:bool Auto

        // Account Status
        onboardingStep:string Auto. The name of the step in the onboarding process, the UI must guide user to that to complete the basic profile.
        accountStatusID:int Auto
        createdDate:datetime Auto
        updatedDate:datetime Auto
    }
*@
@functions{
    public class RestUserProfile : RestWebPage
    {
        private dynamic GetData()
        {
            return LcRestUserProfile.GetUserProfile(WebSecurity.CurrentUserId);
        }
        
        public override dynamic Get()
        {
            if (UrlData.Count > 0) {
                throw new HttpException(404, "Not found");
            }
            
 	        return GetData();
        }
        
        object PutTracking() {
            
            // IMPORTANT: When implementing other optional options on this API point,
            // ensure to check first if the key was specified and avoid update if not
            // (preventing setting an unwanted default value)
            
            var step = Request.Form["onboardingStep"];
            
            LcData.UserInfo.SetOnboardingStep(WebSecurity.CurrentUserId, step);
            
            return "OK";
        }

        public override dynamic Put()
        {
            if (UrlData.Count > 1) {
                throw new HttpException(404, "Not found");
            }
            else if (UrlData.Count == 1) {
                if (UrlData[0] == "tracking") {
                    return PutTracking();
                }
                else {
                    throw new HttpException(404, "Not found");
                }
            }
            
            // Validation
            Validation.RequireField("firstname", LcRessources.RequiredField("First name"));
            Validation.RequireField("lastname", LcRessources.RequiredField("Last name"));
            Validation.Add("alternativeEmail", Validator.Regex(LcValidators.EmailAddressRegexPattern, "The alternative email is not valid."));
            Validation.Add("birthMonthDay", Validator.Integer("Birth Day must be an number (day of the month)"));
            Validation.Add("birthMonth", Validator.Integer("Birth Month must be an number"));

            if (!Validation.IsValid() || !ModelState.IsValid) {
                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }

            // Parameters
            var profile = new LcRestUserProfile {
                userID = WebSecurity.CurrentUserId,
                firstName = Request.Form["firstName"],
                lastName = Request.Form["lastName"],
                secondLastName = Request.Form["secondLastName"],
                businessName = Request.Form["businessName"],
                alternativeEmail = Request.Form["alternativeEmail"],
                phone = Request.Form["phone"],
                canReceiveSms = Request.Form["canReceiveSms"].AsBool(),
                birthMonthDay = Request.Form["birthMonthDay"].AsInt(),
                birthMonth = Request.Form["birthMonth"].AsInt()
            };

            LcRestUserProfile.UpdateUserProfile(profile);
            
            return GetData();
        }
    }
}
@{   
    Response.RestRequiresUser(LcData.UserInfo.UserType.User);
    new RestUserProfile().JsonResponse(this);
}
