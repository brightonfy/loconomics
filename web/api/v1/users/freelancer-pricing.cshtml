@using WebMatrix.WebData;
@*
    Fetchs public freelancer pricing per job title.

    TODO Force constraints for active pricing, active freelancer profile when fetching this data,
    right now the same freelancer API is being used and is not completely secure for public access.

    TODO Double check if an API to access a specific freelancerPricingID is needed

    TODO Clean-up of fields that are not needed publicly.

    Options:
    
    - GET /{jobTitleID}
        List all active pricings for that active job title

    ALL @returns FreelancerPricing {
        "freelancerPricingID": 73,
        "pricingTypeID": 1,
        "freelancerUserID": 141,
        "jobTitleID": 16,
        "name": "Testing 2",
        "description": "Testing 2",
        "price": 0,
        "serviceDurationMinutes": 0,
        "firstTimeClientsOnly": false,
        "numberOfSessions": 1,
        "priceRate": 14,
        "priceRateUnit": "hour",
        "isPhone": false,
        "serviceAttributes": [
            442,
            441,
            446
        ]
    }
        
    EXAMPLES {
        'Public Freelancer Pricing per job title': {
            url: '/api/v1/en-US/users/141/freelancer-pricing/106',
            get: {}
        }
    }
*@
@functions{
    public class RestPublicFreelancerPricing : RestWebPage
    {
        /// <summary>
        /// Retrieve the full list of freelancer pricing by jobTitleID
        /// </summary>
        /// <returns></returns>
        public override dynamic Get()
        {
            var userID = this.WebPage.Context.GetRouteValue("userID").AsInt(0);

            // Item ID
            if (UrlData.Count == 1 && UrlData[0].IsInt()) {
                return LcData.GetRestFreelancerPricing(userID, UrlData[0].AsInt(0));
            }
            else if (UrlData.Count == 1) {
                throw new HttpException(400, "The Job Title ID has bad format (must be an integer number)");
            }

            throw new HttpException(404, "Not Found");
        }
    }
}
@{
    new RestPublicFreelancerPricing().JsonResponse(this);
}
