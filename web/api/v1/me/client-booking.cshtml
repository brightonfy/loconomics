@using WebMatrix.WebData;
@*
    Allows a client to create a booking, in other words: to book a service professional.
    There is only POST access, no editing, no fetching.
    On creation, the just created booking details are returned and later can
    be fetched using the /bookings API.

    Options:
    
    - POST /
        @params {
        }

        @result RestBooking. See the /bookings API for details.
        
    EXAMPLES {
        "Book a service professional (client booking)": {
            "url": "/api/v1/en-US/me/client-booking",
            "post": {}
        }
    }
*@
@functions{
    public class RestMeClientBooking : RestWebPage
    {
        public override dynamic Post()
        {
            if (UrlData.Count > 0)
                throw new HttpException(405, "Method not allowed.");
            
            var userID = WebSecurity.CurrentUserId;

            var itemID = CreateItem();

            if (itemID > 0)
            {
                return LcData.Booking.GetRestBooking(itemID, userID);
            }

            throw new HttpException(500, "Something goes wrong");
        }
        
        public dynamic CreateItem()
        {
            // Parameters
            int userID = WebSecurity.CurrentUserId;
            int itemID = 0;
            
            Validation.RequireField("serviceProfessionalUserID", LcRessources.RequiredField("Service Professional"));
            Validation.RequireField("jobTitleID", LcRessources.RequiredField("Job Title"));
            Validation.RequireField("serviceAddressID", LcRessources.RequiredField("Service Address"));
            Validation.RequireField("billingAddressID", LcRessources.RequiredField("Billing Address"));
            Validation.Add("serviceProfessionalUserID", Validator.Integer("Service Professional"));
            Validation.Add("jobTitleID", Validator.Integer("Job Title"));
            Validation.Add("serviceAddressID", Validator.Integer("Location"));
            Validation.Add("billingAddressID", Validator.Integer("Billing Address"));
            Validation.Add("gratuityAmount", Validator.Decimal("Gratuity must be a number"));
            Validation.Add("gratuityPercentage", Validator.Decimal("Gratuity must be a number"));
            
            var serviceProfessionalUserID = Request.Form["serviceProfessionalUserID"].AsInt();
            var jobTitleID = Request.Form["jobTitleID"].AsInt();
            var serviceAddressesID = Request.Form["serviceAddressesID"].AsInt();
            var billingAddressID = Request.Form["billingAddressID"].AsInt();
            var gratuityAmount = Request.Form["gratuityAmount"].AsDecimal();
            var gratuityPercentage = Request.Form["gratuityPercentage"].AsDecimal();

            /* TODO: Update to receive an array of object like
                * { serviceProfessionalUserID: 0, totalPrice: 0, clientInputData: null,... }
                * like the pricing estimate detail object.
            */
            if (!Request.Form.AllKeys.Contains<string>("pricing[]")) {
                ModelState.AddError("pricing", "Choose almost one service");
            }
            var pricing = Request.Form.GetValues("pricing[]");
            var pricingIds = new List<int>();
            if (pricing == null || pricing.Length < 1) {
                ModelState.AddError("pricing", "Choose almost one service");
            }
            else {
                foreach(var pricingItem in pricing) {
                    var sid = pricingItem.AsInt(0);
                    if (sid == 0) {
                        ModelState.AddError("pricing", "Some specified services are wrong");
                        break;
                    }
                    pricingIds.Add(sid);
                }
            }
            
            // For instant booking
            Validation.RequireField("startTime", LcRessources.RequiredField("Start Date and Time"));
            // TODO For booking request: implement dates, detection of request vs instant
            var startTime = DateTimeFromISO(Request["startTime"]);
            if (!startTime.HasValue) {
                ModelState.AddError("startTime", "Start date/time is not valid");
            }

            if (!Validation.IsValid()) {
                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }

            try
            {
                itemID = LcData.Booking.InsSimplifiedProviderBooking(
                    userID,
                    Request["clientUserID"].AsInt(),
                    Request["addressID"].AsInt(),
                    startTime.Value,
                    pricingIds,
                    Request["preNotesToClient"],
                    Request["preNotesToSelf"],
                    Request["allowBookUnavailableTime"].AsBool(false)
                );
                
                // Send communication to client (email)
                LcMessaging.SendProviderBooking(itemID); 
            }
            catch (ConstraintException delEx)
            {
                // The item cannot be inserted/updated:
                throw new HttpException(400, delEx.Message);
            }
            
            // Return ID
            return itemID;
        }
    }
}
@{
    Response.RestRequiresUser(LcData.UserInfo.UserType.User);
    new RestMeClientBooking().JsonResponse(this);
}
