@using WebMatrix.WebData;
@*
    Allows a client to create a booking, in other words: to book a service professional.
    There is only POST access, no editing, no fetching.
    On creation, the just created booking details are returned and later can
    be fetched using the /bookings API.

    Options:

    - GET /
        @params {
            serviceProfessionalUserID:int,
            jobTitleID:int,
            bookCode:string [Optional]
        }

        @result RestBooking. See the /bookings API for details.
    
    - POST /
        @params {
        }

        @result RestBooking. See the /bookings API for details.
        
    EXAMPLES {
        "Book a service professional (client booking)": {
            "url": "/api/v1/en-US/me/client-booking",
            "post": {}
        }
    }
*@
@functions{
    public class RestMeClientBooking : RestWebPage
    {
        public override dynamic Get()
        {
            if (UrlData.Count > 0)
                throw new HttpException(404, "Not Found");
            
            // Query to fetch information in order to start
            // creation of a booking
            var clientID = WebSecurity.CurrentUserId;
            var serviceProfessionalID = Request["serviceProfessionalUserID"].AsInt();
            var jobTitleID = Request["jobTitleID"].AsInt();
            var bookCode = Request["bookCode"];
            var locale = LcRest.Locale.Current;
            var newBooking = LcRest.Booking.NewFor(clientID, serviceProfessionalID, jobTitleID, locale.languageID, locale.countryID, bookCode);
            if (newBooking == null)
                throw new HttpException(404, "Not Found");

            return newBooking;
        }

        public override dynamic Post()
        {
            if (UrlData.Count > 0)
                throw new HttpException(405, "Method not allowed.");
            
            var userID = WebSecurity.CurrentUserId;

            var itemID = CreateItem();

            if (itemID > 0)
            {
                return LcRest.Booking.Get(itemID, true, false, userID);
            }

            throw new HttpException(500, "Something goes wrong");
        }
        
        public dynamic CreateItem()
        {
            // Parameters
            int userID = WebSecurity.CurrentUserId;
            int itemID = 0;
            
            Validation.RequireField("serviceProfessionalUserID", LcRessources.RequiredField("Service Professional"));
            Validation.RequireField("jobTitleID", LcRessources.RequiredField("Job Title"));
            Validation.RequireField("serviceAddressID", LcRessources.RequiredField("Location"));
            Validation.Add("serviceProfessionalUserID", Validator.Integer("Service Professional"));
            Validation.Add("jobTitleID", Validator.Integer(LcRessources.RequiredField("Job Title")));
            Validation.Add("serviceAddressID", Validator.Integer(LcRessources.RequiredField("Location")));
            
            // TODO Implement gratuity as of #659
            //Validation.Add("gratuityAmount", Validator.Decimal("Gratuity must be a number"));
            //Validation.Add("gratuityPercentage", Validator.Decimal("Gratuity must be a number"));
            
            var serviceProfessionalUserID = Request.Form["serviceProfessionalUserID"].AsInt();
            var jobTitleID = Request.Form["jobTitleID"].AsInt();
            var serviceAddressID = Request.Form["serviceAddressID"].AsInt();
            var bookCode = Request.Form["bookCode"];
            //var gratuityAmount = Request.Form["gratuityAmount"].AsDecimal();
            //var gratuityPercentage = Request.Form["gratuityPercentage"].AsDecimal();
            // TODO To implement on recurring bookings. It's expected that more fields are required, to know the recurrence repeatition pattern/rules
            //var makeRepeatBooking = Request.Form["makeRepeatBooking"].AsBool();
            
            var locale = LcRest.Locale.Current;
            // Get booking presets for current data, to know some fixed settings like instantBooking
            var booking = LcRest.Booking.NewFor(userID, serviceProfessionalUserID, jobTitleID, locale.languageID, locale.countryID, bookCode);

            /* TODO: Update to receive an array of object like
                * { serviceProfessionalUserID: 0, totalPrice: 0, clientInputData: null,... }
                * like the pricing estimate detail object.
            */
            if (!Request.Form.AllKeys.Contains<string>("services[]"))
            {
                ModelState.AddError("services", "Choose almost one service");
            }
            var pricing = Request.Form.GetValues("services[]");
            var pricingIds = new List<int>();
            if (pricing == null || pricing.Length < 1) {
                ModelState.AddError("services", "Choose almost one service");
            }
            else {
                foreach(var pricingItem in pricing) {
                    var sid = pricingItem.AsInt(0);
                    if (sid == 0) {
                        ModelState.AddError("services", "Some specified services are wrong");
                        break;
                    }
                    pricingIds.Add(sid);
                }
            }
            
            // Date/times: main and alternative1/2
            var requiredStartTimeName = "Start date and time";
            
            DateTime? alternative1StartTime = null;
            DateTime? alternative2StartTime = null;
            if (!booking.instantBooking) {
                requiredStartTimeName = "Preferred start date and time";
                if (!Request.Form["alternative1StartTime"].IsEmpty()) {
                    alternative1StartTime = DateTimeFromISO(Request.Form["alternative1StartTime"]);
                    if (!alternative1StartTime.HasValue) {
                        ModelState.AddError("alternative1StartTime", "Alternative date and time 1 is not valid");
                    }
                }
                if (!Request.Form["alternative2StartTime"].IsEmpty()) {
                    alternative2StartTime = DateTimeFromISO(Request.Form["alternative2StartTime"]);
                    if (!alternative2StartTime.HasValue)
                    {
                        ModelState.AddError("alternative2StartTime", "Alternative date and time 2 is not valid");
                    }
                }
            }

            var serviceStartTime = DateTimeFromISO(Request.Form["serviceStartTime"]);
            if (!serviceStartTime.HasValue)
            {
                ModelState.AddError("startTime", requiredStartTimeName + " is not valid");
            }

            if (!Validation.IsValid()) {
                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }

            try
            {               
                // Create booking
                booking = LcRest.Booking.InsClientBooking(
                    userID,
                    serviceProfessionalUserID,
                    jobTitleID,
                    serviceAddressID,
                    serviceStartTime.Value,
                    alternative1StartTime,
                    alternative2StartTime,
                    pricingIds,
                    locale.languageID,
                    locale.countryID,
                    bookCode
                );
                itemID = booking.bookingID;
                
                // Collect payment
                var address = new LcData.Address {
                    AddressLine1 = Request["billingAddress[addressLine1]"],
                    AddressLine2 = Request["billingAddress[addressLine2]"],
                    PostalCode = Request["billingAddress[postalCode]"],
                    CountryID = locale.countryID
                };
                var autoAddress = LcRest.Address.GetPostalCodeData(address.PostalCode, address.CountryID, true);
                if (autoAddress != null) {
                    address.StateProvinceCode = autoAddress.stateProvinceCode;
                    address.City = autoAddress.city;
                }
                
                var paymentErrors = booking.CollectPayment(new LcPayment.InputPaymentMethod
                {
                    paymentMethodID = Request["paymentMethod[paymentMethodID]"],
                    cardNumber = Request["paymentMethod[cardNumber]"],
                    nameOnCard = Request["paymentMethod[nameOnCard]"],
                    expirationMonth = Request["paymentMethod[expirationMonth]"],
                    expirationYear = Request["paymentMethod[expirationYear]"],
                    securityCode = Request["paymentMethod[securityCode]"],
                    billingAddress = address
                }, Request["paymentMethod[savePayment]"].AsBool());

                if (paymentErrors != null && paymentErrors.Count > 0)
                {
                    // At this point, we show errors and the API consumer must attempt
                    // calls only to update the provided payment data for the generated bookingID
                    // not to pass all the data again since the other details are saved and
                    // available time reserved.
                    foreach(var paymentErr in paymentErrors) {
                        ModelState.AddError(paymentErr.Key, paymentErr.Value);
                    }
                    // TODO Needs return the errors and the bookingID
                }
                
                // Send communication to client (email)
                // TODO Reenable when reimplemented email templates
                //LcMessaging.SendProviderBooking(itemID);
            }
            catch (ConstraintException delEx)
            {
                // The item cannot be inserted/updated:
                throw new HttpException(400, delEx.Message);
            }
            
            // Return ID
            return itemID;
        }
    }
}
@{
    Response.RestRequiresUser(LcData.UserInfo.UserType.User);
    new RestMeClientBooking().JsonResponse(this);
}
