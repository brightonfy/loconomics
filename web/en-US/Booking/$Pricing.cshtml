@{
    LcHelpers.SecurePage();
    
    var customer = PageData["customerrow"] ?? (PageData["customerrow"] = LcData.UserInfo.GetUserRow());
    var provider = PageData["providerrow"] ?? (PageData["providerrow"] = LcData.UserInfo.GetUserRow(Request["providerid"].AsInt()));
    var position = PageData["positionrow"] ?? (PageData["positionrow"] = LcData.UserInfo.GetUserPos(
        Request["providerid"].AsInt(),
        Request["positionid"].AsInt()));
    var bookCode = Request["BookCode"] ?? (string)Session["BookCode"];
    
    var data = getData(customer, provider, position, bookCode);
    
    Session["PriceIsEstimated"] = data.PriceIsEstimated;
    
    var summary = new LcPricingModel.PricingSummaryData();
    
    Dictionary<string, LcPricingModel.PricingModelData> modelsData = null;
    
    // Data for the detailed pricing summary
    List<LcPricingModel.PricingSummaryData> includedItems = new List<LcPricingModel.PricingSummaryData>();

    if (IsPost) {
        modelsData = processData(customer, provider, position, data, summary, includedItems);
    }
    
    var hasPricingSummary = data.ContainsSummary && 
        (data.ContainsPackages || data.ContainsAddons);
}
@functions{
    dynamic getData(dynamic c, dynamic p, dynamic pos, string bookCode) {
        
        // General Data
        // TODO: Get Customer Type Id
        var clienttypeid = 1;
        
        // Multi-pricing:
        var pricingTypes = LcData.GetPositionPricingTypes(pos.PositionID, clienttypeid);

        // Define that price selected and payed is estimated or not
        // TODO: look for another way to set this, because cannot be set by
        // pricingtype, it depends on selected package
        bool priceIsEstimated = false;
        
        // Booking type with fees policy
        // TODO Remove need for feeData saving bookingtypeid in feerate for set.
        var feeData = LcData.Booking.GetFeeFor(c.UserID, p.UserID, -1, pos.PositionID, bookCode);
        var feesSet = LcPricingModel.GetFeesSetFor(c.UserID, p.UserID, -1, pos.PositionID, bookCode);
        
        // Collection of Summary numbers per group that will be a detail line of the result
        var SummaryLines = new Dictionary<string, LcPricingModel.PricingSummaryData>();

        // Configuring available data/groups depending on Pricing Type:
        bool hasPackages = true,
            hasAddons = true,
            hasSummary = true,
            hasInstructions = true;
        // TODO: There is no configuration of flags depending
        // on pricing type anymore, maybe flags can be reused per
        // other criteria or need refactoring
        
        /*
         * Retrieving data of each group
         */
        dynamic packages = null, 
            addons = null;

        // Packages
        if (hasPackages) {
            packages = LcData.GetPricingPackagesByProviderPosition(pos.UserID, pos.PositionID, -1, -1, false);
            if (packages.Packages.Count > 0) {
                // Add to summary
                SummaryLines.Add("packages", new LcPricingModel.PricingSummaryData("Package"));
            }
        }

        // Add-ons
        if (hasAddons) {
            addons = LcData.GetPricingPackagesByProviderPosition(pos.UserID, pos.PositionID, -1, -1, true);
            if (addons.Packages.Count > 0) {
                // Add to summary
                SummaryLines.Add("addons", new LcPricingModel.PricingSummaryData("Add-on services"));
            }
        }
        
        // Return struct with all data and availability information (Contains* properties)
        return new {
            ContainsPackages = hasPackages && packages.Packages.Count > 0,
            Packages = packages,
            ContainsAddons = hasAddons && addons.Packages.Count > 0,
            Addons = addons,
            ContainsSummary = hasSummary,
            ContainsInstructions = hasInstructions,
            PriceIsEstimated = priceIsEstimated,
            FeesSet = feesSet,
            BookingTypeID = feeData.BookingTypeID,
            PricingTypes = pricingTypes,
            ClientTypeID = clienttypeid,
            SummaryLines = SummaryLines
        };
    }
    
    Dictionary<string, LcPricingModel.PricingModelData> processData(dynamic c, dynamic p, dynamic pos, dynamic data, LcPricingModel.PricingSummaryData summary, List<LcPricingModel.PricingSummaryData> includedItems) {

        var rtn = new Dictionary<string, LcPricingModel.PricingModelData>();
        
        var mustSave = UrlData[0].ToLower() != "calculate";
        
        // Calculate & Save
        LcPricingModel.PricingModelData mdPackages = null, mdAddons = null;

        try {
                
            /* Calculate summary
             */
            if (data.ContainsPackages) {
                mdPackages = LcPricingModel.CalculatePackages(c.UserID, data.Packages, data.FeesSet, ModelState, includedItems);
                //rtn.Add("packages", mdPackages);
                data.SummaryLines["packages"].Add(mdPackages.SummaryTotal);
            }
            if (data.ContainsAddons) {
                mdAddons = LcPricingModel.CalculateAddons(c.UserID, data.Addons, data.FeesSet, ModelState, includedItems);
                //rtn.Add("addons", mdAddons);
                data.SummaryLines["addons"].Add(mdAddons.SummaryTotal);
            }
            
            // Calculate summary totals:
            foreach(var line in data.SummaryLines) {
                summary.Add(line.Value);
            }
            // and calculate summary payment-processing fees
			// As decided on 2013/06/02 on Barcelona, we apply the payment-processing-fee on
			// the Provider price (wihout our fees) instead of the total price (thats the price
			// sent through Braintree), thats: the SubtotalPrice, not TotalPrice.
            // We get the provider fees basing on the total base price:
            // TODO Consider bookingtypeid to don't charge the flat on book-me button (right now both standard and flat has the same pfee, but for future)
            var pfee = LcPricingModel.GetFeeByPackagePrice(data.FeesSet, summary.SubtotalPrice, LcData.UserInfo.UserType.Provider);
            // On this case, provider fees are calculated with 2 decimals of precission like the
            // payment processing system does:
            summary.PFeePrice = (new LcPricingModel.Price(summary.SubtotalPrice, pfee, 2)).FeePrice;

            /* Save all data?
                */
            if (mustSave && ModelState.IsValid) {
                // Create Pricing Estimate with calculated summary
                // We ever create a new estimate with revision 1 here
                int estimateID = 0, revisionID = 1;
                var estimate = LcData.Booking.CreatePricingEstimate(
                    estimateID,
                    revisionID,
                    summary.ServiceDuration,
                    summary.FirstSessionDuration,
                    summary.SubtotalPrice,
                    summary.FeePrice,
                    summary.TotalPrice,
                    summary.PFeePrice);
                // IDs created:
                estimateID = estimate.PricingEstimateID;
                revisionID = estimate.PricingEstimateRevision;

                /* Save every detail
                    */
                if (data.ContainsPackages) {
                    LcPricingModel.SavePackages(estimateID, revisionID, mdPackages, ModelState);
                }
                if (data.ContainsAddons) {
                    LcPricingModel.SaveAddons(estimateID, revisionID, mdAddons, ModelState);
                }

                /*
                * Create Booking Request
                */
                int cancellationPolicyID = LcData.Booking.GetProviderCancellationPolicyID(p.UserID, pos.PositionID);
                var bookingRequestID = LcData.Booking.CreateRequest(
                    c.UserID,
                    p.UserID,
                    pos.PositionID,
                    data.BookingTypeID,
                    estimateID,
                    cancellationPolicyID,
                    data.ContainsSummary ? Request["booking-services-special-instructions"] : null
                );
            }
        } catch (Exception ex) {
            LcHelpers.ReturnJsonError(-1, ex.Message);
        }
        
        // Return data out of try-catch block to don't break the Thread
        if (mustSave && ModelState.IsValid) {
            // All fine, continue wizard next step:
            LcHelpers.ReturnJsonResult(101, null);
        }
        
        return rtn;
    }
    
    LcPricingModel.PricingModelData GetModelDataForView(string viewName, Dictionary<string, LcPricingModel.PricingModelData> modelsData) {
        if (modelsData != null && modelsData.ContainsKey(viewName)) {
            return modelsData[viewName];
        } else {
            return null;
        }
    }
}

<h2>Select services</h2>

<form id="booking-services" action="@(LcUrl.LangPath)Booking/$Pricing/" method="post" class="services package-pricing calculate-summary">
    <input type="hidden" name="providerid" value="@provider.UserID"/>
    <input type="hidden" name="positionid" value="@position.PositionID"/>
    <fieldset class="pricing-wizard ajax ajax-box step-blocks" data-ajax-fieldset-action="@(LcUrl.LangPath)Booking/$Pricing/Calculate/?providerid=@(provider.UserID)&amp;positionid=@(position.PositionID)">
        @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
        
        @if (data.ContainsPackages)
        {
            <fieldset>
                <legend>Select the service you'd like @provider.FirstName to perform</legend>
                @LcPricingView.Packages(customer.UserID, data.Packages, data.FeesSet)
            </fieldset>
        }
        
        @if (data.ContainsAddons)
        {
            <fieldset>
                <legend>Select any additional services you'd like performed</legend>
                @LcPricingView.Addons(customer.UserID, data.Addons, data.FeesSet)
            </fieldset>
        }
        
        @if (data.ContainsInstructions)
        {
            <fieldset class="special-instructions">
                <legend>Any details that might help @provider.FirstName perform the service better?</legend>
                <textarea rows="7" name="booking-services-special-instructions">@Request["booking-services-special-instructions"]</textarea>
            </fieldset>
        }

        @if (!hasPricingSummary)
        {
            <div class="no-pricing-wizard">
                Currently we're unable to provide a pricing estimate for this provider. Please proceed to book a free estimate with the provider to determine a fair price together.
            </div>
        }
        else
        {
            <fieldset>
                <legend>Pricing summary</legend>
                @*LcPricingView.CustomerPricingSummaryGrouped(summary, data.SummaryLines, true)*@
                @LcPricingView.CustomerPricingSummaryDetailed(summary, includedItems, true)
            </fieldset>
        }

    </fieldset>
    <fieldset class="actions">
        <button data-wizard-next-step="#schedule" class="schedule-service-button next main-action">Save & continue</button>
    </fieldset>
    @if (IsPost)
    {
        <script type="text/javascript">
            lcSetupCalculateTableItemsTotals();
            LC.setupCalculateSummary(true);
            LC.initCustomerPackageSliders();
            LC.setupUpdateDetailedPricingSummary();
        </script>
    }
</form>
