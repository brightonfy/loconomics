@{
    var booking = PageData["BookingData"];
    var itsUserData = PageData["ItsUserData"];
    var myUserData = PageData["MyUserData"];
    var myUserType = PageData["MyUserType"];
    DateTime confirmationLimitDate = PageData["ConfirmationLimitDate"];
    bool showGreetings = PageData["ShowGreetings"];
    
    var forEmail = PageData["ForEmail"] ?? false;
    
    // TODO Know if is a multiappointment booking (or pass by parameter)
    var isMultiappointment = false;
}
@helper printConfirmedDate(dynamic booking){
    <span>@getConfirmedDate(booking)</span>
}
@functions {
    string getConfirmedDate(dynamic booking) {
        try{
            if (booking.ConfirmedDateStart is DateTime && booking.ConfirmedDateEnd is DateTime)
            {
                return LcHelpers.DateTimeRangeToString(booking.ConfirmedDateStart, booking.ConfirmedDateEnd);
            }
        } catch {
        }
        // Null values, or object has not the information:
        return "Date not available";
    }
    
    string getCustomerMessage(dynamic booking, dynamic itsUserData, DateTime confirmationLimitDate) {
        var msg = "";
        const string msgCustomerCanceled = @"
            Your booking request for {1} was cancelled.
            <em><strong>Your credit card has not been charged</strong></em> and the authorization should
            expire shortly. We'd love for you to 
            <a target='_blank' href='{4}?s={2}'>search for another {2}</a>
        ";

        switch ((int)booking.BookingRequestStatusID)
        {
            // Request complete, waiting for provider response
            case 2:
                msg = @"You're probably wondering what happens next.
                    {1} has until 
                    <em><strong>{3:D}, {3:t}</strong></em>
                    to confirm one of your appointment times.
                    We'll then follow up with his contact information.";
                break;
            // Request accepted, is a confirmed booking
            case 7:
                switch ((int)booking.BookingStatusID)
                {
                    // Its a confirmed booking, but still not performed (waiting for, or in dispute)
                    case 1:
                    case 5:
                        msg = @"You're all set for {1}'s <em><strong>{2}</strong></em>
                                services to be performed on <em><strong>{1}</strong></em>.
                                Please review the booking details below for full location details
                                and {1}'s contact information.";
                        break;
                    // Performed and/or payed
                    case 2:
                    case 3:
                    case 4:
                        msg = @"Our records indicate that you had <strong>{2}</strong> services with {1}
                                on <em><strong>{0:d}</strong></em>. Please review working with {1}.";
                        break;
                    // Cancelled by customer
                    case 6:
                        msg = msgCustomerCanceled;
                        break;
                }
                break;
            // Request denied/declined by the provider
            case 5:
                msg = @"We're very sorry, but {1} is unable to accept your booking request for these times.
                        <em><strong>Your credit card has not been charged</strong></em> and the authorization should
                        expire shortly. We do our best to keep providers calendars up-to-date, but these things
                        happen from time to time. Please accept our apologies. We'd love for you to
                        <a target='_blank' href='{4}?s={2}'>search for another {2}</a>.
                    ";
                break;
            // Request expired (no provider answer)
            case 6:
                msg = @"We're very sorry, but {1} did not respond to your request within the alloted time.
                        <em><strong>Your credit card has not been charged</strong></em> and the authorization should
                        expire shortly. We do our best to keep providers responsive, but these things happen from
                        time to time. Please accept our apologies. We'd love for you to 
                        <a target='_blank' href='{4}?s={2}'>search for another {2}</a>";
                break;
            // Any other case: incomplete request or cancelled:
            default:
                msg = msgCustomerCanceled;
                break;
        }
        return String.Format(msg,
            getConfirmedDate(booking),
            (itsUserData == null ? "your provider" : itsUserData.FirstName),
            booking.PositionSingular,
            confirmationLimitDate,
            LcUrl.LangPath
        );
    }
    
    string getProviderMessage(dynamic booking, dynamic itsUserData, DateTime confirmationLimitDate) {
        var msg = "";
        const string msgProviderCanceled = @"
            We're very sorry, but {1} canceled this booking.
        ";

        switch ((int)booking.BookingRequestStatusID)
        {
            // Request complete, waiting for provider response
            case 2:
                msg = @"{1} has booked your <strong>{2}</strong> services! {1}'s chosen the following times
                   for you to meet up for an appointment. In order to accept the booking, choose one of these
                    time slots before
                    <em><strong>{3:D}, {3:t}</strong></em>
                    to confirm one of your appointment times.
                    We'll then follow up with his contact information.";
                break;
            // Request accepted, is a confirmed booking
            case 7:
                switch ((int)booking.BookingStatusID)
                {
                    // Its a confirmed booking, but still not performed (waiting for, or in dispute)
                    case 1:
                    case 5:
                        msg = @"You're all set to perform <em><strong>{2}</strong></em>
                                services for {1} on <em><strong>{1}</strong></em>.";
                        break;
                    // Performed and/or payed
                    case 2:
                    case 3:
                    case 4:
                        msg = @"Our records indicate that you have completed <strong>{2}</strong> services with {1}
                                on <em><strong>{0:d}</strong></em>. Please review working with {1}.";
                        break;
                    // Cancelled by customer
                    case 6:
                        msg = msgProviderCanceled;
                        break;
                }
                break;
            // Request denied/declined by the provider
            case 5:
                msg = @"You've successfully declined {1}'s booking request. As you know we want to keep the community
                        strong and reliable so please let us know any feedback on how we could have prevented this
                        from happening.
                        Also, feel free to send {1} a message explaining why.
                    ";
                break;
            // Request expired (no provider answer)
            case 6:
                msg = @"You haven't replied to the booking request from {1} requesting your <strong>{2}</strong>
                        services within the alloted {4} hours, and as a result it has now expired.
                        We know life is busy, but we need our community members to be responsive to ensure
                        the best possible experience for everybody. {1} has also been informed.
                        Also, feel free to send {1} a message explaining why.";
                break;
            // Any other case: incomplete request or cancelled:
            default:
                msg = msgProviderCanceled;
                break;
        }
        return String.Format(msg,
            getConfirmedDate(booking),
            (itsUserData == null ? "your customer" : itsUserData.FirstName),
            booking.PositionSingular,
            confirmationLimitDate,
            LcData.Booking.ConfirmationLimitInHours
        );
    }
}
<div class="w-BookingDetails-statusIntro">
    @if (showGreetings)
    {
        <p class="greeting">Hello @myUserData.FirstName,</p>
    }
    @if (myUserType == LcData.UserInfo.UserType.Customer)
    {
        <p>
            @Html.Raw(getCustomerMessage(booking, itsUserData, confirmationLimitDate))
        </p>

        if (isMultiappointment)
        {
            <p>
                You've purchased a service with <em><strong>multiple appointments.</strong></em>
                When you and @itsUserData.FirstName agree on follow-up appointments, he will let us know so
                we can release payment for each. We'll check in after every appointment to ensure everything
                is going as planned. You'll review his services after all appointments have been completed.
            </p>
        }
    }
    else if (myUserType == LcData.UserInfo.UserType.Provider)
    {
        <p>
            @Html.Raw(getProviderMessage(booking, itsUserData, confirmationLimitDate))
        </p>

        if (isMultiappointment)
        {
            <p>
                @itsUserData.FirstName purchased a service with <em><strong>multiple appointments.</strong></em>
                When you and @itsUserData.FirstName agree on follow-up appointments, <em><strong>you must let us know</strong></em>
                (you'll have an option to do so after the first appointment) so
                we can release payment for each. We'll check in after every appointment to ensure everything
                is going as planned. You'll review his services after all appointments have been completed.
            </p>
        }
    }
    @if (showGreetings)
    {
        <p class="goodbye">
            At your service,<br />
            The Loconomics Team
        </p>
    }
</div>