@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    LcHelpers.SecurePage();
    
    // var u = LcData.UserInfo.GetUserRow();
    int userID = WebSecurity.CurrentUserId;
    
    // possible values: "all", "failed-requests"
    string view = PageData["view"] ?? Request["view"] ?? "all";
    
    var sqlSelectBookingRequest = @"
        SELECT  R.BookingRequestID,
                0 As BookingID,
                R.ProviderUserID,
                R.CustomerUserID,
                R.PricingEstimateID,
                R.BookingRequestStatusID,
                0 As BookingStatusID,

                UC.FirstName As CustomerFirstName,
                UC.LastName As CustomerLastName,

                UP.FirstName As ProviderFirstName,
                UP.LastName As ProviderLastName,

                E.StartTime,
                E.EndTime,
                E.TimeZone,
                Pos.PositionSingular,
                Pr.TotalPrice
        FROM    BookingRequest As R
                 INNER JOIN
                PricingEstimate As Pr
                  ON Pr.PricingEstimateID = R.PricingEstimateID
                 INNER JOIN
                Users As UC
                  ON UC.UserID = R.CustomerUserID
                 INNER JOIN
                Users As UP
                  ON UP.UserID = R.ProviderUserID
                 LEFT JOIN
                CalendarEvents As E
                  ON E.Id = R.PreferredDateID
                 INNER JOIN
                Positions As Pos
                  ON Pos.PositionID = R.PositionID
					AND Pos.LanguageID = @1 AND Pos.CountryID = @2
    ";
    var sqlWherePendingBookingRequest = @"
        WHERE   
                (R.CustomerUserID=@0
                  OR
                  R.ProviderUserID=@0)
                 AND
                -- Only Confirmed by customer and denied with alternatives requests
                R.BookingRequestStatusID IN (2, 8)
    ";
    var sqlWhereFailedBookingRequest = @"
        WHERE
                (R.CustomerUserID=@0
                  OR
                 (
                  R.ProviderUserID=@0
                   AND
                  -- Not list incomplete requests to providers
                  R.BookingRequestStatusID NOT IN (1, 3)
                 )
                )
                 AND
                -- Incomplete (only customers), declined or expired requests
                R.BookingRequestStatusID IN (1, 3, 4, 5, 6)
    ";
    var sqlOrderBookingRequest = @"
        ORDER BY E.StartTime, R.UpdatedDate
    ";
    var sqlGetPendingBookingRequest = sqlSelectBookingRequest + sqlWherePendingBookingRequest + sqlOrderBookingRequest;
    var sqlGetFailedBookingRequest = sqlSelectBookingRequest + sqlWhereFailedBookingRequest + sqlOrderBookingRequest;
    var sqlGetBookingsByDateRange = @"
        SELECT  R.BookingRequestID,
                B.BookingID,
                R.ProviderUserID,
                R.CustomerUserID,
                R.PricingEstimateID,
                R.BookingRequestStatusID,
                B.BookingStatusID,

                UC.FirstName As CustomerFirstName,
                UC.LastName As CustomerLastName,

                UP.FirstName As ProviderFirstName,
                UP.LastName As ProviderLastName,

                E.StartTime,
                E.EndTime,
                E.TimeZone,
                Pos.PositionSingular,
                Pr.TotalPrice
        FROM    Booking As B
                 INNER JOIN
                BookingRequest As R
                  ON B.BookingRequestID = R.BookingRequestID
                 INNER JOIN
                PricingEstimate As Pr
                  ON Pr.PricingEstimateID = R.PricingEstimateID
                 INNER JOIN
                Users As UC
                  ON UC.UserID = R.CustomerUserID
                 INNER JOIN
                Users As UP
                  ON UP.UserID = R.ProviderUserID
                 LEFT JOIN
                CalendarEvents As E
                  ON E.Id = B.ConfirmedDateID
                 INNER JOIN
                Positions As Pos
                  ON Pos.PositionID = R.PositionID
					AND Pos.LanguageID = @3 AND Pos.CountryID = @4
        WHERE   (
                 R.CustomerUserID=@0
                  OR
                 R.ProviderUserID=@0
                )
                 AND
                (   @1 is null AND E.StartTime is null
                    OR
                    Convert(date, E.StartTime) >= @1
                     AND
                    Convert(date, E.StartTime) <= @2
                )
        ORDER BY E.StartTime DESC, B.UpdatedDate DESC, R.UpdatedDate DESC
    ";
    dynamic pendingBookingRequests = null, todayBookings = null, tomorrowBookings = null, thisweekBookings = null, 
        upcomingBookings = null, pastBookings = null, failedRequests = null;
    using (var db = Database.Open("sqlloco")) {
        switch (view) {
            case "all":
                pendingBookingRequests = db.Query(sqlGetPendingBookingRequest, userID, 1, 1);
                
                // Preparing dates for further filtering
                var today = DateTime.Today;
                var tomorrow = today.AddDays(1);
                // This week must not include today and tomorrow, to avoid duplicated entries
                var thisweekFirstDay = today.AddDays(2); // 0 - today.DayOfWeek
                var thisweekLastDay = thisweekFirstDay.AddDays(6);
                var upcomingFirstDay = tomorrow.AddDays(1);
                var upcomingLastDay = System.Data.SqlTypes.SqlDateTime.MaxValue; // DateTime.MaxValue;
                var pastFirstDay = System.Data.SqlTypes.SqlDateTime.MinValue; // DateTime.MinValue (this is not valid at SQLServer!)
                var pastLastDay = thisweekFirstDay.AddDays(-1);

                todayBookings = db.Query(sqlGetBookingsByDateRange, userID, today, today, 1, 1);
                tomorrowBookings = db.Query(sqlGetBookingsByDateRange, userID, tomorrow, tomorrow, 1, 1);
                thisweekBookings = db.Query(sqlGetBookingsByDateRange, userID, thisweekFirstDay, thisweekLastDay, 1, 1);
                upcomingBookings = db.Query(sqlGetBookingsByDateRange, userID, upcomingFirstDay, upcomingLastDay, 1, 1);
                pastBookings = db.Query(sqlGetBookingsByDateRange, userID, pastFirstDay, pastLastDay, 1, 1);
                break;
            case "failed-requests":
                failedRequests = db.Query(sqlGetFailedBookingRequest, userID, 1, 1);
                break;
        }
    }
    
    /* Some static strings */
    string strNewBookingRequestSingular = "new booking request";
    string strNewBookingRequestPlural = "new booking requests";
    string strBookingRequestSingular = "booking request";
    string strBookingRequestPlural = "booking requests";
    string strBookingSingular = "booking";
    string strBookingPlural = "bookings";
}
@helper printDateTimeRange(DateTime? start, DateTime? end){
    if (start.HasValue && end.HasValue) {
        @start.Value.ToLongDateString()
        <text>, </text>
        @start.Value.ToShortTimeString()
        <text> to </text>
        @end.Value.ToShortTimeString()
    } else {
        <span class="no-dates">Date not available</span>
    }
}
@* Print a Booking or BookingRequest *@
@helper printItem(dynamic item) {
    
    // Checking item: user type of the other user, not current user
    string itsUserType = "provider";
    string itsUserPrefix = "Provider";
    //string myUserType = "customer";
    //string myUserPrefix = "Customer";
    if (WebSecurity.CurrentUserId == item.ProviderUserID) {
        itsUserType = "customer";
        itsUserPrefix = "Customer";
    } // we don't check 'else' nelse 'else if (item.CustoerUserID..) because are just the default values
    
  <li>
    @RenderPage(LcUrl.RenderLangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
        {"Data", item},
        {"DataPrefix", itsUserPrefix},
        {"Size", "mini"},
        {"UserType", itsUserType}
    })
    <ul class="item-summary">
        <li>
            <h5>Time:</h5> @*Monday, April 15th, 2012, 11:00am to 2:00pm*@
                @printDateTimeRange(item.StartTime, item.EndTime)
        </li>
        <li>
            <h5>Position:</h5> @item.PositionSingular
        </li>
        <li>
            <h5>Details:</h5> @(LcData.Booking.GetOneLineBookingRequestPackages(item.BookingRequestID, item.PricingEstimateID))
        </li>
    </ul>
    <div class="actions">
        @{
            string buttonAction = "view", buttonLabel = "View";
            if ((int)item.BookingStatusID > 0) {
                switch ((int)item.BookingStatusID){
                    case 1:
                        buttonAction = "confirmed";
                        buttonLabel = "Confirmed";
                        break;
                    case 2:
                    case 3:
                        buttonAction = "service-performed";
                        buttonLabel = "Done";
                        break;
                    case 4:
                        buttonAction = "completed";
                        buttonLabel = "Completed";
                        break;
                    case 5:
                        buttonAction = "dispute";
                        buttonLabel = "Dispute";
                        break;
                }
            } else {
                switch ((int)item.BookingRequestStatusID){
                    case 1:
                    case 3:
                        buttonAction = "incomplete";
                        buttonLabel = "Incomplete";
                        break;
                    case 2:
                        if (itsUserType == "customer") {
                            buttonAction = "respond";
                            buttonLabel = "Respond";
                        } else {
                            buttonAction = "waiting-respond";
                            buttonLabel = "Waiting";
                        }
                        break;
                    case 4:
                        buttonAction = "cancelled";
                        buttonLabel = "Cancelled";
                        break;
                    case 5:
                    case 8:
                        buttonAction = "declined";
                        buttonLabel = "Declined";
                        break;
                    case 6:
                        buttonAction = "expired";
                        buttonLabel = "Expired";
                        break;
                    case 7:
                        buttonAction = "accepted";
                        buttonLabel = "Accepted";
                        break;
                }
            }
        }
        <button class="item-action @buttonAction" data-booking-id="@item.BookingID" data-booking-request-id="@item.BookingRequestID">@buttonLabel</button>
        <div class="total-price item-extra-info">$@item.TotalPrice</div>
    </div>
  </li>
}

<ul class="booking-list-groups items-groups-list">

    @if (view == "all")
    {
        if (pendingBookingRequests.Count > 0)
        {
        <li>
            <h3>Need response: 
                <span class="items-count bookings-number">@pendingBookingRequests.Count @(pendingBookingRequests.Count == 1 ? strNewBookingRequestSingular : strNewBookingRequestPlural)</span>
            </h3>
            <ul class="bookings-list items-list pending-booking-requests">
                @foreach (var item in pendingBookingRequests)
                {
                    @printItem(item)
                }
            </ul>
        </li>
        }

        if (todayBookings.Count > 0)
        {
        <li>
            <h3>Today: 
                <span class="items-count bookings-number">@todayBookings.Count @(todayBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
            </h3>
            <ul class="bookings-list items-list today-bookings">
                @foreach (var item in todayBookings)
                {
                    @printItem(item)
                }
            </ul>
        </li>
        }

        if (tomorrowBookings.Count > 0)
        {
        <li>
            <h3>Tomorrow: 
                <span class="items-count bookings-number">@tomorrowBookings.Count @(tomorrowBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
            </h3>
            <ul class="bookings-list items-list tomorrow-bookings">
                @foreach (var item in tomorrowBookings)
                {
                    @printItem(item)
                }
            </ul>
        </li>
        }

        if (thisweekBookings.Count > 0)
        {
        <li>
            <h3>This week: 
                <span class="items-count bookings-number">@thisweekBookings.Count @(thisweekBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
            </h3>
            <ul class="bookings-list items-list this-week-bookings">
                @foreach (var item in thisweekBookings)
                {
                    @printItem(item)
                }
            </ul>
        </li>
        }

        if (upcomingBookings.Count > 0)
        {
        <li>
            <h3>Upcoming: 
                <span class="items-count bookings-number">@upcomingBookings.Count @(upcomingBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
            </h3>
            <ul class="bookings-list items-list upcoming-bookings">
                @foreach (var item in upcomingBookings)
                {
                    @printItem(item)
                }
            </ul>
        </li>
        }

        if (pastBookings.Count > 0)
        {
        <li>
            <h3>Past: 
                <span class="items-count bookings-number">@pastBookings.Count @(pastBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
            </h3>
            <ul class="bookings-list items-list past-bookings">
                @foreach (var item in pastBookings)
                {
                    @printItem(item)
                }
            </ul>
        </li>
        }
    }
    else if (view == "failed-requests")
    {
        if (failedRequests.Count > 0)
        {
        <li>
            <h3>Expired:
                <span class="items-count bookings-number">@failedRequests.Count @(failedRequests.Count == 1 ? strBookingRequestSingular : strBookingRequestPlural)</span>
            </h3>
            <ul class="bookings-list items-list failed-booking-requests">
                @foreach (var item in failedRequests)
                {
                    @printItem(item)
                }
            </ul>
        </li>
        }
    }
</ul>