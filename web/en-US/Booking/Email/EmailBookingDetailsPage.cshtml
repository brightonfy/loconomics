@* Email with updated information about a Booking Request, mainly to communicate to the
    provider that a request was done (BookingRequestStatusID:2, but also generate content for other statuses)
 *@
@using WebMatrix.Data;
@{
    LcMessaging.SecureTemplate();
    
    Layout = LcUrl.RenderLangPath + "_EmailLayout.cshtml";

    // Page variables    
    var info = LcEmailTemplateHelper.GetBookingInfo();
    LcData.Address address = null;
    var title = "";
    DateTime? bookingDate = null;
    dynamic pricingSummary = null, pricingSummaryDetails = null;
    
    // Setting up data
    {
        if (info.Booking != null) {
            
            address = new LcData.Address(info.Booking);
            address.Name = info.Booking.LocationName;
            
            // Some labels
            // Fixed title right now, instead of the one depending on state and users
            title = "Booking Summary";
            /*title = isRequest
                ? LcData.Booking.GetBookingRequestTitleFor(booking.BookingRequestStatusID, itsUserData, itsUserType)
                : LcData.Booking.GetBookingTitleFor(booking.BookingStatusID, itsUserData, itsUserType);
            */

            // Expected booking date, for use on several languages
            bookingDate = info.IsRequest
                ? info.Booking.PreferredDateStart
                : info.Booking.ConfirmedDateStart;
            if (info.IsRequest)
            {
                if (info.Booking.AlternativeDate1Start is DateTime &&
                    info.Booking.AlternativeDate1Start < bookingDate)
                {
                    bookingDate = info.Booking.AlternativeDate1Start;
                }
                if (info.Booking.AlternativeDate2Start is DateTime &&
                    info.Booking.AlternativeDate2Start < bookingDate)
                {
                    bookingDate = info.Booking.AlternativeDate2Start;
                }
            }
            
            // Pricing summary data
            pricingSummary = LcData.Booking.GetPricingSummary(info.Booking);
            pricingSummaryDetails = LcData.Booking.GetPricingSummaryDetails(info.Booking.PricingEstimateID, info.Booking.PricingEstimateRevision);
        }
    }
    
    // Data for the EmailLayout:
    PageData["ViewOnSiteURL"] = info.ViewOnSiteURL;
    PageData["messageTitle"] = LcData.Booking.GetBookingRequestTitleFor(info.Booking.BookingRequestStatusID, info.PairUser, info.SentTo);
    PageData["messageSubtitle"] = LcEmailTemplateHelper.GetLastUpdateText(info.Booking.UpdatedDate);
    PageData["showSign"] = false; // We have the sign already on this page, upper than normal
    PageData["helpReference"] = "Booking Request #" + info.BookingRequestID.ToString();
    PageData["autologinQuery"] = "";
    switch (info.SentTo) {
        case LcData.UserInfo.UserType.Provider:
            PageData["needHelpAddress"] = "providersupport@loconomics.com";
            PageData["autologinQuery"] = LcAuth.GetAutologinUrlParams(info.SentToUserID);
            break;
        case LcData.UserInfo.UserType.Customer:
            PageData["needHelpAddress"] = "support@loconomics.com";
            break;
    }
}
<div>
    <p @LcEmailTemplateHelper.StyleResetP()>
        Hello @(info.SentToUser.FirstName),
    </p>
    <div>
        @RenderPage("../$BookingStatusIntro.cshtml", new
        {
            BookingData = info.Booking,
            MyUserType = info.SentTo,
            MyUserData = info.SentToUser,
            ItsUserData = info.PairUser,
            ConfirmationLimitDate = info.ConfirmationLimitDate,
            ShowGreetings = false,
            ForEmail = true
        })
    </div>
    <div>
        @RenderPage("$EmailBookingActions.cshtml", new
        {
            Info = info
        })
    </div>

    <p style="margin-top:1.5em">
	At your service.
    <br /><br />
	The Loconomics team
    </p>

    <h2 @LcEmailTemplateHelper.StyleH2("margin-top:40px")>@title</h2>

    <div>

        @if (info.IsRequest)
        {
            <h4 @LcEmailTemplateHelper.StyleH4()>Time preferences</h4>
            @RenderPage("$EmailBookingRequestedTimes.cshtml", new
            {
                BookingData = info.Booking,
                MyUserType = info.SentTo
            })
        }

        @{
            var paymentInfoText = LcData.Booking.GetBookingPaymentInformation(info.Booking, info.SentTo, info.PairUser);
            if (!String.IsNullOrEmpty(paymentInfoText))
            {
                <h4 @LcEmailTemplateHelper.StyleH4()>Payment</h4>
                <div>
                    @Html.Raw(paymentInfoText)
                </div>
            }
        }

        <h4 @LcEmailTemplateHelper.StyleH4()>@(info.SentTo == LcData.UserInfo.UserType.Provider ? "Payment" : "Pricing") Summary</h4>
        @if (info.SentTo == LcData.UserInfo.UserType.Provider)
        {
            @LcPricingView.EmailProviderPricingSummaryDetailed(pricingSummary, pricingSummaryDetails)
        }
        else if (info.SentTo == LcData.UserInfo.UserType.Customer)
        {
            @LcPricingView.EmailCustomerPricingSummaryDetailed(pricingSummary, pricingSummaryDetails)
        }

        <h4 @LcEmailTemplateHelper.StyleH4()>Services Requested</h4>
        <div class="w-BookingDetails-packages">
            @RenderPage("../$BookingPricingPackages.cshtml", new
               {
                   BookingData = info.Booking
               })
        </div>

        @if (!String.IsNullOrWhiteSpace(info.Booking.SpecialRequests)) {
            var label = "";
            switch (info.SentTo)
            {
                case LcData.UserInfo.UserType.Provider:
                    label = "Notes from";
                    break;
                case LcData.UserInfo.UserType.Customer:
                    label = "Notes for";
                    break;
            }
            <h4 @LcEmailTemplateHelper.StyleH4()>@label @info.PairUser.FirstName</h4>
            <p @LcEmailTemplateHelper.StyleResetP()>@info.Booking.SpecialRequests</p>
        }
        
        @if (!info.IsRequest)
        {
            <h4 @LcEmailTemplateHelper.StyleH4()>@(info.PairUser.FirstName)'s Contact Information</h4>
            @LcHelpers.PrintContactInfo(info.PairUser)
        }
        
        @*
        @RenderPage(LcUrl.RenderLangPath + "Email/$EmailUserInfoWidget.cshtml", new Dictionary<string, object>{ 
            {"AddContainerStyle", LcEmailTemplateHelper.StyleMessageSection()},        
            {"Data", info.PairUser},
            {"DataPrefix", ""},
            {"Size", "medium"},
            {"UserType", info.PairUserType.ToString().ToLower()}
        })
        *@

        <h4 @LcEmailTemplateHelper.StyleH4()>Location</h4>
        @RenderPage("../$BookingLocation.cshtml", new {
            BookingData = info.Booking,
            Address = address,
            IsRequest = info.IsRequest,
            MyUserData = info.SentToUser,
            MyUserType = info.SentTo,
            ItsUserData = info.PairUser,
            ForEmail = true
        })

        <h4 @LcEmailTemplateHelper.StyleH4()>@(info.SentTo == LcData.UserInfo.UserType.Provider ? "My" : info.PairUser.FirstName + "'s") cancellation policy</h4>
        <div class="cancellation-policy">
            @RenderPage("../$CancellationPolicyInfoWidget.cshtml", new
            {
                CancellationPolicyID = info.Booking.CancellationPolicyID,
                DisplayForUserType = info.SentTo.ToString(),
                BookingDate = bookingDate,
                DisplayedCustomerName = LcData.UserInfo.GetUserRow(info.Booking.CustomerUserID).FirstName,
                ForEmail = true
            })
        </div>

        <h4 @LcEmailTemplateHelper.StyleH4()>Reminders</h4>
        @RenderPage("../$BookingRemindersWidget.cshtml", new {
            UserType = info.SentTo,
            ItsFirstName = info.PairUser.FirstName,
            ForEmail = true
        })
    </div>
</div>