@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    LcHelpers.SecurePage();
    
    // Page variables
    var u = LcData.UserInfo.GetUserRow();
    dynamic booking = null;
    bool isRequest = false;
    var prefix = "";
    DateTime confirmationLimitDate = DateTime.MaxValue;
    LcData.Address address = null;
    int itsUserID = 0;
    var itsUserType = LcData.UserInfo.UserType.Customer;
    var myUserType = LcData.UserInfo.UserType.Provider;
    dynamic itsUserData = null;
    dynamic itsPositionData = null;
    var title = "";
    DateTime? bookingDate = null;
    dynamic pricingSummary = null, pricingSummaryDetails = null;
    
    var extraTitleClass = PageData["ExtraTitleClass"];
    var useLinkActions = (bool)(PageData["UseLinkActions"] ?? false);
    var actionsFileName = "$BookingActions.cshtml";
    var reqtimesFileName = "$BookingRequestedTimes.cshtml";
    if (useLinkActions) {    
        actionsFileName = "$BookingLinkActions.cshtml";
        reqtimesFileName = "$BookingLinkRequestedTimes.cshtml";
    }
    
    // Parameter to allow redirect to booking URL when the request is confirmed
    var redirectOnConfirmedRequest = (string)PageData["RedirectOnConfirmedRequest"];
    
    // Setting up data
    {
        var brID = Request["BookingRequestID"] ?? (string)PageData["BookingRequestID"];
        var bID = Request["BookingID"] ?? (string)PageData["BookingID"];
        
        if (!String.IsNullOrEmpty(bID)) {
            // Confirmed Booking
            prefix = "booking-" + bID;
            booking = LcData.Booking.GetBookingForUser(bID.AsInt(), u.UserID, u.IsAdmin);
        } else {
            // Booking Request
            isRequest = true;
            prefix = "booking-request-" + brID;
            
            // If is a confirmed request (has a bookingID) and a redirect was requested:
            if (!String.IsNullOrEmpty(redirectOnConfirmedRequest)) {
                var confirmedBookingID = LcData.Booking.GetBookingIDForBookingRequestID(brID.AsInt());
                if (confirmedBookingID > 0) {
                    Response.Redirect(String.Format(redirectOnConfirmedRequest, confirmedBookingID), true);
                }
            }
            
            booking = LcData.Booking.GetBookingRequestForUser(brID.AsInt(), u.UserID, u.IsAdmin);
            if (booking != null) {
                confirmationLimitDate = booking.UpdatedDate.AddHours(LcData.Booking.ConfirmationLimitInHours);
            }
        }
        
        if (booking != null) {
            
            address = new LcData.Address(booking);
            address.Name = booking.LocationName;
            
            // Provider or customer?
            if (WebSecurity.CurrentUserId == booking.CustomerUserID) {
                itsUserType = LcData.UserInfo.UserType.Provider;
                myUserType = LcData.UserInfo.UserType.Customer;
                itsUserID = booking.ProviderUserID;
                itsPositionData = LcData.UserInfo.GetUserPos(itsUserID, booking.PositionID);
            } else {
                itsUserID = booking.CustomerUserID;
            }
            itsUserData = isRequest
                ? LcData.UserInfo.GetUserRow(itsUserID)
                : LcData.UserInfo.GetUserRowWithContactData(itsUserID);

            // Some labels
            // Fixed title right now, instead of the one depending on state and users
            title = "Booking Summary";
            /*title = isRequest
                ? LcData.Booking.GetBookingRequestTitleFor(booking.BookingRequestStatusID, itsUserData, itsUserType)
                : LcData.Booking.GetBookingTitleFor(booking.BookingStatusID, itsUserData, itsUserType);
            */

            // Expected booking date, for use on several languages
            bookingDate = isRequest
                ? booking.PreferredDateStart
                : booking.ConfirmedDateStart;
            if (isRequest)
            {
                if (booking.AlternativeDate1Start is DateTime &&
                    booking.AlternativeDate1Start < bookingDate)
                {
                    bookingDate = booking.AlternativeDate1Start;
                }
                if (booking.AlternativeDate2Start is DateTime &&
                    booking.AlternativeDate2Start < bookingDate)
                {
                    bookingDate = booking.AlternativeDate2Start;
                }
            }
            
            // Pricing summary data
            pricingSummary = LcData.Booking.GetPricingSummary(booking);
            //pricingSummaryGroups = LcData.Booking.GetPricingSummaryGroups(booking.PricingEstimateID, summary);
            pricingSummaryDetails = LcData.Booking.GetPricingSummaryDetails(booking.PricingEstimateID, booking.PricingEstimateRevision);
        }
    }
}
<div class="w-BookingDetails @(isRequest ? "is-request booking-request" : "booking")">
@if (booking == null)
{
    @(isRequest
        ? "Sorry, we could not find the requested booking."
        : "You have no bookings. Book one today!"
    )
}
else
{
    <div class="w-BookingDetails-header">
        <h3 class="w-BookingDetails-title @extraTitleClass">@title</h3>
        @*<span class="updateddate">last updated: @booking.UpdatedDate.ToLongDateString() at @booking.UpdatedDate.ToLongTimeString()</span>*@

        @RenderPage(actionsFileName, new
   {
       MyUserType = myUserType,
       BookingData = booking,
       IdPrefix = prefix,
       IsRequest = isRequest
   })

        @RenderPage(LcUrl.RenderLangPath + "Profile/$UserInfoWidget.cshtml", new
   {
       Data = itsUserData,
       Size = "mini-position",
       UserType = itsUserType,
       WithContactData = false,
       WithLinkInName = true,
       PositionData = itsPositionData
   })
    </div>
    <div class="w-BookingDetails-content">

        <h4 class="c-SectionTitle">Status</h4>
        @RenderPage("$BookingStatusIntro.cshtml", new
        {
            BookingData = booking,
            MyUserType = myUserType,
            ItsUserData = itsUserData,
            MyUserData = u,
            ConfirmationLimitDate = confirmationLimitDate,
            ShowGreetings = false
        })

        @if (isRequest)
        {
            <h4 class="c-SectionTitle">Time preferences</h4>
            @RenderPage(reqtimesFileName, new
            {
                BookingData = booking,
                MyUserType = myUserType
            })
        }

        @{
            var paymentInfoText = LcData.Booking.GetBookingPaymentInformation(booking, myUserType, itsUserData);
            if (!String.IsNullOrEmpty(paymentInfoText))
            {
                <h4 class="c-SectionTitle">Payment</h4>
                <div class="payment">
                    @Html.Raw(paymentInfoText)
                </div>
            }
        }

        <h4 class="c-SectionTitle">@(myUserType == LcData.UserInfo.UserType.Provider ? "Payment" : "Pricing") Summary</h4>
        @if (booking.BookingRequestStatusID == 4 ||
            booking.BookingID > 0 && booking.BookingStatusID == 6)
        {
            // Is a cancelled booking/request
            if (myUserType == LcData.UserInfo.UserType.Provider)
            {
                @LcPricingView.ProviderCancellationPricingSummary(booking)
            }
            else if (myUserType == LcData.UserInfo.UserType.Customer)
            {
                @LcPricingView.CustomerCancellationPricingSummary(booking)
            }
        }
        else
        {
            if (myUserType == LcData.UserInfo.UserType.Provider)
            {
                @LcPricingView.ProviderPricingSummaryDetailed(pricingSummary, pricingSummaryDetails)
            }
            else if (myUserType == LcData.UserInfo.UserType.Customer)
            {
                @LcPricingView.CustomerPricingSummaryDetailed(pricingSummary, pricingSummaryDetails)
            }
        }

        <h4 class="c-SectionTitle">Services Requested</h4>
        <div class="w-BookingDetails-packages">
            @RenderPage("$BookingPricingPackages.cshtml", new
               {
                   BookingData = booking
               })
        </div>

        @if (!String.IsNullOrWhiteSpace(booking.SpecialRequests)) {
            var label = "";
            switch (myUserType)
            {
                case LcData.UserInfo.UserType.Provider:
                    label = "Notes from";
                    break;
                case LcData.UserInfo.UserType.Customer:
                    label = "Notes for";
                    break;
            }
            <h4 class="c-SectionTitle">@label @itsUserData.FirstName</h4>
            <p class="special-instructions">@booking.SpecialRequests</p>
        }
        
        @if (!isRequest)
        {
            <h4 class="c-SectionTitle">@(itsUserData.FirstName)'s Contact Information</h4>
            @LcHelpers.PrintContactInfo(itsUserData)
        }

        <h4 class="c-SectionTitle">Location</h4>
        @RenderPage("$BookingLocation.cshtml", new {
            BookingData = booking,
            Address = address,
            IsRequest = isRequest,
            MyUserData = u,
            MyUserType = myUserType,
            ItsUserData = itsUserData
        })

        <h4 class="c-SectionTitle">@(myUserType == LcData.UserInfo.UserType.Provider ? "My" : itsUserData.FirstName + "'s") cancellation policy</h4>
        <div class="cancellation-policy">
            @RenderPage("$CancellationPolicyInfoWidget.cshtml", new
            {
                CancellationPolicyID = booking.CancellationPolicyID,
                DisplayForUserType = myUserType.ToString(),
                BookingDate = bookingDate,
                DisplayedCustomerName = LcData.UserInfo.GetUserRow(booking.CustomerUserID).FirstName
            })
        </div>

        <h4 class="c-SectionTitle">Reminders</h4>
        @RenderPage("$BookingRemindersWidget.cshtml", new {
            UserType = myUserType,
            ItsFirstName = itsUserData.FirstName
        })

        <h4 class="c-SectionTitle">Need help?</h4>
        @RenderPage("$NeedHelpFooterWidget.cshtml", new {
            BookingRequestID = booking.BookingRequestID,
            BookingID = isRequest ? null : booking.BookingID
        })
    </div>
}
</div>