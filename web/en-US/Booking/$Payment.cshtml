@using Braintree;
@using System.Configuration;
@using WebMatrix.Data;
@{
    // true to testing, false to live/use braintree
    var TESTING_EMULATEBRAINTREE = false;
    if (LcHelpers.Channel != "live") {
        TESTING_EMULATEBRAINTREE = Request.Params["TESTING_EMULATEBRAINTREE"].AsBool();
    }
    
    var p = PageData["providerrow"] ?? LcData.UserInfo.GetUserRow(Request["providerid"].AsInt());
    var c = PageData["customerrow"] ?? LcData.UserInfo.GetUserRow();
    var pos = PageData["positionrow"] ?? LcData.UserInfo.GetUserPos(Request["providerid"].AsInt(),
        Request["positionid"].AsInt());
    DateTime? dt1Start, dt1End, dt2Start, dt2End, dt3Start, dt3End;
    dt1Start = dt1End = dt2Start = dt2End = dt3Start = dt3End = null;

    bool priceIsEstimated = Session["PriceIsEstimated"] is bool ? (bool)Session["PriceIsEstimated"] : true;
    bool instantBooking = Session["InstantBooking"] is bool ? (bool)Session["InstantBooking"] : false;
    
    // Check if is a valid booking process (session not expired or error at first step)
    var bookingRequestID = Session["BookingRequestID"] is int ? (int)Session["BookingRequestID"] : 0;
    bool validBookingSession = false;
    if (p != null && c != null && pos != null && bookingRequestID > 0) {
        try{
            var brdates = ((Dictionary<int, Dictionary<string, DateTime?>>)Session["BookingRequests"])[bookingRequestID];
            dt1Start = brdates["dt1Start"];
            dt1End = brdates["dt1End"];
            dt2Start = brdates["dt2Start"];
            dt2End = brdates["dt2End"];
            dt3Start = brdates["dt3Start"];
            dt3End = brdates["dt3End"];
            
            validBookingSession = true;
        } catch {}
    }
    if (!validBookingSession) {
        /* Several options to do here
            * - Show error (strange message for user, need restart again introducing first his login)
            * X Silently redirect to start booking again
            * - Request login via ajax, re-send form data, looking in the database for a 'timeouted'
            *   bookingrequest for this customer at this provider and position, recover it to continue
            *   processing the form (if there is no bookingrequestid again, do second option).
            */
        //ModelState.AddFormError("Booking request is not valid, maybe the session time expired");
        LcHelpers.ReturnJsonResult(1, 
            LcUrl.LangPath + "Booking/?ProviderID=" + p.UserID.ToString() +
            "&PositionID=" + pos.PositionID.ToString());
    }
    
    /*
     * Get Booking Request information
     */
    dynamic summary = LcData.Booking.GetBookingRequestForUser(bookingRequestID, c.UserID, c.IsAdmin);

    /*
     * Validation
     */
    Validation.Add("zip", Validator.Integer("Zip postal code must be a valid number"));
    Validation.Add("street-address-line-1", Validator.StringLength(100, 0, "Address Line 1 must be fewer than 100 characters."));
    Validation.Add("street-address-line-2", Validator.StringLength(100, 0, "Address Line 2 must be fewer than 100 characters."));
    Validation.Add("city", Validator.StringLength(100, 0, "City must be fewer than 100 characters."));
    
    if (priceIsEstimated) {
        Validation.RequireField("agree-estimate", "You must agree the pricing estimate");
    }
    Validation.RequireField("agree-cancellation-policy", "You must agree the cancellation policy");
    
    if (IsPost && Validation.IsValid()){
        /*
         * Dependency validations
         */
        bool savePayment = Request["save-payment"].AsBool();
        var creditCardToken = Request["credit-card"];
        var createCard = String.IsNullOrWhiteSpace(creditCardToken) || Request["update-credit-card"].AsBool();
        if (createCard) {
            // Validate fields for credit card creation
            if (Request["name-on-card"].IsEmpty()){
                ModelState.AddError("name-on-card", "'Name as on card' is required");
            }
            if (Request["card-number"].IsEmpty()){
                ModelState.AddError("card-number", "Card number is required");
            }
            if (Request["cvv"].IsEmpty()){
                ModelState.AddError("cvv", "CVV code is required");
            }
            if (Request["card-exp-month"].IsEmpty()){
                ModelState.AddError("card-exp-month", "Card expiration month is required");
            }
            if (Request["card-exp-year"].IsEmpty()){
                ModelState.AddError("card-exp-year", "Card expiration year is required");
            }
        }

        /*
         * User wants to save as 'my location'?
         */
        LcData.Address address = null;
        if (createCard) {
            if (Request["street-address-line-1"].IsEmpty()){
                ModelState.AddError("street-address-line-1", "Street address is required");
            }
            if (Request["city"].IsEmpty()){
                ModelState.AddError("city", "City is required");
            }
            if (!Request["state"].IsInt()){
                ModelState.AddError("state", "State is required");
            }
            if (Request["zip"].IsEmpty()){
                ModelState.AddError("zip", "Zip Postal Code is required");
            }
        }
        
        /* 
         * DB validations and Saving
         */
        using (var db = Database.Open("sqlloco")) {

            if (createCard) {
                // Validate that Zip Postal Code is valid, and get the matching ID to be used later
                var postalCodeID = LcData.GetPostalCodeID(Request["zip"], Request["state"].AsInt());
                if (postalCodeID == 0) {
                    ModelState.AddError("zip", "Zip Postal Code is not valid");
                } else {
                    address = new LcData.Address {
                        AddressLine1 = Request["street-address-line-1"],
                        AddressLine2 = Request["street-address-line-2"],
                        City = Request["city"],
                        StateProvinceID = Request["state"].AsInt(),
                        PostalCode = Request["zip"],
                        PostalCodeID = postalCodeID,
                        CountryID = LcData.GetCurrentCountryID()
                    };
                }
            }

            if (ModelState.IsValid){
                try {
                    /*
                     * Get data from our database about BookingRequest in order to
                     * do further operations -braintree, timezones-
                     */
                    // Get data from the BookingRequest
                    var sqlGetBookingPrice = @"
                        SELECT  TOP 1
                                P.TotalPrice
                                ,P.FeePrice
                        FROM    BookingRequest As B
                                 INNER JOIN
                                PricingEstimate As P
                                  ON P.PricingEstimateID = B.PricingEstimateID
                        WHERE   B.CustomerUserID = @0 AND B.ProviderUserID = @1
                                 AND B.PositionID = @2 AND B.BookingRequestID = @3
                    ";
                    var bookingPrices = db.QuerySingle(sqlGetBookingPrice, c.UserID, p.UserID, pos.PositionID, bookingRequestID);
                    var TotalPrice = bookingPrices.TotalPrice;
                    var LoconomicsFees = bookingPrices.FeePrice;
                    
                   
                    /*
                     * Saving booking data from form and previous lookups.
                     * State will still be '1:created' and not '2:complete' because
                     * payment transaction need be done still, but to ensure avoid
                     * problems with most saving errors, save some data now and let
                     * left specific transaction data and state changes to be updated
                     * after payment is done, minifying
                     * possible errors after payment that can break the booking request:
                     */
                    if (ModelState.IsValid) {
                        
                        SaveDatesToBookingRequest(
                            bookingRequestID,
                            address == null ? 0 : address.PostalCodeID,
                            c, p, pos,
                            dt1Start, dt1End,
                            dt2Start, dt2End,
                            dt3Start, dt3End,
                            db);

                        /*
                         * Save last card number digits encrypted
                         * State is still 1:created
                         */
                        db.Execute(@"
                            UPDATE  BookingRequest
                            SET     
                                    PaymentLastFourCardNumberDigits = @1
                                    ,SendReminder = @2
                                    ,SendPromotional = @3
                            WHERE   BookingRequestID = @0
                        ", bookingRequestID, 
                            LcEncryptor.Encrypt(LcHelpers.GetLastStringChars(Request["card-number"], 4)),
                            Request["send-reminder"].AsBool(),
                            Request["send-promotional"].AsBool());
                    }


                    if (ModelState.IsValid) {
                        /*
                         * Payment transaction
                         */                    
                        var transactionID = "";
                        if (TESTING_EMULATEBRAINTREE) {
                            // TESTING, emulate Braintree generating false transactionID,
                            // avoiding comunicate with them.
                            transactionID = "TEST:" + Guid.NewGuid().ToString();
                        } else {
                        
                            try{
                                // REAL Braintree Code
                                BraintreeGateway gateway = LcPayment.NewBraintreeGateway();
                       
                                /*
                                 * Send customer payment data to Braintree,
                                 * using our UserID as identifier.
                                 */
                        
                                // Find or create Customer on Braintree
                                string customerIdOnBraintree = LcPayment.GetCustomerId(c.UserID);
                                try{
                                    var gc = gateway.Customer.Find(customerIdOnBraintree);
                                } catch (Braintree.Exceptions.NotFoundException ex) {
                                    // Customer doens't exist, create it:
                                    var gcr = new CustomerRequest{
                                        Id = customerIdOnBraintree
                                    };

                                    var r = gateway.Customer.Create(gcr);
                                    if (!r.IsSuccess()) {
                                        ModelState.AddFormError(r.Message);
                                        foreach (var error in r.Errors.All()) {
                                            ModelState.AddFormError(error.Message);
                                        }
                                    }
                                }
                            
                        
                                TransactionCreditCardRequest transactionCreditCard = null;
                                AddressRequest transactionAddress = null;
                                if (ModelState.IsValid && createCard) {
                                    
                                    if (savePayment) {
                                        // Create credit card saving in vault
                                        var creditCardRequest = new CreditCardRequest
                                        {
                                            CustomerId = customerIdOnBraintree,
                                            CardholderName = Request["name-on-card"],
                                            Number = Request["card-number"],
                                            ExpirationDate = Request["card-exp-month"] + "/" + Request["card-exp-year"],
                                            CVV = Request["cvv"],
                                            BillingAddress = new CreditCardAddressRequest
                                            {
                                                StreetAddress = address.AddressLine1,
                                                ExtendedAddress = address.AddressLine2,
                                                Locality = address.City,
                                                Region = address.StateProvinceCode,
                                                PostalCode = address.PostalCode,
                                                CountryCodeAlpha2 = address.CountryCodeAlpha2
                                            }
                                        };
                                
                                        Result<CreditCard> resultCreditCard = null;

                                        // Find or create/update the payment method (credit card) for the customer
                                        try{
                                            // Find the card
                                            gateway.CreditCard.Find(creditCardToken);
                                    
                                            // Update it:
                                            resultCreditCard = gateway.CreditCard.Update(creditCardToken, creditCardRequest);

                                        } catch (Braintree.Exceptions.NotFoundException ex) {
                                            // Credit card for customer doesn't exist, create it:
                                            resultCreditCard = gateway.CreditCard.Create(creditCardRequest);
                                        }
                                
                                        if (resultCreditCard.IsSuccess()) {
                                            // New Token, for the payment transaction
                                            creditCardToken = resultCreditCard.Target.Token;
                                        }
                                        else {
                                            ModelState.AddFormError(resultCreditCard.Message);
                                            foreach (var error in resultCreditCard.Errors.All()) {
                                                ModelState.AddFormError(error.Message);
                                            }
                                        }
                                    } else {
                                        // Card details for the transaction without being saved on Vault
                                        transactionCreditCard = new TransactionCreditCardRequest {
                                            CardholderName = Request["name-on-card"],
                                            Number = Request["card-number"],
                                            ExpirationDate = Request["card-exp-month"] + "/" + Request["card-exp-year"],
                                            CVV = Request["cvv"]
                                        };
                                        transactionAddress = new AddressRequest
                                        {
                                            StreetAddress = address.AddressLine1,
                                            ExtendedAddress = address.AddressLine2,
                                            Locality = address.City,
                                            Region = address.StateProvinceCode,
                                            PostalCode = address.PostalCode,
                                            CountryCodeAlpha2 = address.CountryCodeAlpha2
                                        };
                                    }
                                }
                        
                        
                                if (ModelState.IsValid) {
                                    TransactionRequest request = new TransactionRequest
                                    {
                                        Amount = TotalPrice,
                                        CustomerId = customerIdOnBraintree,
                                        PaymentMethodToken = creditCardToken,
                                        // Now, with Marketplace #408, the receiver of the money for each transaction is
                                        // the provider through account at Braintree, and not the Loconomics account:
                                        //MerchantAccountId = LcPayment.BraintreeMerchantAccountId,
                                        MerchantAccountId = LcPayment.GetProviderPaymentAccountId(p.UserID),
                                        // Marketplace #408: since provider receive the money directly, Braintree must discount
                                        // the next amount in concept of fees and pay that to the Marketplace Owner (us, Loconomics ;-)
                                        ServiceFeeAmount = LoconomicsFees,
                                        Options = new TransactionOptionsRequest
                                        {
                                            // Marketplace #408: don't pay provider still, wait for the final confirmation 'release scrow'
                                            HoldInEscrow = true,
                                            SubmitForSettlement = false,
                                            StoreInVaultOnSuccess = savePayment,
                                            AddBillingAddressToPaymentMethod = savePayment
                                        },
                                        CreditCard = transactionCreditCard,
                                        BillingAddress = transactionAddress
                                    };
                                    if (LcPayment.BraintreeFraudProtectionToolsEnabled) {
                                        request.DeviceData = Request.Form["device_data"];
                                    }
                                
                                    var result = gateway.Transaction.Sale(request);
                    
                                    // Checking results:
                                    if (result.IsSuccess()
                                        && result.Target != null
                                        && !String.IsNullOrEmpty(result.Target.Id)) {
                                        transactionID = result.Target.Id;
                                    } else {
                                        if (result.IsSuccess()) {
                                            ModelState.AddFormError("Impossible to know transaction details, please contact support");
                                        } else {
                                            ModelState.AddFormError(result.Message);
                                            foreach (var error in result.Errors.All()) {
                                                ModelState.AddFormError(error.Message);
                                            }
                                        }
                                    }
                                }
                            
                            } catch (Braintree.Exceptions.BraintreeException ex) {
                                //ModelState.AddFormError(ex.Message + "(<a target='_blank' href='" + ex.HelpLink + "'>More info</a>)");
                                ModelState.AddFormError("Braintree: " + ex.Message);
                            }
                        }

                        if (ModelState.IsValid) {
                            /*
                             * Save Braintree Transaction ID in the Booking Request and card digits
                             * and updating State to 'Booking Request Completed' (2:completed)
                             */
                            db.Execute(@"
                                UPDATE  BookingRequest
                                SET     PaymentTransactionID = @1
                                        ,BookingRequestStatusID = 2 -- Completed
                                WHERE   BookingRequestID = @0
                            ", bookingRequestID, transactionID);
                            
                            // If we are in InstantBooking, the booking gets confirmed instantly!!
                            if (instantBooking) {
                                var result = LcData.Booking.ConfirmBooking(bookingRequestID, "PREFERRED", db);
                                
                                if (result.Error == 0) {
                                    
                                    // Communicate bookingID to Confirmation page through Session
                                    Session["BookingID"] = result.BookingID;
                                    
                                    // Send 'instant booking' specific email #520
                                    LcMessaging.SendInstantBooking(c.UserID, p.UserID, pos.PositionID, bookingRequestID, result.BookingID);
                                }
                                else {
                                    
                                    // Manage errors
                                    ModelState.AddFormError(result.ErrorMessage);
                                }
                            }
                            else {
                                /*
                                * Create, save and send Message
                                */
                                LcMessaging.SendBookingRequest(c.UserID, p.UserID, pos.PositionID, bookingRequestID);
                            }
                        }
                    }                    
                    
                } catch (Exception ex) {
                    using (var logger = new LcLogger("aspnet-errors"))
                    {
                        logger.LogEx("Error processing Booking/Payment POST, error:", ex);
                        logger.Save();
                    }
                    LcHelpers.ReturnJsonError(-1, ex.Message);
                }
            }
            if (ModelState.IsValid) {
                
                // Return OK result
                LcHelpers.ReturnJsonResult(101, null);
            }
        }
    }
    
    /*
     * Get Data
     */
    var pricingSummary = LcData.Booking.GetPricingSummary(summary);
    //var pricingSummaryGroups = LcData.Booking.GetPricingSummaryGroups(summary.PricingEstimateID, summary);
    var pricingSummaryDetails = LcData.Booking.GetPricingSummaryDetails(summary.PricingEstimateID, summary.PricingEstimateRevision);
    Braintree.CreditCard[] savedCards = null;
    {
        var gateway = LcPayment.NewBraintreeGateway();
        try{
            var gc = gateway.Customer.Find(LcPayment.GetCustomerId((int)c.UserID));
            savedCards = gc.CreditCards;
        } catch (Braintree.Exceptions.NotFoundException ex) {
        }
    }
    // No selected credit card (new one)
    var selectedCreditCard = "";
    if (IsPost) {
        selectedCreditCard = Request["credit-card"];
    } else {
        // First saved card, if there is any
        if (savedCards != null && savedCards.Length > 0) {
            selectedCreditCard = savedCards[0].Token;
        }
    }
    // Option: copy address from step-2 schedule, only if is a customer address
    var allowUseScheduledAddress = summary.LocationUserID == c.UserID;
}

@functions{
    void SaveDatesToBookingRequest(
        int bookingRequestID,
        int postalCodeID, 
        dynamic c,
        dynamic p,
        dynamic pos,
        DateTime? dt1Start,
        DateTime? dt1End, 
        DateTime? dt2Start, 
        DateTime? dt2End, 
        DateTime? dt3Start, 
        DateTime? dt3End,
        Database db) {
        /*
        * Check if there are not events on the booking request, because this is
        * the first attempt and not a save-after-error 
        */
        if (0 == (int)db.QueryValue(@"
                SELECT  count(*)
                FROM    BookingRequest
                WHERE   BookingRequestID = @0
                        AND PreferredDateID is not null
            ", bookingRequestID)) {
                        
            /*
                * Creating events with the passed data by the user for this Booking setting the Time Zone we found 
                * looking in our Postal Codes table.
                */
            var sqlGetTimeZone = @"
                SELECT  TimeZone
                FROM    PostalCode
                WHERE   PostalCodeID = @0
            ";
            var timeZone = db.QueryValue(sqlGetTimeZone, postalCodeID);
            // Save date-times as 'tentative' provider Events
            int? dt1ID, dt2ID, dt3ID;
            dt1ID = dt2ID = dt3ID = null;
            string eventSummary = String.Format("{0} services for {1}", pos.PositionSingular, LcHelpers.GetUserDisplayName(c));
            string eventDesc = LcData.Booking.GetBookingRequestEventDescription(bookingRequestID);
            if (dt1Start.HasValue && dt1End.HasValue) {
                dt1ID = db.QueryValue(LcCalendar.sqlInsBookingEvent, p.UserID,
                    3, // Availability is 'Tentative'
                    eventSummary, eventDesc,
                    dt1Start, dt1End, timeZone);
            }
            if (dt2Start.HasValue && dt2End.HasValue) {
                dt2ID = db.QueryValue(LcCalendar.sqlInsBookingEvent, p.UserID,
                    3, // Availability is 'Tentative'
                    eventSummary, eventDesc,
                    dt2Start, dt2End, timeZone);
            }
            if (dt3Start.HasValue && dt3End.HasValue) {
                dt3ID = db.QueryValue(LcCalendar.sqlInsBookingEvent, p.UserID,
                    3, // Availability is 'Tentative'
                    eventSummary, eventDesc,
                    dt3Start, dt3End, timeZone);
            }

            /*
                * Save event IDs and preferences
                * State is still 1:created
                */
            db.Execute(@"
                UPDATE  BookingRequest
                SET     
                        PreferredDateID = @1
                        ,AlternativeDate1ID = @2
                        ,AlternativeDate2ID = @3
                WHERE   BookingRequestID = @0
            ", bookingRequestID, 
                dt1ID, dt2ID, dt3ID);
        }
    }
}

@helper printDate(DateTime? date, DateTime? end) {
    if (date.HasValue) {
        <span class="date">
        @(date.Value.ToString("dddd, MMM d"))
        </span>
        <span class="hours">
        @(date.Value.ToShortTimeString()) - 
        @(end.Value.ToShortTimeString())
        </span>
    }
}

<h2>Payment</h2>
<p class="info">
    <strong>Visa, Mastercard, or American Express will do nicely, thank you</strong>
</p>
<form action="@(LcUrl.LangPath)Booking/$Payment/@Request.Url.Query" method="post" class="payment clearfix" id="booking-payment">
    <input type="hidden" name="providerid" value="@p.UserID"/>
    <input type="hidden" name="positionid" value="@pos.PositionID"/>
    @LcHelpers.GetValidationScripts()

    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="billing-info step-block">

        @if (savedCards != null && savedCards.Length > 0)
        {
            <div class="saved-cards">
                @*(Request["update-credit-card"].AsBool(false))*@
                <input type="hidden" name="update-credit-card" value="@(Request["update-credit-card"] ?? "false")" />
                <table>
                    <tr>
                        <th>Your saved payment options</th>
                        <th>Ending in</th>
                        <th>Expires on</th>
                    </tr>
                    @* 
                        @card.CardType.ToString() ending in @card.LastFour, token @card.Token, UID: @card.UniqueNumberIdentifier
                        Example: MasterCard ending in 9781 expires on 06/2015, token dev_299_CreditCard1, UID: 903e9d3146b27bd6af9a2757d9051238
                    *@
                    @foreach (var card in savedCards)
                    {
                        <tr class="card">
                            <td class="name">
                                <label>
                                    <input type="radio" @LcHelpers.IsChecked(selectedCreditCard, card.Token) name="credit-card" value="@card.Token" />
                                    @card.CardType.ToString()
                                    <a href='#update-card' class="update-credit-card">
                                        <span class="update-label">update</span>
                                        <span class="cancel-label">cancel update</span>
                                    </a>
                                </label>
                            </td>
                            <td>
                                @card.LastFour
                            </td>
                            <td>
                                @card.ExpirationDate
                            </td>
                        </tr>
                    }
                    <tr class="card">
                        <td colspan="3">
                            <label>
                                <input type="radio" name="credit-card" value="" @LcHelpers.IsChecked(selectedCreditCard, "") />
                                Enter a new card
                            </label>
                        </td>
                    </tr>
                </table>
            </div>
        }

        <ul class="edit-card">
            @if (allowUseScheduledAddress)
            {
                <li class="copy-address"
                    data-address-line1="@summary.AddressLine1"
                    data-address-line2="@summary.AddressLine2"
                    data-address-city="@summary.City"
                    data-address-stateprovinceid="@summary.StateProvinceID"
                    data-address-postalcode="@summary.PostalCode"
                    >
                    <label><input type="checkbox" @LcHelpers.IsChecked(Request["use-scheduled-address"], "true")) value="true" name="use-scheduled-address" /> My billing address is the same as I entered in step 2</label>
                </li>
            }
            <li class="name-on-card">
                <label>Name as on card:<input type="text" name="name-on-card" value="@Request["name-on-card"]" @Validation.GetHtml("name-on-card")/></label>
            </li>
            <li class="street-address-line-1 is-addressField">
                <label>Street address line 1:<input type="text" name="street-address-line-1" value="@(Request["street-address-line-1"])" @Validation.GetHtml("street-address-line-1")/></label>
            </li>
            <li class="street-address-line-2 is-addressField">
                <label>Street address line 2:<input type="text" name="street-address-line-2" value="@(Request["street-address-line-2"]) " @Validation.GetHtml("street-address-line-2")/></label>
            </li>
            <li class="city is-addressField">
                <label>City:<input type="text" name="city" value="@(Request["city"])" @Validation.GetHtml("city")/></label>
            </li>
            <!-- Collapsed next elements code to avoid white spaces that create excesive width on IE -->
            <li class="state is-addressField"><label>State:<select name="state" @Validation.GetHtml("state")>
                        @LcHelpers.StateProvinceOptions(Request["state"])
                    </select></label></li>
            <li class="zip is-addressField">
                <label>Zip Code:<input type="text" name="zip" data-val-postalcode="Postal Code is not valid" value="@(Request["zip"])" @Validation.GetHtml("zip")/></label>
            </li>
            <li class="card-number">
                <label>Card number:<input type="text" name="card-number" value="@Request["card-number"]" @Validation.GetHtml("card-number")/></label>
            </li>
            <!-- Collapsed next elements code to avoid white spaces that create excesive width on IE -->
            <li class="card-exp"><label>Expiration Date<select name="card-exp-month" @Validation.GetHtml("card-exp-month")>
                        @LcHelpers.MonthOptions(Request["card-exp-month"] ?? DateTime.Today.Month.ToString())
                    </select></label><select name="card-exp-year">
                        @LcHelpers.CardYearOptions(Request["card-exp-year"])
                    </select></li>
            <li class="card-cvv">
                <label>Security Code:<input type="text" name="cvv" value="@Request["cvv"]" @Validation.GetHtml("cvv")/></label>
            </li>
            <li class="save-to-my-payments">
                <label class="save"><input type="checkbox" @LcHelpers.IsChecked("true", Request["save-payment"]) name="save-payment" value="true" />Save payment details</label>
            </li>
        </ul>
    </fieldset>


    <fieldset class="order-summary">
        <h3>Order Summary</h3>
        <div class="provider">
            <h4>Your provider is</h4>
            <strong>@LcHelpers.GetUserDisplayName(p) (@pos.PositionSingular)</strong>
        </div>
        <div class="schedule">
            <h4>Time Preferences are</h4>
            <ol>
                @if (dt1Start.HasValue)
                {
                <li class="preferred-option">
                    @printDate(dt1Start, dt1End)
                </li>
                }
                @if (dt2Start.HasValue)
                {
                <li class="alternative-option-1">
                    @printDate(dt2Start, dt2End)
                </li>
                }
                @if (dt3Start.HasValue)
                {
                <li class="alternative-option-2">
                    @printDate(dt3Start, dt3End)
                </li>
                }
            </ol>
        </div>
        <h4>Services Requested</h4>
        @LcPricingView.CustomerPricingSummaryDetailed(pricingSummary, pricingSummaryDetails)
        <div class="payment-info booking-warning">Your card will be authorized immediately and charged when your provider accepts the booking, typically within 18 hr.</div>
    </fieldset>
    <fieldset class="agreement">
        <ul>
            @if (priceIsEstimated)
            {
            <li><input id="agree-estimate" type="checkbox" name="agree-estimate" @LcHelpers.IsChecked("true", Request["agree-estimate"]) value="true" /><label for="agree-estimate"> I understand this pricing is only an estimate and will be confirmed within 18 hrs</label></li>
            }
            <li><input id="agree-cancellation-policy" type="checkbox" name="agree-cancellation-policy" @LcHelpers.IsChecked("true", Request["agree-cancellation-policy"]) value="true" /><label for="agree-cancellation-policy"> I have read and agree to @(p.FirstName)’s <a href="#cancellation-policy" class="popup-action">cancellation policy</a></label></li>
            <li><input id="send-reminder" type="checkbox" name="send-reminder" @LcHelpers.IsChecked("true", Request["send-reminder"]) value="true" /><label for="send-reminder"> Send an SMS appointment reminder</label></li>
            <li><input id="send-promotionals" type="checkbox" name="send-promotionals" @LcHelpers.IsChecked("true", Request["send-promotionals"]) value="true" /><label for="send-promotionals"> Send me promotional emails</label></li>
        </ul>
        <div class="popups">
            <div id="cancellation-policy" class="popup">
                @{
                    PageData["BookingDate"] = dt1Start;
                    if (dt2Start.HasValue &&
                        dt2Start < PageData["BookingDate"])
                    {
                        PageData["BookingDate"] = dt2Start;
                    }
                    if (dt3Start.HasValue &&
                        dt3Start < PageData["BookingDate"])
                    {
                        PageData["BookingDate"] = dt3Start;
                    }
                }
                @RenderPage("$CancellationPolicyInfoWidget.cshtml", new { 
                    CancellationPolicyID = summary.CancellationPolicyID,
                    DisplayForUserType = "customer" })
            </div>
        </div>
    </fieldset>
    <fieldset class="actions">
        <button data-wizard-next-step="@Href(LcUrl.LangPath + "Booking/Confirmation/")" class="complete-booking next finish main-action">book it!</button>
    </fieldset>
    @if (LcPayment.BraintreeFraudProtectionToolsEnabled)
    {
    <script type="text/javascript">
        @if (IsPost) {
            <text>
            LC.initCreditCardEdition($('#payment'));
            LC.initPaymentAddress($('#payment'));
            </text>
        }

        function LC_BookingPayment() {
            @*var braintree = Braintree.create("MIIBCgKCAQEA780LkpinVrfWoCS/l3wieLlyE8S7zsPh2yMDNjWhIwVVIz3K8ahi61Rl1U5t1IGFiRC43nGU4i8iUV2UPrOyATP9Ye5jfQ20R7l9JY/Gm8yf5y97k3FkdMcyICCK5jvbMY9beNtMLg2p2YM+YgMlZkZEu+rjeR6Ru+bq4fgyWj8U63CyEKRVPr8GSFlqOoB9gt0NA/uSG2oEOZUDmAD06iJ7XSNjfqrePl7r0SG5a8zpG3eXqM8+3IDs8DUk8ByhBy6ui+0Ojka0Ot4qXbrZ5/S+Is9lBCAHqmCAQBaILkCMVx4INJPXlKzdj2JAKf+OZpCd1uqeeaoBFcR/jK7LbQIDAQAB");*@
            BraintreeData.setup('@(LcPayment.BraintreeMerchantId)', 'booking-payment', BraintreeData.environments.@(LcPayment.BraintreeJsEnvironment));
        }
        @if (!IsPost)
        {
        <text>
        LC.load({
            scripts: ['https://js.braintreegateway.com/v1/braintree.js', 'https://js.braintreegateway.com/v1/braintree-data.js'],
            completeVerification: function () {
                return (window['BraintreeData'] !== undefined);
            },
            complete: function () {
                LC_BookingPayment();
            }
        });
        </text>
        }
        else
        {
        <text>
        LC_BookingPayment();
        </text>
        }
    </script>
    }
</form>
