@using WebMatrix.Data;
@{
    LcHelpers.SecurePage();
   
    var u = LcData.UserInfo.GetUserRow();
    int brID = PageData["BookingRequestID"] ?? Request["BookingRequestID"].AsInt();
    string redirectUrl = PageData["RedirectUrl"];
    string dateType = PageData["ConfirmedDateType"] ?? Request["ConfirmedDateType"];    
        
    using (var db = Database.Open("sqlloco")) {

        var taskResult = LcData.Booking.ConfirmBooking(brID, dateType, db);
        
        if (taskResult.Error != 0) {
            // Manage errors on task
            switch ((int)taskResult.Error) {
                default:
                    // We need negative numbers to indicate an error (is our convention for json 'Code')
                    @OnError(brID, "confirm", taskResult.ErrorMessage, 0 - taskResult.Error);
                    break;
                case -1:
                    /* What? 
                    * - ConfirmedDateType is not correct?
                    * - BookingRequest is already confirmed or not exists?
                    */
                    @OnError(brID, "find", null, -90);
                    break;
                case -2:
                    // Is not available
                    @OnError(brID, "availability", null, -91);
                    break;
                case -3:
                    @OnError(brID, "payment", taskResult.ErrorMessage, -92);
                    break;
            }
        }
        else {
            // Success!
                    
            // Send message
            LcMessaging.SendBookingRequestConfirmation(brID, taskResult.ID);

            // Redirect
            if (redirectUrl == null) {
                redirectUrl = LcUrl.LangPath + (
                    Request.IsAjaxRequest() ?
                    "Booking/$BookingDetailsWidget/?BookingRequestID={0}&BookingID={1}" :
                    "dashboard/messages/booking/{1}/"
                );
            }
            redirectUrl = String.Format(redirectUrl, brID, taskResult.ID);

            if (Request.IsAjaxRequest()) {
                LcHelpers.ReturnJsonResult(3, redirectUrl);
            } else {
                Response.Redirect(redirectUrl);
            }
        }
    }
}
@** task must be: find, confirm, payment, availability
  *@
@helper OnError(int brID, string task, string errorMessage, int errorCode) {  
    string msg = null;
    switch (task) {
        case "payment":
            msg = String.Format("We're having issues with your payment. Please contact us at support@loconomics.com and reference: {0}", errorMessage);
            break;
        case "find":
            msg = "We're having issues finding your booking request. Please contact us at support@loconomics.com.";
            break;
        case "confirm":
            msg = string.Format("Error confirming the booking request: {0}", errorMessage);
            break;
        case "availability":
            msg = "That time conflicts with another appointment you have--please choose another!";
            break; 
    }

    if (PageData["UseRenderReturns"] ?? false) {
        LcHelpers.RenderPageReturns = msg ?? errorMessage;
        return;
    }
    
    if (Request.IsAjaxRequest()) {
        LcHelpers.ReturnJsonError(errorCode, msg ?? errorMessage);
    } else {
        if (task != "payment") {
            Response.Redirect(
                LcUrl.LangPath + 
                String.Format("dashboard/messages/bookingrequest/{0}/", brID));
        } else {

            Layout = "../_SiteLayout.cshtml";
            @(msg ?? errorMessage);
        }
    }
}