@using WebMatrix.Data;
@{
    LcHelpers.SecurePage();
    
    var u = LcData.UserInfo.GetUserRow();
    var brID = Request["BookingRequestID"].AsInt();
    
    var sqlCheckBookingRequest = @"
        SELECT  TOP 1 R.BookingRequestID
        FROM    BookingRequest As R
        WHERE   R.CustomerUserID = @0
                 AND
                R.BookingRequestID = @1
                -- Only incomplete requests
                 AND
                R.BookingRequestStatusID = 1
    ";

    using (var db = Database.Open("sqlloco")) {
        var checkID = db.QueryValue(sqlCheckBookingRequest, u.UserID, brID);
        if (checkID != null && (int)checkID == brID) {
            var result = LcData.Booking.InvalidateBookingRequest(brID, 4); // 4:Cancelled

            if (result.Error == 0) {
                // Send message, to provider and customer copy
                LcMessaging.SendBookingRequestDenegation(brID, false);
                /* TODO If in the future can be cancelled a booking request by customer,
                 * implement payment message for bookingRequest too (now only confirmed bookings)
                // To system: notify Loconomics Staff Users requesting 
                // the manual payment to provider by price less refunded:
                LcMessaging.SendProviderPaymentRequestToLoconomics(bID);
                 */
                
                if (Request.IsAjaxRequest()){
                    LcHelpers.ReturnJsonResult(3, LcUrl.LangPath + String.Format(
                        "Booking/$BookingRequestDetails/?BookingRequestID={0}", brID ));
                } else {
                    Response.Redirect(LcUrl.LangPath + String.Format(
                        "Dashboard/Bookings/#!BookingRequest-{0}", brID));
                }
            } else {
                if (Request.IsAjaxRequest()){
                    // Return JSON result:
                    // We need negative numbers to indicate an error (is our convention for json 'Code')
                    LcHelpers.ReturnJsonError(0 - result.Error, result.ErrorMessage);
                } else {
                    throw new HttpException(500, "Error cancelling the booking request: " + result.ErrorMessage);
                }
            }
        } else {
            if (Request.IsAjaxRequest()){
                /* What? 
                 * - BookingRequestID and UserID (as CustomerUserID) don't match?
                 * - BookingRequest is already cancelled?
                 */
                LcHelpers.ReturnJsonError(-1, "Impossible to cancel that Booking Request. Is already cancelled?");
            } else {
                throw new HttpException(500, "Impossible to cancel that Booking Request. Is already cancelled?");
            }
        }
    }
}