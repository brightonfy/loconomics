@using WebMatrix.Data;
@{
    var policyID = PageData["CancellationPolicyID"] ?? LcData.Booking.DefaultCancellationPolicyID;
    if (Request["CancellationPolicyID"].IsInt()) {
        policyID = Request["CancellationPolicyID"].AsInt();
    }
    // possible values: customer, provider
    var forUserType = PageData["DisplayForUserType"] ?? Request["DisplayForUserType"] ?? "customer";
    var bookingDate = PageData["BookingDate"];
    var customerName = PageData["DisplayedCustomerName"] ?? "the customer";

    dynamic policy = null;
    using (var db = Database.Open("sqlloco")) {
        policy = db.QuerySingle(@"
            SELECT *
            FROM CancellationPolicy
            WHERE CancellationPolicyID = @0
                AND LanguageID = @1 AND CountryID = @2
        ", policyID,
         LcData.GetCurrentLanguageID(),
         LcData.GetCurrentCountryID());
    }
}

@if (policy != null)
{
    string cancellationSubjectPronoun = forUserType == "customer" ? "you" : customerName;
    string cancellationPossesivePronoun = forUserType == "customer" ? "your" : customerName + "'s";
    DateTime refundLimitDate = (bookingDate ?? DateTime.Now.AddDays(7)).AddHours(- policy.HoursRequired);
    <div class="cancellation-policy-info">
        <strong>@policy.CancellationPolicyName:</strong>
        <em><strong>@policy.CancellationPolicyDescription</strong>
            @if (refundLimitDate <= DateTime.Now)
            {
                var tpl = "Since {0} requested time is within {1} hours, {2} will not be able to cancel this appointment.";
                <span>
                    @String.Format(tpl, cancellationPossesivePronoun, policy.HoursRequired, cancellationSubjectPronoun)
                 </span>
            }
            else if (bookingDate == null)
            {
                var tpl = "If a booking is made by {0} for one week from now, {0} would need to cancel by";
                <span>
                    @String.Format(tpl, cancellationSubjectPronoun)
                    <strong>@(refundLimitDate.ToShortTimeString()) @refundLimitDate.ToLongDateString()</strong>
                    to receive a <strong>@(policy.RefundIfCancelledBefore.ToString("0.##%")) refund.</strong>
                </span>
            }
            else
            {
                var tpl = "{0} would need to cancel by";
                <span>
                    <strong>@(policy.RefundIfCancelledBefore.ToString("0.##%")) refund</strong>
                    if cancelled before @policy.HoursRequired hours, except fees.
                    @String.Format(tpl, cancellationSubjectPronoun.Capitalize())
                     @(refundLimitDate.ToShortTimeString()) @refundLimitDate.ToLongDateString(),
                    to receive a @(policy.RefundIfCancelledBefore.ToString("0.##%")) refund.
                </span>
            }
        </em>
        <ul>
            <li>The Loconomics service fee is non-refundable.</li>
            <li>Loconomics must be notified of any no-shows or complaints by either party within 24 hours after a booking is scheduled to end.</li>
            <li>Loconomics will help faciliate dispute resolution but has the final say should a dispute not be resolved between parties.</li>
            <li>A booking is officially canceled when the client clicks the cancellation button on the cancellation confirmation page, which they can find in Dashboard > Bookings > Change or Cancel</li>
            @if (forUserType == "provider")
            {
                <li>You will have the option to waive a cancellation fee for a client on a case-by-case basis when cancellations occur.</li>
                <li>Loconomics reserves the right to waive a cancellation fee under extenuating circumstances of which you’ll be notified.</li>
            }
        </ul>
    </div>
}
