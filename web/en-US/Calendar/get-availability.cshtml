@*
    This page retrieves the user availability for the date range as JSON.

    INPUT:
        user
        start
        end
*@
@{
    // Prepare result struct
    var result = new Dictionary<string, object>();
    int resultCode = -1;
    // To represent date and times in the returned JSON we 
    // use the ISO-8601 long formats (long format has separators versus
    // short version without separators),
    // and precision to seconds.
    var dateFormat = "yyyy'-'MM'-'dd";
    var timeFormat = @"hh\:mm\:ss";

    try{
        // Defaults
        var userId = WebSecurity.IsAuthenticated ? WebSecurity.CurrentUserId : 0;
        var defStart = LcHelpers.GetFirstWeekDay(DateTime.Today);
        var defEnd = LcHelpers.GetLastWeekDay(DateTime.Today);

        // Input data
        userId = Request["user"].AsInt(userId);
        var startDate = Request["start"].AsDateTime(defStart);
        var endDate = Request["end"].AsDateTime(defEnd);

        // Get data
        var data = LcCalendar.GetUserAvailability(userId, startDate, endDate);
        
        // Create result
        var slots = new Dictionary<string, List<string>>();
        // We prepare the slots with every date in the range, no matter
        // if some dates ends up without data (empty value list) we need to be
        // explicit about the returned dates.
        var fordate = startDate;
        while (fordate <= endDate) {
            slots.Add(fordate.ToString(dateFormat), new List<string>());
            // Next date
            fordate = fordate.AddDays(1);
        }
        
        // We set 'unavailable' (any database status except free -includes: unavailable, busy, tentative, offline)
        // as the default state, then we only return 'available' (free on database) slots
        result["defaultStatus"] = "unavailable";
        result["status"] = "available";
        foreach(var ev in data) {
            
            if (ev.CalendarAvailabilityTypeID == (int)LcCalendar.AvailabilityType.Free) {
                // Result set is organized per dates,
                var date = ev.DateSet.ToString(dateFormat);
                // and inside, per time slot.
                var slot = ev.TimeBlock.ToString(timeFormat);
                // Added to the list
                slots[date].Add(slot);
            }
        }

        result["slots"] = slots;
        
        //throw new Exception("Inside Test error");
        
        // Success
        resultCode = 0;

    } catch(Exception ex){
        result["ErrorMessage"] = ex.Message;
    }

    // Output data
    LcHelpers.ReturnJsonResult(resultCode, result);
}