@*
    Read and edit Events.
    
    Options:
    GET
        - types[]:array[int] Optional. List of CalendarEventTypeIDs to filter the events returned.
            Possible values are the IDs from records on the table [CalendarEventType].
        - start:datetime Optional. Start date of the range of events included partial or completely
        - end:datetime Optional. End date of the range of events included partial or completely.
        - includes[]:array[string] Optional. Names of related Entities to include.
            Possible values are: 
            - CalendarAvailabilityType, 
            - CalendarEventType, 
            - CalendarRecurrence,
            - CalendarRecurrenceFrequency (it goes inside CalendarRecurrence)
            - CalendarEventExceptionsPeriodsList
            - CalendarEventExceptionsPeriod (it goes inside CalendarEventExceptionsPeriodsList)
            - CalendarEventRecurrencesPeriodsList
            - CalendarEventRecurrencesPeriod (it goes inside CalendarEventRecurrencesPeriodsList)
            - CalendarEventsAttendees
            - CalendarEventsContacts,
            - CalendarEventComments
*@
@functions{
    public class RestEvents : RestWebPage
    {
        public override dynamic Get()
        {
            // Parameters
            int userId = WebSecurity.CurrentUserId;

            var types = Request.QueryString.GetValues("types[]");
            var typesIDs = new List<int>();
            if (types != null) {
                foreach(var type in types) {
                    typesIDs.Add(type.AsInt(0));
                }
            } else {
                // By default, show events for the common displayed types
                // (it avoids the internal type 'work hours')
                typesIDs.AddRange(new int[]{1, 3, 4, 5, 6});
            }

            var start = DateTimeFromISO(Request.QueryString["start"]);
            var end = DateTimeFromISO(Request.QueryString["end"]);

            var includes = Request.QueryString.GetValues("includes[]") ?? new string[]{};

            // Data
            var list = LcCalendar.GetUserEvents(userId, typesIDs.ToArray<int>(), start, end, includes);

            return list;
        }
    }
}
@{   
    new RestEvents().JsonResponse(this);
}
