@*
    Read and write events, simplified with the data usually used in user interface
    and some extra convenience options.

    NOTE: This is a convenience API, a full API for all the back-end data resides
        under icalendar/events.

    Options:
    GET
        - types[]:array[int] Optional. List of CalendarEventTypeIDs to filter the events returned.
            Possible values are the IDs from records on the table [CalendarEventType].
        - start:datetime Optional. Start date of the range of events included partial or completely
        - end:datetime Optional. End date of the range of events included partial or completely.

    GET /@id
        - @id:int the Event Id to retrieve; must be owned by the current user or 'not found' is returned
*@
@functions{
    public class RestEvents : RestWebPage
    {
        public override dynamic Get()
        {
            // Parameters
            int userId = WebSecurity.CurrentUserId;
            
            // Item ID
            if (UrlData[0].IsInt())
            {
                return GetItem(UrlData[0].AsInt(0), userId,);
            }

            // More parameters
            var types = Request.QueryString.GetValues("types[]");
            var typesIDs = new List<int>();
            if (types != null) {
                foreach(var type in types) {
                    typesIDs.Add(type.AsInt(0));
                }
            } else {
                // By default, show events for the common displayed types
                // (it avoids the internal type 'work hours')
                typesIDs.AddRange(new int[]{1, 3, 4, 5, 6});
            }

            var start = DateTimeFromISO(Request.QueryString["start"]);
            var end = DateTimeFromISO(Request.QueryString["end"]);

            // Data
            var list = LcCalendar.GetSimplifiedEvents(userId, typesIDs.ToArray<int>(), start, end);

            return list;
        }
        
        public dynamic GetItem(int eventID, int userID)
        {
            // Parameters
            int userId = WebSecurity.CurrentUserId;

            if (eventID > 0)
            {
                var item = (IEnumerable<dynamic>)LcCalendar.GetSimplifiedEvents(userID, null, null, null, eventID);
                if (item != null && item.Count() > 0)
                {
                    return item.First();
                }
            }

            throw new HttpException(404, "Event not found.");
        }
    }
}
@{
    Response.RestRequiresUser(LcData.UserInfo.UserType.User);
    new RestEvents().JsonResponse(this);
}
