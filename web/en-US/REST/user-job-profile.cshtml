@*
    Allows to retrieve the relationship and data from an user/freelance and
    its jobs titles, which collection is called the "User Job Profile".
*@
@functions{
    public class RestUserJobProfile : RestWebPage
    {
        /// <summary>
        /// Retrieve the full list of job titles or one by jobTitleID
        /// </summary>
        /// <returns></returns>
        public override dynamic Get()
        {
            // Item ID
            if (UrlData.Count == 1 && UrlData[0].IsInt()) {
                return GetItem(UrlData[0].AsInt(0));
            }
            else if (UrlData.Count == 1) {
                throw new HttpException(400, "The Job Title ID has bad format (must be an integer number)");
            }
            else if (UrlData.Count > 1) {
                throw new HttpException(404, "Not Found");
            }
            
            // Parameters
            int userId = WebSecurity.CurrentUserId;
            
            return LcData.JobTitle.GetUserJobTitles(userId);
        }
        
        /// <summary>
        /// Internal utility to get a record for a single job title
        /// </summary>
        /// <param name="itemID"></param>
        /// <returns></returns>
        private dynamic GetItem(int itemID)
        {
            // Parameters
            int userID = WebSecurity.CurrentUserId;

            if (itemID > 0)
            {              
                var items = LcData.JobTitle.GetUserJobTitles(userID, itemID);  
                var item = items == null || items.Count == 0 ? null : items[0];
                if (item != null) {
                    return item;
                }
            }

            throw new HttpException(404, "Job Title not found.");
        }
        
        /// <summary>
        /// Add a new job title to the profile.
        /// Or execute some actions on specific sub-URLs applied to 
        /// a jobTitleID URL.
        /// </summary>
        /// <returns></returns>
        public override dynamic Post()
        {
            if (UrlData.Count == 2) {
                if (UrlData[0].IsInt()) {
                    
                    // Response must be OK if goes fine (by default for POST is 'Created'
                    // it does not apply on this case)
                    WebPage.Response.StatusCode = 200;
                    
                    // Parameters
                    int userID = WebSecurity.CurrentUserId;
                    var jobTitleID = UrlData[0].AsInt();
                    
                    // Result holders
                    var done = false;
                    
                    switch (UrlData[1].ToLower()) {
                        case "deactivate":
                            done = LcData.JobTitle.DeactivateUserJobTitle(userID, jobTitleID);
                            // It cannot be done if record not exists, notify:
                            if (!done) {
                                throw new HttpException(404, "Not found");
                            }
                            else {
                                // Return an updated item
                                return GetItem(jobTitleID);
                            }

                        case "reactivate":
                            
                            // Double check if item exists
                            if (GetItem(jobTitleID) == null) {
                                throw new HttpException(404, "Not found");
                            }
                            else {
                                done = LcData.JobTitle.ReactivateUserJobTitle(userID, jobTitleID);
                                
                                if (!done) {
                                    // It cannot be done, since we already know
                                    // that the record exists, the problem only can
                                    // be that constraints for 'active profile' were not
                                    // fullfilled to allow manual activation.
                                    // Notify about pending steps:
                                    var alertsMsg = "You must complete another {0} steps to activate this profile.";
                                    var alerts = LcData.GetActiveRequiredUserAlertsCount(userID, jobTitleID);
                                    throw new HttpException(400, String.Format(alertsMsg, alerts));
                                }
                                else {
                                    // Return an updated item
                                    return GetItem(jobTitleID);
                                }
                            }

                        default:
                            throw new HttpException(404, "Not found");
                    }
                }
                else {
                    throw new HttpException(400, "Invalid Job Ttle ID");
                }
            }
            else if (UrlData.Count == 0) {
                // TODO
                // dashboard/position/$AddNew
                return null;
            }
            else {
                throw new HttpException(404, "Not found");
            }
        }
        
        /// <summary>
        /// Checks that there is a valid itemID in the URL,
        /// emiting errors on fail and double checking that 
        /// the item exists.
        /// Returns the itemID on success.
        /// </summary>
        /// <returns></returns>
        private int CheckAndGetItemID() {
            // Item ID
            var itemID = 0;
            if (UrlData[0].IsInt()) {
                itemID = UrlData[0].AsInt(0);
            }
            else if (UrlData.Count == 1) {
                throw new HttpException(400, "Invalid Job Title ID");
            }
            else {
                throw new HttpException(404, "Not Found");
            }
            
            // Check that the item exists
            if (GetItem(itemID) == null) {
                throw new HttpException(404, "Job Title not found");
            }
            
            return itemID;
        }

        /// <summary>
        /// Update editable fields for the job title:
        /// - intro
        /// - cancellationPolicyID
        /// - instantBooking
        /// </summary>
        /// <returns></returns>
        public override dynamic Put()
        {
            // Item ID
            var itemID = CheckAndGetItemID();

            // Validation rules
            Validation.Add("intro", Validator.StringLength(2000, 0, "Job title introduction must be fewer than 2000 characters"));
            Validation.RequireField("cancellationPolicyID", "Is required to choose a valid cancellation policy");
            Validation.Add("cancellationPolicyID", Validator.Integer("Is required to choose a valid cancellation policy"));
            //if (Request["instantBooing"] != "true" && Request["instantBooing"] != "false" ) {
            if (!Request["instantBooking"].IsBool()) {
                ModelState.AddError("instantBooking", "The scheduling option must be a boolean (true for instant booking)");
            }

            if (!Validation.IsValid() || !ModelState.IsValid) {
                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }

            // Parameters
            int userID = WebSecurity.CurrentUserId;
            var jobTitleID = itemID;
            var intro = Request["intro"];
            var policyID = Request["cancellationPolicyID"].AsInt();
            var instantBooking = Request["instantBooking"].AsBool();

            // Updating
            LcData.JobTitle.UpdateUserJobTitle(
                userID,
                jobTitleID,
                intro,
                policyID,
                instantBooking
            );

            // Return the updated item
            return GetItem(itemID);
        }

        /// <summary>
        /// Soft removal of a job title from the profile.
        /// It is internally disabled but appears as deleted for the user,
        /// could be enabled by re-adding the job title to the profile.
        /// </summary>
        /// <returns></returns>
        public override dynamic Delete()
        {
            // Item ID
            var itemID = CheckAndGetItemID();
            
            // Get item to be deleted.
            // It already throws 'not found' 
            // if doesn't exists
            var item = GetItem(itemID);

            // Parameters
            int userID = WebSecurity.CurrentUserId;
            var jobTitleID = itemID;

            // Delete
            LcData.JobTitle.SoftDeleteUserJobTitle(userID, jobTitleID);
         
            // Return 'deleted' item (internal updated info cannot be fetched)
            return item;
        }
    }
}
@{
    Response.RestRequiresUser(LcData.UserInfo.UserType.Provider);
    new RestUserJobProfile().JsonResponse(this);
}
