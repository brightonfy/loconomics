@* Page being called as a Popup-iframe from your-work/photos to
    upload new provider photos to its personal folder.
 *@
@using WebMatrix.Data;
@using WebMatrix.WebData;
@functions{
    const int fixedSizeWidth = 442;
    const int fixedSizeHeight = 442;

    int RegisterUserPhoto(string fileName, int userId, int positionId){
        using (var db = Database.Open("sqlloco")){
            // we update the new photo name
            return (int)db.QueryValue(@"
                /* #346: Set as primary if is the first provider-position photo */
                DECLARE @IsPrimary bit
                IF NOT EXISTS (
                    SELECT * FROM ProviderServicePhoto
                    WHERE UserID = @0
                        AND PositionID = @1
                )
                    SET @IsPrimary = 1
                ELSE
                    SET @IsPrimary = 0

                INSERT INTO ProviderServicePhoto (
                    UserID
                    ,PositionID
                    ,PhotoAddress
                    ,RankPosition
                    ,CreatedDate
                    ,UpdatedDate
                    ,ModifiedBy
                    ,Active
                    ,IsPrimaryPhoto
                ) VALUES (
	                @0
	                ,@1
	                ,@2
	                ,(SELECT coalesce(max(P2.RankPosition),0) + 1 FROM ProviderServicePhoto As P2 WHERE P2.UserID=@0 AND P2.PositionID=@1)
	                ,getdate()
	                ,getdate()
	                ,'sys'
	                ,1
                    ,@IsPrimary
                )
                SELECT Cast(@@Identity as int)

                -- Test Alert
                EXEC TestAlertShowcaseWork @0, @1
            ", userId, positionId, fileName);
        }
    }
    void SavePhoto(Stream photo, string virtualPath, string fileName){       
        // Check folder or create
        var folder = Server.MapPath(virtualPath);
        if (!Directory.Exists(folder)) {
            Directory.CreateDirectory(folder);
        }
                
        // Save file on disk
        byte[] content = new byte[photo.Length];
        photo.Read(content, 0, (int)photo.Length);
        File.WriteAllBytes(folder + fileName, content);
        photo.Dispose();
    }
    string GetValidFileName(string fileName){
        // Names starting with $ are considered special for us, no allow user to upload a file with that character as prefix:
        return fileName.TrimStart('$');
    }
}
@{
    LcHelpers.SecurePage();
    var userId = WebSecurity.CurrentUserId;
    var positionId = Request["PositionID"].AsInt();
    // This is only for Post uploads
    var uploadedFileURI = "";
    var photoID = 0;
    bool processed = false;
    
    string filePathInApp = "img/userphotos/u" + userId.ToString() + "/";
    string virtualPath = LcUrl.RenderAppPath + filePathInApp;
    
    // qq File uploader support, XHR Upload
    if (!String.IsNullOrEmpty(Request["qqfile"])){
        string fileName = GetValidFileName((string)Request["qqfile"]);

        // File name limit to 100 instead of database 2073 to avoid problems with the File I/O API. Being aware too
        // that the virtualPath is added to filename.
        if (fileName.Length > 100) {
            ModelState.AddFormError("File name must be lower than 100 characters.");
        } else {
            try{
                uploadedFileURI = LcUrl.AppPath + filePathInApp + fileName;
                if (Request.InputStream.Length > 0) {
                    SavePhoto(Request.InputStream, virtualPath, fileName);
                } else {
                    // Emulate standard error, next its replaced by better message
                    ModelState.AddFormError("Maximum request length exceeded");
                }
            } catch(Exception ex) {
                ModelState.AddFormError(ex.Message);
            }
        
            if (ModelState.IsValid) {
                // File saved, register it on the database:
                photoID = RegisterUserPhoto(fileName, userId, positionId);
            }
  
            processed = true;
        }
    } else if (IsPost){

        var fileuploaded = Request.Files["qqfile"] ?? Request.Files["avatar"];
            
        if (fileuploaded == null || String.IsNullOrEmpty(fileuploaded.FileName)) {
            ModelState.AddFormError("Please, select an image");
        }

        if (ModelState.IsValid) {
            string fileName = GetValidFileName(fileuploaded.FileName);
            
            try{
                uploadedFileURI = LcUrl.AppPath + filePathInApp + fileName;
                if (Request.InputStream.Length > 0) {
                    SavePhoto(fileuploaded.InputStream, virtualPath, fileName);
                } else {
                    // Emulate standard error, next its replaced by better message
                    ModelState.AddFormError("Maximum request length exceeded");
                }
            } catch(Exception ex) {
                ModelState.AddFormError(ex.Message);
            }

            if (ModelState.IsValid) {
                // File saved, register it on the database:
                photoID = RegisterUserPhoto(fileName, userId, positionId);
            }
        }
            
        processed = true;
    } else {
        // Manage normal GET
    }
    
    if (processed) {
        if (ModelState.IsValid) {

            // NOTE: There is some issues with IE managing this result with contenttype=json
            // because of this, here we use directly the Json helper instead our helper
            //LcHelpers.ReturnJson(
            Json.Write(
                new Dictionary<string, object>(){
                    { "success", "File was saved" }
                    ,{ "fileURI", uploadedFileURI }
                    ,{ "photoID", photoID }
                },
            Response.Output);
            Response.End();
                
            /*LcHelpers.ReturnJson(
                new Dictionary<string, object>(){
                    { "success", "File was saved" }
                    ,{ "fileURI", virtualPath + fileName }
                    ,{ "photoID", photoID }
                }
            );*/

        } else {

            var errMsg = String.Join("; ", ModelState.Values.First().Errors);
                
            // We don't want the ugly default asp.net message for file-size-exceeded
            // As of #454 (https://github.com/dani0198/Loconomics/issues/454#issuecomment-37782181)
            if (errMsg.Contains("Maximum request length exceeded")) {
                    
                var max = LcHelpers.GetMaxRequestSize();
                var printMax = "";
                if (max > 0) {
                    printMax = LcHelpers.PrettyFileSize(max * 1024);
                        
                    errMsg = "The file is too large, maximum file size is " + printMax;
                } else {
                    errMsg = "The file is too large";
                }
            }
                    
            // NOTE: IE problems with contentype=json, use JsonHelper directly:
            //LcHelpers.ReturnJson(
            Json.Write(
                new Dictionary<string, object>(){
                    { "error", LcRessources.GetText("an-error", errMsg) }
                },
                Response.Output);
            Response.End();
        }
    }
}
@{
    // Main assets that allow minification
    var styleCss = "Styles/common";
    var loadScripts = new List<string>();
    // Enabled only on dev
    if (LcHelpers.InDev) {
        loadScripts.Add("libs.js");
        loadScripts.Add("app.js");
        styleCss += ".css";
    } else {
        loadScripts.Add("common.min.js");
        styleCss += ".min.css";
    }
    
    int sizeLimit = LcHelpers.GetMaxRequestSize() * 1024;
    // DEBUG: forcing no limit to debug server response on 'maximum request size exceded' error
    //sizeLimit = 0;
}
<html data-position-id="@positionId" data-size-limit="@sizeLimit">
    <head>
        @*
        <script src="@Href(LcUrl.AppPath + "Scripts/jquery/jquery-1.7.2.min.js")" type="text/javascript"></script>
        <script src="@Href(LcUrl.AppPath + "Scripts/jquery/jquery-ui-1.8.21.custom.min.js")" type="text/javascript"></script>
        <link rel="stylesheet" href="@Href(LcUrl.AppPath + "Styles/smoothness/jquery-ui-1.8.21.custom.css")"/>

            Jquery and jquery-ui are already in common.min.js, and we reuse that because is already cached by the client browser.
        *@
        @LcAssets.PrintStyleTag(LcUrl.AppPath + styleCss)
        @foreach (var js in loadScripts)
        {
            @LcAssets.PrintScriptTag(LcUrl.AppPath + "Scripts/" + js)
        }
        <script src="@Href(LcUrl.AppPath + "Scripts/fileuploader/fileuploader.js")" type="text/javascript"></script>

        <script src="@Href(LcUrl.AppPath + "Scripts/jcrop/js/jquery.Jcrop.min.js")" type="text/javascript"></script>
        <link rel="stylesheet" href="@Href(LcUrl.AppPath + "Scripts/jcrop/css/jquery.Jcrop.min.css")" />

        <script type="text/javascript">
            @Html.Raw(LcUrl.ToJsVar())
        </script>
        <style type="text/css">
            html:after,
            html:before {
                display: none;
            }
            body {
                font-family: "Alte Haas Grotesk", Helvetica, Arial, sans-serif;
                padding: 1em;
            }
        </style>

        <script type="text/javascript">
            function reloadPhoto(fileName, photoID) {
                // Add image to the gallery, in the parent document! (this is an iframe)
                var gallery = jQuery('.DashboardPhotos .positionphotos-gallery > ol', window.parent.document);
                var tplImg = '<li id="UserPhoto-@@0"><a href="#"><img alt="Uploaded photo" src="@@1"/></a><a class="edit" href="#">Edit</a></li>';
                var newImg = jQuery(tplImg.replace(/@@0/g, photoID).replace(/@@1/g, fileName));
                // If is there is no photos still, the first will be the primary by default
                if (gallery.children().length == 0)
                    newImg.addClass('is-primary-photo');
                gallery.append(newImg)
                    // scroll the gallery to see the new element; using '-2' to avoid some browsers automatic scroll.
                    .animate({scrollTop: gallery[0].scrollHeight - gallery.height() - 2}, 1400)
                    .find('li:last-child')
                    .effect("highlight", {}, 1600);
            }
            jQuery(document).ready(function () {

                var $h = $('html'),
                    positionId = $h.data('position-id'),
                    sizeLimit = $h.data('size-limit');

                var uploader = new qq.FileUploader({
                    element: document.getElementById('change-photo-file-uploader'),
                    // path to server-side upload script
                    action: LcUrl.LangPath + 'dashboard/YourWork/UploadPhoto/?PositionID=' + (positionId),
                    allowedExtensions: ['jpg', 'jpeg', 'png', 'gif'],
                    onComplete: function (id, fileName, responseJSON) {
                        if (responseJSON.success) {
                            reloadPhoto(responseJSON.fileURI, responseJSON.photoID);
                            // Go to crop photo:
                            showCropPhoto(responseJSON.fileURI);
                        }
                    },
                    messages: {
                        typeError: "{file} has invalid extension. Only {extensions} are allowed.",
                        sizeError: "{file} is too large, maximum file size is {sizeLimit}.",
                        minSizeError: "{file} is too small, minimum file size is {minSizeLimit}.",
                        emptyError: "{file} is empty, please select files again without it.",
                        onLeave: "The files are being uploaded, if you leave now the upload will be cancelled."
                    },
                    sizeLimit: sizeLimit || 'undefined'
                });
            });
        </script>
        <script type="text/javascript">
            jQuery(function ($) {

                // Setup cropping form
                var $f = $('#crop-photo form');
                $f.on('submit', function (e) {
                    e.preventDefault();

                    $.ajax({
                        url: $f.attr('action'),
                        method: $f.attr('method'),
                        data: $f.serialize(),
                        success: function (data) {
                            // Photo cropped, resized and saved!
                            reloadPhoto(data.fileURI, data.photoID);
                            $('#crop-photo').slideUp('fast');
                            window.parent.closePopupUserPhoto();
                        },
                        error: function (xhr, er) {
                            alert('Sorry, there was an error setting-up your photo. ' + (er || ''));
                        }
                    });
                });

                setupCropPhoto();

                // Enable crop editor
                var $cp = $('#crop-photo');
                // If an image is loaded, show up the cropping tool
                function showEditorIfImage() {
                    var $img = $('#cropimg');

                    if ($img.height() > 30) {
                        $cp.show();
                        return true;
                    }
                    else {
                        $cp.hide();
                        $img
                        .one('load', showEditorIfImage)
                        .one('error', showEditorIfImage);
                        return false;
                    }
                }
                showEditorIfImage();
            });

            function setupCropPhoto() {
                // Setup img cropping
                var $img = $('#cropimg');
                $img.Jcrop({
                    onChange: showCoords,
                    onSelect: showCoords,
                    onRelease: clearCoords,
                    aspectRatio: $img.data('target-width') / $img.data('target-height')
                }, function () {
                    jcrop_api = this;
                    // Initial selection to show user that can choose an area
                    jcrop_api.setSelect([0, 0, $img.width(), $img.height()]);
                });

                return $img;
           } 
            // Simple event handler, called from onChange and onSelect
            // event handlers, as per the Jcrop invocation above
            function showCoords(c) {
                $('#x1').val(c.x);
                $('#y1').val(c.y);
                $('#x2').val(c.x2);
                $('#y2').val(c.y2);
                $('#w').val(c.w);
                $('#h').val(c.h);
            };

            function clearCoords() {
                $('#coords input').val('');
            };

            function showCropPhoto(photoURI) {

                var $p = $('#crop-photo');
                // Force image reload
                $p.find('img').attr('src', photoURI + "?v=" + (new Date()).getTime());

                $p.show();
                setupCropPhoto();
            }        
        </script>
    </head>
    <body>
        <div class="change-photo FileUploader">
            <div id="change-photo-file-uploader" class="FileUploader-uploader">
            </div>
            <div id="crop-photo" class="FileUploader-editor" style="display:none">
                <p>Please use the tool below to crop your photo</p>
                <img id="cropimg" data-target-width="@fixedSizeWidth" data-target-height="@fixedSizeHeight" alt="Edit photo" />
                <form action="@(LcUrl.LangPath)$dashboard/YourWork/UploadPhoto/" method="post">
                    <div id="coords">
                        <input type="hidden" id="x1" name="x1" />
                        <input type="hidden" id="y1" name="y1" />
                        <input type="hidden" id="x2" name="x2" />
                        <input type="hidden" id="y2" name="y2" />
                        <input type="hidden" id="w" name="w" />
                        <input type="hidden" id="h" name="h" />
                    </div>
                    <div class="actions">
                        <input type="hidden" name="crop-photo" value="True" />
                        <input type="submit" class="save-photo-action" value="Save photo changes" />
                    </div>
                </form>
            </div>
        </div>
    </body>
</html>