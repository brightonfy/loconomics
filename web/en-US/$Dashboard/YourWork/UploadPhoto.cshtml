@* Page being called as a Popup-iframe from your-work/photos to
    upload new provider photos to its personal folder.
 *@
@using WebMatrix.Data;
@using WebMatrix.WebData;
@functions{
    const int fixedSizeWidth = LcData.Photo.FixedSizeWidth;
    const int fixedSizeHeight = LcData.Photo.FixedSizeHeight;
}
@{
    LcHelpers.SecurePage();
    var userId = WebSecurity.CurrentUserId;
    var positionId = Request["PositionID"].AsInt();
    // This is only for Post uploads
    var uploadedFileURI = "";
    var photoID = 0;
    bool processed = false;
    
    string filePathInApp = "img/userphotos/u" + userId.ToString() + "/";
    string virtualPath = LcUrl.RenderAppPath + filePathInApp;
    // Automatic name for new photo
    string fileName = Guid.NewGuid().ToString().Replace("-", "");
    var uploadedFileName = "";
    
    var cropPhoto = Request["crop-photo"].AsBool();
    
    if (cropPhoto) {

        var photoURI = Request["photoURI"];
        photoID = Request["photoID"].AsInt();
        fileName = System.IO.Path.GetFileNameWithoutExtension(photoURI);

        var updatedImageName = LcData.Photo.UploadPhoto(Server.MapPath(virtualPath),
            fileName,
            (int)Math.Round(Request["crop-x1"].AsDecimal()), 
            (int)Math.Round(Request["crop-y1"].AsDecimal()),
            (int)Math.Round(Request["crop-w"].AsDecimal()),
            (int)Math.Round(Request["crop-h"].AsDecimal())
        );
        
        // NOTE: There is some issues with IE managing this result with contenttype=json
        // because of this, here we use directly the Json helper instead our helper
        //LcHelpers.ReturnJson(
        Json.Write(
            new Dictionary<string, object>(){
                { "success", "File was saved" }
                ,{ "fileURI", LcUrl.AppPath + filePathInApp + updatedImageName }
                ,{ "photoID", photoID }
                ,{ "updated", true }
            },
        Response.Output);
        Response.End();
    }
    else if (!String.IsNullOrEmpty(Request["qqfile"])){
        // qq File uploader support, XHR Upload

        // Old get actual name
        //string fileName = GetValidFileName((string)Request["qqfile"]);      

        // File name limit to 100 instead of database 2073 to avoid problems with the File I/O API. Being aware too
        // that the virtualPath is added to filename.
        if (fileName.Length > 100) {
            ModelState.AddFormError("File name must be lower than 100 characters.");
        } else {
            try{
                
                if (Request.InputStream.Length > 0) {
                    uploadedFileName = LcData.Photo.UploadEditablePhoto(Request.InputStream, Server.MapPath(virtualPath), fileName);
                } else {
                    // Emulate standard error, next its replaced by better message
                    ModelState.AddFormError("Maximum request length exceeded");
                }
                
                uploadedFileURI = LcUrl.AppPath + filePathInApp + uploadedFileName;
                
            } catch(Exception ex) {
                ModelState.AddFormError(ex.Message);
            }
        
            if (ModelState.IsValid) {
                // File saved, register it on the database:
                photoID = LcData.Photo.RegisterUserPhoto(uploadedFileName, userId, positionId);
            }
  
            processed = true;
        }
    } else if (IsPost){

        var fileuploaded = Request.Files["qqfile"] ?? Request.Files["avatar"];
            
        if (fileuploaded == null || String.IsNullOrEmpty(fileuploaded.FileName)) {
            ModelState.AddFormError("Please, select an image");
        }

        if (ModelState.IsValid) {
            // Old get actual name
            //string fileName = GetValidFileName(fileuploaded.FileName);
            
            try{
                
                if (Request.InputStream.Length > 0) {
                    uploadedFileName = LcData.Photo.UploadEditablePhoto(fileuploaded.InputStream, Server.MapPath(virtualPath), fileName);
                } else {
                    // Emulate standard error, next its replaced by better message
                    ModelState.AddFormError("Maximum request length exceeded");
                }
                
                uploadedFileURI = LcUrl.AppPath + filePathInApp + uploadedFileName;
                
            } catch(Exception ex) {
                ModelState.AddFormError(ex.Message);
            }

            if (ModelState.IsValid) {
                // File saved, register it on the database:
                photoID = LcData.Photo.RegisterUserPhoto(uploadedFileName, userId, positionId);
            }
        }
            
        processed = true;
    } else {
        // Manage normal GET
    }
    
    if (processed) {
        if (ModelState.IsValid) {

            // NOTE: There is some issues with IE managing this result with contenttype=json
            // because of this, here we use directly the Json helper instead our helper
            //LcHelpers.ReturnJson(
            Json.Write(
                new Dictionary<string, object>(){
                    { "success", "File was saved" }
                    ,{ "fileURI", uploadedFileURI }
                    ,{ "photoID", photoID }
                },
            Response.Output);
            Response.End();
                
            /*LcHelpers.ReturnJson(
                new Dictionary<string, object>(){
                    { "success", "File was saved" }
                    ,{ "fileURI", virtualPath + fileName }
                    ,{ "photoID", photoID }
                }
            );*/

        } else {

            var errMsg = String.Join("; ", ModelState.Values.First().Errors);
                
            // We don't want the ugly default asp.net message for file-size-exceeded
            // As of #454 (https://github.com/dani0198/Loconomics/issues/454#issuecomment-37782181)
            if (errMsg.Contains("Maximum request length exceeded")) {
                    
                var max = LcHelpers.GetMaxRequestSize();
                var printMax = "";
                if (max > 0) {
                    printMax = LcHelpers.PrettyFileSize(max * 1024);
                        
                    errMsg = "The file is too large, maximum file size is " + printMax;
                } else {
                    errMsg = "The file is too large";
                }
            }
                    
            // NOTE: IE problems with contentype=json, use JsonHelper directly:
            //LcHelpers.ReturnJson(
            Json.Write(
                new Dictionary<string, object>(){
                    { "error", LcRessources.GetText("an-error", errMsg) }
                },
                Response.Output);
            Response.End();
        }
    }
}
@{
    // Main assets that allow minification
    var styleCss = "Styles/common";
    var loadScripts = new List<string>();
    // Enabled only on dev
    if (LcHelpers.InDev) {
        loadScripts.Add("libs.js");
        loadScripts.Add("app.js");
        styleCss += ".css";
    } else {
        loadScripts.Add("common.min.js");
        styleCss += ".min.css";
    }
    
    int sizeLimit = LcHelpers.GetMaxRequestSize() * 1024;
    // DEBUG: forcing no limit to debug server response on 'maximum request size exceded' error
    //sizeLimit = 0;
}
<html data-position-id="@positionId" data-size-limit="@sizeLimit">
    <head>
        @*
        <script src="@Href(LcUrl.AppPath + "Scripts/jquery/jquery-1.7.2.min.js")" type="text/javascript"></script>
        <script src="@Href(LcUrl.AppPath + "Scripts/jquery/jquery-ui-1.8.21.custom.min.js")" type="text/javascript"></script>
        <link rel="stylesheet" href="@Href(LcUrl.AppPath + "Styles/smoothness/jquery-ui-1.8.21.custom.css")"/>

            Jquery and jquery-ui are already in common.min.js, and we reuse that because is already cached by the client browser.
        *@
        @LcAssets.PrintStyleTag(LcUrl.AppPath + styleCss)
        @foreach (var js in loadScripts)
        {
            @LcAssets.PrintScriptTag(LcUrl.AppPath + "Scripts/" + js)
        }

        <script type="text/javascript">
            @Html.Raw(LcUrl.ToJsVar())
        </script>
        <style type="text/css">
            html:after,
            html:before {
                display: none;
            }
            body {
                font-family: "Alte Haas Grotesk", Helvetica, Arial, sans-serif;
                padding: 1em;
            }
            #cropimg {
                max-width: 100%;
            }
        </style>

        <script type="text/javascript">
            jQuery(function () { window.parent.initUploadPhoto(document) });
        </script>
    </head>
    <body>
        <div class="change-photo FileUploader">
            <div id="change-photo-file-uploader" class="FileUploader-uploader">
            </div>
            <div id="crop-photo" class="FileUploader-editor" style="display:none">
                <p>Please use the tool below to crop your photo</p>
                <img id="cropimg" data-target-width="@fixedSizeWidth" data-target-height="@fixedSizeHeight" alt="Edit photo" />
                <form action="@(LcUrl.LangPath)$dashboard/YourWork/UploadPhoto/" method="post">
                    <div id="coords">
                        <input type="hidden" id="x1" name="x1" />
                        <input type="hidden" id="y1" name="y1" />
                        <input type="hidden" id="x2" name="x2" />
                        <input type="hidden" id="y2" name="y2" />
                        <input type="hidden" id="w" name="w" />
                        <input type="hidden" id="h" name="h" />
                    </div>
                    <div class="actions">
                        <input type="hidden" name="crop-photo" value="True" />
                        <input type="hidden" name="photoURI" value="" />
                        <input type="hidden" name="photoID" value="" />
                        <input type="submit" class="save-photo-action" value="Save photo changes" />
                    </div>
                </form>
            </div>
        </div>
    </body>
</html>