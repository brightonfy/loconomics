@* AJAX Page for POST request to upload and crop photos
    to the user profile.
 *@
@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    LcHelpers.SecurePage();
    var userId = WebSecurity.CurrentUserId;
    var positionId = Request["PositionID"].AsInt();
    // This is only for Post uploads
    var uploadedFileURI = "";
    var photoID = 0;
    bool processed = false;
    
    string filePathInApp = "img/userphotos/u" + userId.ToString() + "/";
    string virtualPath = LcUrl.RenderAppPath + filePathInApp;
    // Automatic name for new photo
    string fileName = Guid.NewGuid().ToString().Replace("-", "");
    var uploadedFileName = "";
    
    var cropPhoto = Request["crop-photo"].AsBool();
    
    if (cropPhoto) {

        var photoURI = Request["photoURI"];
        photoID = Request["photoID"].AsInt();
        fileName = System.IO.Path.GetFileNameWithoutExtension(photoURI);

        var updatedImageName = LcData.Photo.UploadPhoto(Server.MapPath(virtualPath),
            fileName,
            (int)Math.Round(Request["crop-x1"].AsDecimal()), 
            (int)Math.Round(Request["crop-y1"].AsDecimal()),
            (int)Math.Round(Request["crop-w"].AsDecimal()),
            (int)Math.Round(Request["crop-h"].AsDecimal())
        );
        
        // NOTE: There is some issues with IE managing this result with contenttype=json
        // because of this, here we use directly the Json helper instead our helper
        //LcHelpers.ReturnJson(
        Json.Write(
            new Dictionary<string, object>(){
                { "success", "File was saved" }
                ,{ "fileURI", LcUrl.AppPath + filePathInApp + updatedImageName }
                ,{ "photoID", photoID }
                ,{ "updated", true }
            },
        Response.Output);
        Response.End();
    }
    else if (!String.IsNullOrEmpty(Request["qqfile"])){
        // qq File uploader support, XHR Upload

        // Old get actual name
        //string fileName = GetValidFileName((string)Request["qqfile"]);      

        // File name limit to 100 instead of database 2073 to avoid problems with the File I/O API. Being aware too
        // that the virtualPath is added to filename.
        if (fileName.Length > 100) {
            ModelState.AddFormError("File name must be lower than 100 characters.");
        } else {
            try{
                
                if (Request.InputStream.Length > 0) {
                    uploadedFileName = LcData.Photo.UploadEditablePhoto(Request.InputStream, Server.MapPath(virtualPath), fileName);
                } else {
                    // Emulate standard error, next its replaced by better message
                    ModelState.AddFormError("Maximum request length exceeded");
                }
                
                uploadedFileURI = LcUrl.AppPath + filePathInApp + uploadedFileName;
                
            } catch(Exception ex) {
                ModelState.AddFormError(ex.Message);
            }
        
            if (ModelState.IsValid) {
                // File saved, register it on the database:
                photoID = LcData.Photo.RegisterUserPhoto(uploadedFileName, userId, positionId);
            }
  
            processed = true;
        }
    } else if (IsPost){

        var fileuploaded = Request.Files["qqfile"] ?? Request.Files["avatar"];
            
        if (fileuploaded == null || String.IsNullOrEmpty(fileuploaded.FileName)) {
            ModelState.AddFormError("Please, select an image");
        }

        if (ModelState.IsValid) {
            // Old get actual name
            //string fileName = GetValidFileName(fileuploaded.FileName);
            
            try{
                
                if (Request.InputStream.Length > 0) {
                    uploadedFileName = LcData.Photo.UploadEditablePhoto(fileuploaded.InputStream, Server.MapPath(virtualPath), fileName);
                } else {
                    // Emulate standard error, next its replaced by better message
                    ModelState.AddFormError("Maximum request length exceeded");
                }
                
                uploadedFileURI = LcUrl.AppPath + filePathInApp + uploadedFileName;
                
            } catch(Exception ex) {
                ModelState.AddFormError(ex.Message);
            }

            if (ModelState.IsValid) {
                // File saved, register it on the database:
                photoID = LcData.Photo.RegisterUserPhoto(uploadedFileName, userId, positionId);
            }
        }
            
        processed = true;
    }
    
    if (processed) {
        if (ModelState.IsValid) {

            // NOTE: There is some issues with IE managing this result with contenttype=json
            // because of this, here we use directly the Json helper instead our helper
            //LcHelpers.ReturnJson(
            Json.Write(
                new Dictionary<string, object>(){
                    { "success", "File was saved" }
                    ,{ "fileURI", uploadedFileURI }
                    ,{ "photoID", photoID }
                },
            Response.Output);
            Response.End();
                
            /*LcHelpers.ReturnJson(
                new Dictionary<string, object>(){
                    { "success", "File was saved" }
                    ,{ "fileURI", virtualPath + fileName }
                    ,{ "photoID", photoID }
                }
            );*/

        } else {

            var errMsg = String.Join("; ", ModelState.Values.First().Errors);
                
            // We don't want the ugly default asp.net message for file-size-exceeded
            // As of #454 (https://github.com/dani0198/Loconomics/issues/454#issuecomment-37782181)
            if (errMsg.Contains("Maximum request length exceeded")) {
                    
                var max = LcHelpers.GetMaxRequestSize();
                var printMax = "";
                if (max > 0) {
                    printMax = LcHelpers.PrettyFileSize(max * 1024);
                        
                    errMsg = "The file is too large, maximum file size is " + printMax;
                } else {
                    errMsg = "The file is too large";
                }
            }
                    
            // NOTE: IE problems with contentype=json, use JsonHelper directly:
            //LcHelpers.ReturnJson(
            Json.Write(
                new Dictionary<string, object>(){
                    { "error", LcRessources.GetText("an-error", errMsg) }
                },
                Response.Output);
            Response.End();
        }
    }
}
