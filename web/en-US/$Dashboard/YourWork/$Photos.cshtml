@* Licenses and professional certifications
*@
@{
    LcHelpers.SecurePage();
    
    //var u = LcData.UserInfo.GetUserRow();
    int userID = WebSecurity.CurrentUserId;
    var PageState = PageData["PageState"] ?? ModelState;
    var subform = Request["subform"].AsBool();
    var doReturn = PageState == ModelState && !subform;
    int positionID = PageData["PositionID"] ?? Request["PositionID"].AsInt();
    var result = Request["result"] ?? ""; // Could be: empty, "json"
    var action = Request["action"] ?? ""; // Could be: empty, "order", "save-photo". "delete" is implicit when delete-photo is True
    
    var isInOnboarding = (bool)(PageData["IsInOnboarding"] ?? false);

    string photosFolder = LcData.Photo.GetUserPhotoFolder(userID);
    Validation.Add("photo-caption", Validator.StringLength(50, 0, "Photo caption must be fewer than 50 characters."));

    if (IsPost) {
        
        using (var db = Database.Open("sqlloco")) {
            
            var delete = Request["delete-photo"].AsBool();
            var photoID = Request["PhotoID"].AsInt();
            if (delete) {

                if (LcData.Photo.DeletePhoto(photoID, userID, positionID, Server.MapPath(LcUrl.RenderAppPath))) {
                    if (result == "json") {
                        LcHelpers.ReturnJsonResult(0, "Deleted");
                    }
                }
                else {
                    if (result == "json") {
                        LcHelpers.ReturnJsonError(-1, "Photo file could not be deleted");
                    }
                    throw new Exception("Photo file could not be deleted");   
                }

            } else if (action == "" || action == "save-photo") {
                
                var caption = Request["photo-caption"];
                var isPrimary = Request["is-primary-photo"].AsBool();
        
                LcData.Photo.SaveDbPhoto(photoID, caption, isPrimary, userID, positionID);
            }

            if (action == "" || action == "order") {
                // Indiferent if we are on 'delete' task or 'update details', we try to save the photo gallery
                // order (RankPosition field on database) if there are data about it
                var galleryOrder = Request["gallery-order"];
                if (!String.IsNullOrEmpty(galleryOrder)) {

                    LcData.Photo.SavePhotosOrder(galleryOrder, userID, positionID);
                }
            }
            
            if (result == "json") {
                LcHelpers.ReturnJsonResult(0, "Saved");
            }
            
            // If is delete task, return html to refresh page,
            // because of that only return a JSON if is not delete:
            if (!delete && doReturn) {
                LcHelpers.ReturnJsonResult(5, LcRessources.ShortDataSaved);
            }
        }
    }
    
    dynamic photos = LcData.Photo.GetUserPositionPhotos(userID, positionID);
    
    var n = positionID;
    var formAction = LcUrl.LangPath + "$dashboard/YourWork/$Photos/?subform=true&PositionID=" + positionID;
}

<p class="DashboardSection-page-section-introduction">
    Nothing like a glossy photo. Images of your hard work help clients visualize what, exactly, you provide.
    Upload some shots here by dragging and dropping them in the order you’d like.
</p>
<p>
    Upload photos of 1600 x 1200 resolution or higher, with file sizes no larger than 2 MB.
</p>

    <fieldset class="DashboardPhotos ajax ajax-box" data-ajax-fieldset-action="@(formAction)" data-reload-mode="replace-content" @Html.Raw(isInOnboarding ? "data-instant-saving='true'" : "")>
        @* Quick&Dirty solution for the fieldset.ajax.submit using a hidden button, for the 'delete' photo task: *@
        <input type="submit" class="ajax-fieldset-submit" value="" style="display:none" />

        <input type="hidden" name="gallery-order" value=""/>
        <div id="position[@n]photos-no-photos" class="no-photos">
            <span class="positionphotos-tools-upload">Start by uploading a photo!</span>
        </div>
        <div id="position[@n]photos-no-primary-photo" class="no-primary-photo">
            Select a photo from the right as your primary photo.
        </div>
        <fieldset class="DashboardPhotos-editPhoto" data-size-limit="@(LcData.Photo.GetFileSizeLimit())">
            <legend>Edit this photo using the crop tool below:</legend>
            <div class="positionphotos-edit">
                <input type="hidden" name="PhotoID" value="" />
                <input type="hidden" name="photoURI" value="" />
                <input type="hidden" name="crop-x1" />
                <input type="hidden" name="crop-y1" />
                <input type="hidden" name="crop-x2" />
                <input type="hidden" name="crop-y2" />
                <input type="hidden" name="crop-w" />
                <input type="hidden" name="crop-h" />
                <ul>
                    <li class="positionphotos-edit-photo"><img data-target-width="@LcData.Photo.FixedSizeWidth" data-target-height="@LcData.Photo.FixedSizeHeight" alt="Photo to edit" src="@(LcUrl.AppPath)img/theme/user-photo-no-selected-442x332.png" /></li>
                    <li class="positionphotos-edit-caption">
                        <label for="position#@(n)-photos-edit-caption">Caption:</label>
                        <input type="text" id="position#@(n)-photos-edit-caption" name="photo-caption"/>
                    </li>
                    <li class="positionphotos-edit-primary">
                        <h6>Make primary photo?</h6>
                        <label>Yes<input type="radio" name="is-primary-photo" value="True"/></label>
                        <label>No<input type="radio" name="is-primary-photo" value="False"/></label>
                    </li>
                    <li class="photo-tools">
                        <input type="button" class="DashboardPhotos-editPhoto-save" value="Save photo changes" />
                        <a href="#delete-photo" class="DashboardPhotos-editPhoto-delete">Delete this photo</a>
                    </li>
                </ul>
            </div>
            <div class="FileUploader FileUploader--hideSuccess">
                <div class="FileUploader-uploader"></div>
            </div>
        </fieldset>
        <fieldset class="positionphotos-gallery">
            <legend>Stored photos:</legend>
            <ol>
                @foreach (var photo in photos)
                {
                    <li id="UserPhoto-@photo.ProviderServicePhotoID" class="@(photo.IsPrimaryPhoto ? "selected is-primary-photo" : "")"><a href="#edit-photo"><img alt="@photo.PhotoCaption" src="@(LcUrl.AppPath + photosFolder + photo.PhotoAddress)"/></a><a class="edit" href="#">Edit</a></li>
                }
            </ol>
        </fieldset>
        <fieldset class="positionphotos-tools">
            <ul>
                <li class="positionphotos-tools-arrange">To arrange photos, drag and drop them in the order you'd like.</li>
            </ul>
        </fieldset>
    </fieldset>
