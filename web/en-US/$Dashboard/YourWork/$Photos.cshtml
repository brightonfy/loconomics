@* Licenses and professional certifications
*@
@{
    LcHelpers.SecurePage();
    
    //var u = LcData.UserInfo.GetUserRow();
    int userID = WebSecurity.CurrentUserId;
    var PageState = PageData["PageState"] ?? ModelState;
    var subform = Request["subform"].AsBool();
    var doReturn = PageState == ModelState && !subform;
    int positionID = PageData["PositionID"] ?? Request["PositionID"].AsInt();
    var result = Request["result"] ?? ""; // Could be: empty, "json"
    var action = Request["action"] ?? ""; // Could be: empty, "order", "save-photo". "delete" is implicit when delete-photo is True
    
    var isInOnboarding = (bool)(PageData["IsInOnboarding"] ?? false);

    string photosFolder = "img/userphotos/u" + userID.ToString() + "/";
    Validation.Add("photo-caption", Validator.StringLength(50, 0, "Photo caption must be fewer than 50 characters."));

    if (IsPost) {
        
        using (var db = Database.Open("sqlloco")) {
            
            var delete = Request["delete-photo"].AsBool();
            var photoID = Request["PhotoID"].AsInt();
            if (delete) {
                // Delete file from database, checking if exist more than one record
                // using the same image file, returning the PhotoAddress when there is
                // no more records sharing that address, and 'empty string' when there is more and
                // cannot be removed (without know the address, cannot be removed ;-)
                string photoAddress = db.QueryValue(@"
                    DECLARE @PhotoID int
                    SET @PhotoID = @0

                    -- Retrieving the PhotoAddress
                    DECLARE @address varchar(2073)
                    SELECT  @address = PhotoAddress
                    FROM    ProviderServicePhoto
                    WHERE   ProviderServicePhotoID = @PhotoID
                             AND UserID = @1 AND PositionID = @2

                    DELETE FROM ProviderServicePhoto WHERE ProviderServicePhotoID = @PhotoID
                            AND UserID = @1 AND PositionID = @2

                    -- Test Alert
                    EXEC TestAlertShowcaseWork @1, @2

                    -- Checking if there are more records with the same file, or returning the address
                    IF 0 = (SELECT  count(*)
                            FROM    ProviderServicePhoto
                            WHERE   PhotoAddress like @address
                                    AND UserID = @1 AND PositionID = @2)
                        SELECT coalesce(@address, '') As PhotoAddress
                    ELSE
                        SELECT '' As PhotoAddress
                ", photoID, userID, positionID);
                
                if (!String.IsNullOrEmpty(photoAddress)) {
                    // Remove file from user folder
                    try {
                        // There are several files for the same photo, with suffixes for different
                        // sizes and optimizations: delete all of them
                        var fileName = LcUtils.GetNameWithoutSuffix(photoAddress);
                        var sysFolder = Server.MapPath(LcUrl.RenderAppPath + photosFolder);
                        // Delete the original file, no suffix
                        File.Delete(sysFolder + fileName + ".jpg");
                        // Delete all files with suffix.
                        // File.Delete doesn't allow wildcards, find and delete each one
                        foreach (var f in Directory.GetFiles(sysFolder, fileName + "-*", SearchOption.TopDirectoryOnly)) {
                            File.Delete(f);
                        }
                    }catch{
                        if (result == "json") {
                            LcHelpers.ReturnJsonError(-1, "Photo file could not be deleted");
                        }
                        throw new Exception("Photo file could not be deleted");
                    }
                    if (result == "json") {
                        LcHelpers.ReturnJsonResult(0, "Deleted");
                    }
                }

            } else if (action == "" || action == "save-photo") {
                
                var caption = Request["photo-caption"];
                var isPrimary = Request["is-primary-photo"].AsBool();
        
                db.Execute(@"
                    IF @2 = 1 BEGIN
                        UPDATE ProviderServicePhoto SET
                            IsPrimaryPhoto = 0
                        WHERE   UserID = @3 AND PositionID = @4
                    END

                    UPDATE ProviderServicePhoto SET
                        PhotoCaption = @1
                        ,IsPrimaryPhoto = @2
                    WHERE   ProviderServicePhotoID = @0 AND UserID = @3 AND PositionID = @4

                    -- Test Alert
                    EXEC TestAlertShowcaseWork @3, @4
                ", photoID, caption, isPrimary, userID, positionID);
            }

            if (action == "" || action == "order") {
                // Indiferent if we are on 'delete' task or 'update details', we try to save the photo gallery
                // order (RankPosition field on database) if there are data about it
                var galleryOrder = Request["gallery-order"];
                if (!String.IsNullOrEmpty(galleryOrder)) {
                    // Comma separated values with the html element IDs that have the format 'UserPhoto-PHOTOID'
                    // where PHOTOID is a number with the database record ID.
                    // Reading that order and sending to the server
                    int orderIndex = 0;
                    foreach (var go in galleryOrder.Split(',')) {
                        // If we have a valid ID (integer number)
                        var goID = go.Replace("UserPhoto-", "").AsInt();
                        // Only if is a valid ID and if is not the ID of a just deleted photo
                        if (goID > 0 &&
                            !(delete && photoID == goID)) {
                            // Save order to the database
                            db.Execute(@"
                                UPDATE  ProviderServicePhoto
                                SET     RankPosition = @1
                                WHERE   ProviderServicePhotoID = @0
                            ", goID, ++orderIndex);
                        }
                    }
                }
            }
            
            if (result == "json") {
                LcHelpers.ReturnJsonResult(0, "Saved");
            }
            
            // If is delete task, return html to refresh page,
            // because of that only return a JSON if is not delete:
            if (!delete && doReturn) {
                LcHelpers.ReturnJsonResult(5, LcRessources.ShortDataSaved);
            }
        }
    }
    
    dynamic photos = null;
    using (var db = Database.Open("sqlloco")) {
        photos = db.Query(@"
            SELECT [ProviderServicePhotoID]
                  ,[PhotoCaption]
                  ,[PhotoAddress]
                  ,[IsPrimaryPhoto]
              FROM [providerservicephoto]
              WHERE UserID = @0 AND PositionID = @1 AND Active = 1
              ORDER BY RankPosition
        ", userID, positionID);
    }
    
    var n = positionID;
    var formAction = LcUrl.LangPath + "$dashboard/YourWork/$Photos/?subform=true&PositionID=" + positionID;
}

<p class="DashboardSection-page-section-introduction">
    Nothing like a glossy photo. Images of your hard work help clients visualize what, exactly, you provide.
    Upload some shots here by dragging and dropping them in the order you’d like.
</p>
<p>
    Upload photos of 1600 x 1200 resolution or higher, with file sizes no larger than 2 MB.
</p>

    <fieldset class="DashboardPhotos ajax ajax-box" data-ajax-fieldset-action="@(formAction)" data-reload-mode="replace-content" @Html.Raw(isInOnboarding ? "data-instant-saving='true'" : "")>
        @* Quick&Dirty solution for the fieldset.ajax.submit using a hidden button, for the 'delete' photo task: *@
        <input type="submit" class="ajax-fieldset-submit" value="" style="display:none" />

        <input type="hidden" name="gallery-order" value=""/>
        <div id="position[@n]photos-no-photos" class="no-photos">
            <span class="positionphotos-tools-upload">Start by <a href="#upload-photo">uploading</a> a photo!</span>
        </div>
        <div id="position[@n]photos-no-primary-photo" class="no-primary-photo">
            Select a photo from the right as your primary photo.
        </div>
        <fieldset class="positionphotos-edit">
            <legend>Edit this photo:</legend>
            <input type="hidden" name="PhotoID" value="" />
            <ul>
                <li class="positionphotos-edit-photo"><img alt="Photo to edit" src="@(LcUrl.AppPath)img/theme/user-photo-no-selected.png" /></li>
                <li class="positionphotos-edit-caption">
                    <label for="position#@(n)-photos-edit-caption">Caption:</label>
                    <input type="text" id="position#@(n)-photos-edit-caption" name="photo-caption"/>
                </li>
                <li class="positionphotos-edit-primary">
                    <h6>Make primary photo?</h6>
                    <label>Yes<input type="radio" name="is-primary-photo" value="True"/></label>
                    <label>No<input type="radio" name="is-primary-photo" value="False"/></label>
                </li>
                <li class="positionphotos-edit-delete">
                    <a href="#delete-photo">Delete this photo</a>
                    <input type="hidden" name="delete-photo" value="False" />
                </li>
            </ul>
        </fieldset>
        <fieldset class="positionphotos-gallery">
            <legend>Stored photos:</legend>
            <ol>
                @foreach (var photo in photos)
                {
                    <li id="UserPhoto-@photo.ProviderServicePhotoID" class="@(photo.IsPrimaryPhoto ? "selected is-primary-photo" : "")"><a href="#edit-photo"><img alt="@photo.PhotoCaption" src="@(LcUrl.AppPath + photosFolder + photo.PhotoAddress)"/></a><a class="edit" href="#">Edit</a></li>
                }
            </ol>
        </fieldset>
        <fieldset class="positionphotos-tools">
            <ul>
                <li class="positionphotos-tools-upload"><a href="#" class="action">Upload photos</a></li>
                <li class="positionphotos-tools-arrange">To arrange photos, drag and drop them in the order you'd like and click save.</li>
            </ul>
        </fieldset>
    </fieldset>
