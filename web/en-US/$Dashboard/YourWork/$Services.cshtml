@using WebMatrix.Data;
@{
    LcHelpers.SecurePage();
    
    var u = LcData.UserInfo.GetUserRow();
    var PageState = PageData["PageState"] ?? ModelState;
    var doReturn = PageState == ModelState;
    var pos = PageData["Position"] ?? LcData.UserInfo.GetUserPos((int)u.UserID, Request["PositionID"].AsInt());
    
    if (pos == null) {
        return;
    }
    
    var requiredAttCatError = "\"{0}\" requires at least one selection";
    
    var isInOnboarding = (bool)(PageData["IsInOnboarding"] ?? false);
    
    var idprefix = "position-" + pos.PositionID + "-services";
    
    var tplAttName = "positionservices-category[{0}]-attribute[{1}]";
    var tplCatName = "positionservices-category[{0}]";
    
    var specialCatIDs = LcData.SpecialServicesAttCats;
    var dataCats = LcData.GetServiceCatsAndItsAttributes(pos.PositionID, "provider-services-without-virtual-cats", pos.UserID);
    
    if (Validation.GetHtml("position-intro") == null) {
        Validation.Add("position-intro", Validator.StringLength(2000, 0, "Position introduction must be fewer than 2000 characters"));
    }
    
    // Custom validations
    if (IsPost && (Validation.IsValid() || isInOnboarding)) {
        
        // Check that there is almost one value for required categories, or show error
        foreach(var cat in dataCats) {
            
            if (cat.Value["RequiredInput"]) {
                var hasOne = false;
                
                foreach (var att in cat.Value["ServiceAttributes"]) {
                
                    bool wasChecked = (Request[String.Format(tplAttName, cat.Key, att.ServiceAttributeID)] != null);
                    if (wasChecked) {
                        hasOne = true;
                        break;
                    }
                }
                
                if (!hasOne) {
                    PageState.AddFormError(String.Format(requiredAttCatError, cat.Value["ServiceAttributeCategoryName"]));
                }
            }
        }
        
        // Since ExperienceLevel is not a service category anymore else an independent table, we need
        // specific code to save its data.
        var selExpLevel = Request[String.Format(tplCatName, LcData.ServiceAttCatIDExperienceLevel) + "-level"];
        if (String.IsNullOrEmpty(selExpLevel)) {
            PageState.AddFormError(String.Format(requiredAttCatError, LcRessources.GetText("Experience Level")));
        }
    }
    
    // In onboarding, save all time since we need 'instant saving' #524
    // (validation errors are still returned when is not valid but in onboarding)
    if (IsPost && (PageState.IsValid || isInOnboarding)) {      
        using (var db = Database.Open("sqlloco"))
        {
            // Save position-intro
            db.Execute(sqlSetPosIntro, pos.UserID, pos.PositionID, Request["position-intro"]);
            
            // Iterate categories and attributes, save what are checked and remove what not
            foreach (var cat in dataCats) {
                switch ((int)cat.Key) {
                    // Simple Check attributes:
                    default:
                        foreach (var att in cat.Value["ServiceAttributes"]) {
                            // Check if selection changes
                            bool wasChecked = (Request[String.Format(tplAttName, cat.Key, att.ServiceAttributeID)] != null);
                            // We check previous value with current to avoid do unneeded Database calls
                            // Except for Language to save the Language Level, we need do it anyway
                            if (att.UserChecked != wasChecked || (int)cat.Key == LcData.ServiceAttCatIDLanguages) {
                                // Value changed, update database
                                if (wasChecked) {
                                    // Set record (insert or update)
                                    db.Execute(sqlSetAttribute, pos.UserID, pos.PositionID, att.ServiceAttributeCategoryID, att.ServiceAttributeID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
                                    //saveLevelIfLanguage(db, cat, att.ServiceAttributeID, pos, tplAttName);
                                } else {
                                    // Delete record
                                    db.Execute(sqlDelAttribute, pos.UserID, pos.PositionID, att.ServiceAttributeCategoryID, att.ServiceAttributeID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
                                    //delLevelIfLanguage(db, cat, att.ServiceAttributeID, pos, tplAttName);
                                }
                            }
                        }
                        break;
                }
            }
            
            // Since ExperienceLevel is not a service category anymore else an independent table, we need
            // specific code to save its data.
            var selExpLevel = Request[String.Format(tplCatName, LcData.ServiceAttCatIDExperienceLevel) + "-level"];
            if (!String.IsNullOrEmpty(selExpLevel)) {
                db.Execute(sqlSetExpLevel, pos.UserID, pos.PositionID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID(),
                    selExpLevel);
            } else {
                db.Execute(sqlDelExpLevel, pos.UserID, pos.PositionID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
            }
            
            // New attributes added by the provider:
            // Iterate categories, for each will be a multi-value key for attID:0
            foreach (var cat in dataCats) {
                var newAttNames = Request.Form.GetValues(String.Format(tplAttName, cat.Key, 0));
                if (newAttNames != null) {
                    foreach (string newAttName in newAttNames) {
                        if (String.IsNullOrWhiteSpace(newAttName)) {
                            continue;
                        }
                        // Register new attribute
                        int serviceAttributeID = db.QueryValue(sqlRegisterNewAttribute,
                            LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID(),
                            null,
                            newAttName.Capitalize(),
                            null,
                            pos.PositionID,
                            u.UserID,
                            0,
                            cat.Key
                        );
                        // Set record (insert or update)
                        db.Execute(sqlSetAttribute, pos.UserID, pos.PositionID, cat.Key, serviceAttributeID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
                        //saveLevelIfLanguage(db, cat, serviceAttributeID, pos, tplAttName);
                    }
                }
            }

            // Check alert
            db.Execute("EXEC TestAlertPositionServices @0, @1", pos.UserID, pos.PositionID);
            
            try{
                // Check request-more-attributes and send email to loconomics if there is something
                if (!Request.Form["request-more-attributes"].IsEmpty()) {
                        LcMessaging.SendMail("providerhelp@loconomics.com",
                        "[Action Required] Provider request more service attributes",
                        LcMessaging.ApplyTemplate(LcUrl.LangPath + "Email/EmailRequestMoreServiceAttributes/",
                            new Dictionary<string, object> { 
                                { "ProviderUserID", pos.UserID },
                                { "PositionID", pos.PositionID },
                                { "RequestedAttributes", Request.Form["request-more-attributes"] }
                    }));
                }
            } catch {}
        }
            
        if (doReturn && PageState.IsValid) {
            LcHelpers.ReturnJsonResult(5, LcRessources.ShortDataSaved);
        }
        
        // We must show data but some of them were changed, we need load it again
        dataCats = LcData.GetServiceCatsAndItsAttributes(pos.PositionID, "provider-services-without-virtual-cats", pos.UserID);
    }
    
    /* Language Levels */
    dynamic langLevels = LcData.GetLanguageLevels();
    var userLangLevels = LcData.GetUserLanguageLevels(pos.UserID, pos.PositionID);
    /* Experience Levels */
    dynamic expLevels = LcData.GetExperienceLevels(pos.UserID, pos.PositionID);   
}
@functions {
    const string reqCatClass = "is-required";

    void saveLevelIfLanguage(Database db, dynamic cat, int serviceAttributeID, dynamic pos, string tplAttName) {
        if ((int)cat.Key == LcData.ServiceAttCatIDLanguages) {
            // If is language, we must save the Language Level value too
            // name: positionservices-category[@(cat["ServiceAttributeCategoryID"])-attribute[@(att.ServiceAttributeID)]-level
            var langlevel = Request[String.Format(tplAttName, cat.Key, serviceAttributeID) + "-level"];
            db.Execute(sqlSetLangLevel,
                pos.UserID,
                pos.PositionID,
                serviceAttributeID,
                LcData.GetCurrentLanguageID(),
                LcData.GetCurrentCountryID(),
                langlevel
            );
        }
    }
    void delLevelIfLanguage(Database db, dynamic cat, int serviceAttributeID, dynamic pos, string tplAttName) {
        if ((int)cat.Key == LcData.ServiceAttCatIDLanguages) {
            db.Execute(sqlDelLangLevel, pos.UserID, pos.PositionID, serviceAttributeID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
        }
    }
    
    // SQLs
    const string sqlRegisterNewAttribute = @"
        -- Create attribute
        DECLARE @attID int
        SELECT @attID = (max(serviceattributeid) + 1) from serviceattribute
        INSERT INTO [serviceattribute]
            ([ServiceAttributeID]
            ,[LanguageID]
            ,[CountryID]
            ,[SourceID]
            ,[Name]
            ,[ServiceAttributeDescription]
            ,[CreateDate]
            ,[UpdatedDate]
            ,[ModifiedBy]
            ,[Active]
            ,[DisplayRank]
            ,[PositionReference]
            ,[EnteredByUserID]
            ,[Approved])
        VALUES
            (@attID
            ,@0 --<LanguageID, int,>
            ,@1 --<CountryID, int,>
            ,@2 --<SourceID, int,>
            ,@3 --<Name, varchar(100),>
            ,@4 --<ServiceAttributeDescription, varchar(2000),>
            ,getdate() --<CreateDate, datetime,>
            ,getdate() --<UpdatedDate, datetime,>
            ,'sys' --<ModifiedBy, varchar(45),>
            ,1 --<Active, bit,>
            ,1 --<DisplayRank, int,>
            ,@5 --<PositionReference, int,>
            ,@6 --<EnteredByUserID, int,>
            ,@7 --<Approved, bit,>
        )

        -- Link attribute with category and position
        INSERT INTO [servicecategorypositionattribute]
            ([PositionID]
            ,[ServiceAttributeCategoryID]
            ,[ServiceAttributeID]
            ,[LanguageID]
            ,[CountryID]
            ,[CreateDate]
            ,[UpdatedDate]
            ,[ModifiedBy]
            ,[Active]
            ,[EnteredByUserID]
            ,[Approved])
        VALUES
            (@5
            ,@8
            ,@attID
            ,@0
            ,@1
            ,getdate()
            ,getdate()
            ,'sys'
            ,1
            ,@6
            ,@7
        )

        -- Return ID
        SELECT @attID ServiceAttributeID
    ";
    const string sqlSetPosIntro = @"
        UPDATE  UserProfilePositions
        SET     PositionIntro = @2
        WHERE   UserID = @0 AND PositionID = @1
    ";
    const string sqlSetAttribute = @"
        BEGIN TRAN
            UPDATE  userprofileserviceattributes WITH (serializable)
            SET     Active = 1,
                    UpdatedDate = getdate(),
                    ModifiedBy = 'sys'
            WHERE   UserId = @0 AND PositionID = @1
                        AND ServiceAttributeCategoryID = @2
                        AND ServiceAttributeID = @3
                        AND LanguageID = @4 AND CountryID = @5

            IF @@rowcount = 0
            BEGIN
                INSERT INTO userprofileserviceattributes (UserID,
                    PositionID, ServiceAttributeCategoryID, ServiceAttributeID, LanguageID, CountryID, CreateDate, UpdatedDate, 
                    ModifiedBy, Active)
                VALUES (@0, @1, @2, @3, @4, @5, getdate(), getdate(), 'sys', 1)
            END
        COMMIT TRAN
    ";
    const string sqlDelAttribute = @"
        DELETE FROM userprofileserviceattributes
        WHERE       UserID = @0 AND PositionID = @1
                        AND ServiceAttributeCategoryID = @2
                        AND ServiceAttributeID = @3
                        AND LanguageID = @4 AND CountryID = @5
    ";
    const string sqlSetLangLevel = @"
        BEGIN TRAN
            UPDATE  ServiceAttributeLanguageLevel WITH (serializable)
            SET     LanguageLevelID = @5,
                    UpdatedDate = getdate(),
                    ModifiedBy = 'sys'
            WHERE   UserId = @0 AND PositionID = @1
                        AND ServiceAttributeID = @2
                        AND LanguageID = @3 AND CountryID = @4

            IF @@rowcount = 0
            BEGIN
                INSERT INTO ServiceAttributeLanguageLevel (UserID,
                    PositionID, ServiceAttributeID, LanguageID, CountryID, LanguageLevelID,
                    CreatedDate, UpdatedDate, ModifiedBy)
                VALUES (@0, @1, @2, @3, @4, @5, getdate(), getdate(), 'sys')
            END
        COMMIT TRAN
    ";
    const string sqlDelLangLevel = @"
        DELETE FROM ServiceAttributeLanguageLevel
        WHERE   UserId = @0 AND PositionID = @1
                        AND ServiceAttributeID = @2
                        AND LanguageID = @3 AND CountryID = @4
    ";
    const string sqlSetExpLevel = @"
        BEGIN TRAN
            UPDATE  ServiceAttributeExperienceLevel WITH (serializable)
            SET     ExperienceLevelID = @4,
                    UpdatedDate = getdate(),
                    ModifiedBy = 'sys'
            WHERE   UserId = @0 AND PositionID = @1
                        AND LanguageID = @2 AND CountryID = @3

            IF @@rowcount = 0
            BEGIN
                INSERT INTO ServiceAttributeExperienceLevel (UserID,
                    PositionID, LanguageID, CountryID, ExperienceLevelID,
                    CreatedDate, UpdatedDate, ModifiedBy)
                VALUES (@0, @1, @2, @3, @4, getdate(), getdate(), 'sys')
            END
        COMMIT TRAN
    ";
    const string sqlDelExpLevel = @"
        DELETE FROM ServiceAttributeExperienceLevel
        WHERE   UserId = @0 AND PositionID = @1
                        AND LanguageID = @2 AND CountryID = @3
    ";
}
@helper getChecked(dynamic att){
    if (att["UserChecked"]) {
        @Html.Raw("checked='checked'")
    }
}
@helper printSelected(dynamic att, string valueA = null, string valueB = null){
    if ((valueA != null && valueB != null && valueA == valueB) || att["UserChecked"]) {
        @Html.Raw("selected='selected'")
    }
}
@helper printAttCheckList(int catId, dynamic atts){
    <ul>
        @foreach(var att in atts){
            <li>@printAttCheck(catId, att)</li>
        }
    </ul>
}
@helper printAttCheck(int catId, dynamic att){
    <label class="has-tooltip" title="@att["ServiceAttribute"]" data-description="@att["ServiceAttributeDescription"]"><input type="checkbox" @getChecked(att) name="positionservices-category[@(catId)]-attribute[@(att["ServiceAttributeID"])]"/>@att["ServiceAttribute"]</label>
}
@helper printCatLegend(dynamic cat){
    string tittle, desc;
    desc = cat["ServiceAttributeCategoryDescription"];
    if (String.IsNullOrWhiteSpace(desc)) {
        desc = tittle = "";
    } else {
        tittle = cat["ServiceAttributeCategoryName"];
    }
    <legend class="has-popup-tooltip DashboardServices-categoryName" data-description="@desc" title="@tittle">@cat["ServiceAttributeCategoryName"]:</legend>
}
@helper printExperienceLevelCat(dynamic expLevels, string tplCatName){
    if (expLevels != null && expLevels.Count > 0)
    {
        string selExpLevel = Request[String.Format(tplCatName, LcData.ServiceAttCatIDExperienceLevel) + "-level"];

        <fieldset class="positionservices-experiencelevel DashboardServices-attributes-category js-validationSelectOne @*reqCatClass*@ is-required">
            <legend title="@LcRessources.GetText("Experience Level")" data-description="@LcRessources.GetText("Experience Level Description")">@LcRessources.GetText("Experience Level")</legend>
            <select title="Experience Level" name="positionservices-category[@LcData.ServiceAttCatIDExperienceLevel]-level">
                    <option value=""></option>
                @foreach (var level in expLevels)
                {
                    <option @printSelected(level, level.ExperienceLevelID.ToString(), selExpLevel) value="@level.ExperienceLevelID" data-description="@level.ExperienceLevelDescription" title="@level.ExperienceLevelName">@level.ExperienceLevelName</option>
                }
            </select>
        </fieldset>
    }
}
@helper printCategoryAutocompleteAttributes(int catID, dynamic cat) {
    if (cat["ServiceAttributes"].Count > 0)
    {
        <div class="@(cat["RequiredInput"] ? reqCatClass : "") DashboardServices-attributes-category SelectAttributes">
            <h4 class="DashboardServices-categoryName SelectAttributes-title">@(cat["ServiceAttributeCategoryName"])</h4>
            <div class="SelectAttributes-autocomplete">
                <input class="SelectAttributes-autocompleteInput" type="text" autocomplete="off" placeholder="@(cat["ServiceAttributeCategoryName"])" data-autocomplete-id="@(catID)" />
                <button class="action SelectAttributes-autocompleteButton" type="button">Add</button>
            </div>
            <ul class="SelectAttributes-selection DashboardServices-attributes-selection"></ul>
            <script type="text/javascript">
                window.serviceAttributesLists = window.serviceAttributesLists || {};
                serviceAttributesLists[@(catID)] = @Html.Raw(Json.Encode(cat["ServiceAttributes"]));
            </script>
        </div>
    }    
}
<fieldset class="DashboardServices ajax ajax-box" data-ajax-fieldset-action="@(LcUrl.LangPath)$Dashboard/YourWork/$Services/?PositionID=@(pos.PositionID)" @Html.Raw(isInOnboarding ? "data-instant-saving='true'" : "")>
    <p class="DashboardSection-page-section-introduction">
        Fill us in on the services you provide. By conveying your job, experience, and passion with genuine feeling, you’ll attract the type of customers you want.
        Make sure to be clear about what tasks future clients can expect you to perform.
        If we've missed something, <a href="https://loconomics.zendesk.com/anonymous_requests/new" target="_blank">let us know</a>.
    </p>
    <ul class="lc-ressources">
        <li id="lcres-required-attribute-category-error">@requiredAttCatError</li>
    </ul>

    <div class="DashboardServices-attributes clearfix">
        @foreach (var cat in dataCats)
        {
            if (!specialCatIDs.Contains(cat.Key) && cat.Value["SideBarCategory"] == false)
            {
                @printCategoryAutocompleteAttributes(cat.Key, cat.Value)
            }
        }

        @printCategoryAutocompleteAttributes(LcData.ServiceAttCatIDLanguages, dataCats[LcData.ServiceAttCatIDLanguages])

        <div class="DashboardServices-sidebar">
            @* Because experience level attributes are get from a lookup table, not attributes table, cannot be linked
                to positions, and will never be retrieved in dataCats collection; for that, and because is a general
                category, is append ever for every position, at top of sidebar;
                if this changes in a future, and normal-attributes are used instead lookup, in the foreach there are already
                -commented- code for check its ID, maybe the helper needs redone. *@
            @printExperienceLevelCat(expLevels, tplCatName)

            @foreach (var cat in dataCats)
            {
                if ((specialCatIDs.Contains(cat.Key) || cat.Value["SideBarCategory"] == true) &&
                    cat.Value["ServiceAttributes"].Count > 0)
                {
                    switch ((int)cat.Key)
                    {
                        case LcData.ServiceAttCatIDLanguages:
                            /* Out of sidebar, but this 'case' is required to avoid it printing twice in 'default' case */
                            break;
                        default:
                            <fieldset class="@(cat.Value["RequiredInput"] ? reqCatClass : "") DashboardServices-attributes-category">
                                @printCatLegend(cat.Value)
                                @printAttCheckList(cat.Key, cat.Value["ServiceAttributes"])
                            </fieldset>
                            break;
                    }
                }
            }
        </div>
    </div>

    <fieldset class="DashboardServices-positionIntro">
        <legend>Position introduction</legend>
        <textarea rows="4" name="position-intro" @Validation.GetHtml("position-intro") placeholder="What makes your @pos.PositionSingular services special? What sets you apart from other @pos.PositionPlural? Avoid listing things you’ve selected above.">@(Request["position-intro"] ?? pos.PositionIntro)</textarea>
    </fieldset>

    <fieldset class="DashboardServices-requestAttributes">
        <legend>Did we miss something?</legend>
        <textarea rows="4" name="request-more-attributes" placeholder="Please list anything we’ve missed, and we’ll ensure we get it added to your profile right away."></textarea>
    </fieldset>
</fieldset>
