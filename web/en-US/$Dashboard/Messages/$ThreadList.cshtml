@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    LcHelpers.SecurePage();
    int userID = WebSecurity.CurrentUserId;

    // All messages threads (as customer and as provider)
    dynamic messageThreads = LcMessaging.GetMessageThreadList(userID);
}
@functions{

    public dynamic getItemStatusConfig(dynamic item, string senderUserType) {
        
        if (item.LastMessageAuxT == "Booking" || item.LastMessageAuxT == "BookingRequest") {
            return getBookingStatusConfig(item, senderUserType);
        }
        else {
            return getMessageStatusConfig(item, senderUserType);
        }
    }

    public dynamic getMessageStatusConfig(dynamic item, string senderUserType) {
        
        string buttonClass = "view", buttonLabel = "View";
        
        if (senderUserType == "customer") {
            switch ((int)item.MessageThreadStatusID){
                case 1:
                    buttonClass = "respond";
                    buttonLabel = "Respond";
                    break;
                case 2:
                    buttonClass = "responded info-action";
                    buttonLabel = "Responded";
                    break;
            }
        } else if (senderUserType == "provider") {
            switch ((int)item.MessageThreadStatusID){
                case 1:
                    buttonClass = "waiting-respond";
                    buttonLabel = "Waiting";
                    break;
                case 2:
                    buttonClass = "responded info-action";
                    buttonLabel = "Responded";
                    break;
            }
        }
    
        return new {
            buttonClass = buttonClass,
            buttonLabel = buttonLabel
        };
    }

    public dynamic getBookingStatusConfig(dynamic item, string senderUserType) {
    
        string buttonClass = "view", buttonLabel = "View";
    
        switch ((int)item.LastMessageTypeID){
            case 4:
            case 5:
                if (senderUserType == "customer") {
                    buttonClass = "respond";
                    buttonLabel = "Respond";
                } else {
                    buttonClass = "waiting-respond info-action";
                    buttonLabel = "Waiting";
                }
                break;
            case 6:
            case 7:
                buttonClass = "confirmed success-action";
                buttonLabel = "Confirmed";
                break;
            case 9:
                buttonClass = "dispute failure-action";
                buttonLabel = "Dispute";
                break;
            case 10:
                buttonClass = "resolution";
                buttonLabel = "Resolution";
                break;
            case 12:
                buttonClass = "adjustment";
                buttonLabel = "Adjustment";
                break;
            case 13:
                buttonClass = "declined failure-action";
                buttonLabel = "Declined";
                break;
            case 14:
                buttonClass = "cancelled failure-action";
                buttonLabel = "Cancelled";
                break;
            case 15:
            case 16:
            case 19:
                buttonClass = "view";
                buttonLabel = "View";
                break;
            case 17:
            case 18:
                buttonClass = "review";
                buttonLabel = "Review";
                break;
                
            case 20:
                buttonClass = "service-performed success-action";
                buttonLabel = "Done";
                break;
            case 21:
                buttonClass = "closed success-action";
                buttonLabel = "Closed";
                break;
        }
    
        return new {
            buttonClass = buttonClass,
            buttonLabel = buttonLabel
        };
    }
}

@helper printItem(dynamic item, string senderPrefix = "Sender", string receiverPrefix = "Receiver", string senderUserType = "user") {
  <li>
    @RenderPage(LcUrl.RenderLangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
        {"Data", item},
        {"DataPrefix", senderPrefix},
        {"Size", "mini"},
        {"UserType", senderUserType}
    })
    @{
        var itemType = "";
        if (item.LastMessageTypeID >= 1 && item.LastMessageTypeID <= 3) {
            itemType = "inquiry";
        } else if (item.LastMessageTypeID == 8) {
            itemType = "marketing";
        } else if (item.LastMessageTypeID == 9) {
            itemType = "booking-dispute";
        } else if (item.LastMessageTypeID == 10) {
            itemType = "booking-dispute-resolution";
        } else if (item.LastMessageTypeID >= 17 && item.LastMessageTypeID <= 18) {
            itemType = "booking-review";
        } else if (item.LastMessageTypeID >= 4 && item.LastMessageTypeID <= 5) {
            itemType = "bookingrequest";
        } else if (item.LastMessageTypeID >= 6 && item.LastMessageTypeID <= 7) {
            itemType = "bookingrequest-confirmation";
        } else if (item.LastMessageTypeID >= 13 && item.LastMessageTypeID <= 14) {
            itemType = "bookingrequest-denegation";
        } else if (item.LastMessageTypeID >= 15 && item.LastMessageTypeID <= 16 || item.lastMessageTypeID == 19) {
            itemType = "booking";
        }
    }
    <ul class="item-summary message-thread-summary @itemType">
        @* Inquiries messages (1 to 3) *@
        @switch(itemType) {
            case "inquiry":
                <li>
                    <h5>@LcRessources.GetText("messaging-message-type-title-" + itemType):</h5> 
                    @item.PositionSingular
                </li>
                <li>
                    <h5>Subject:</h5> @item.Subject
                </li>
                <li>
                    <h5>Message:</h5> @item.LastMessageBodyText
                </li>
                break;
            default:
                <li>
                    <h5>@LcRessources.GetText("messaging-message-type-title-" + itemType):</h5> 
                    @item.Subject
                </li>
                <li class="long-details">
                    <h5>Details:</h5> @item.LastMessageBodyText
                </li>
                break;
        }
    </ul>
    <div class="actions">
        @{
            var statusConfig = getItemStatusConfig(item, senderUserType);
            
            var summary = new LcMessaging.MessageSummary(item, WebSecurity.CurrentUserId);
        }
        <a class="item-action @statusConfig.buttonClass" href="@(summary.GetMessageUrl())">@statusConfig.buttonLabel</a>
        <div class="date item-extra-info">@item.LastMessageDate</div>
    </div>
  </li>
}
<ul class="ItemsList">
    @if (messageThreads.Count > 0)
    {
        foreach (var item in messageThreads)
        {
            if (userID == item.ProviderUserID) {
                @printItem(item, "Customer", "Provider", "customer");
            } else {
                @printItem(item, "Provider", "Customer", "provider");
            }
        }
    } else {
        <li class="empty-list">Your mailbox is empty!</li>
    }
</ul>