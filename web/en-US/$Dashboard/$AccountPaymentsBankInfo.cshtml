@using Braintree;
@using WebMatrix.Data;
@using System.Text.RegularExpressions;
@{
    LcHelpers.SecurePage();
    
    var idprefix = "account-payments-bankinfo";
    var user = LcData.UserInfo.GetUserRow();
    
    BraintreeGateway gateway = null;
    dynamic bankinfo = null, paymentpreferences = null;
    
    Validation.RequireField("payment-type", LcRessources.RequiredField("Payment preference"));
    Validation.Add("bank_fullname", Validator.StringLength(100, 0, "Name on bank account must be fewer than 100 characters."));
       
    if (IsPost && Validation.IsValid()) {
        
        var paymentType = Request["payment-type"];

        if (paymentType == "4") {
            if (Request["bank_fullname"].IsEmpty()) {
                ModelState.AddError("bank_fullname", LcRessources.RequiredField("Full name"));
            }
            if (Request["bank_accounttype"].IsEmpty()) {
                ModelState.AddError("bank_accounttype", LcRessources.RequiredField("Account type"));
            }
            if (Request["bank_abanumber"].IsEmpty()) {
                ModelState.AddError("bank_abanumber", LcRessources.RequiredField("ABA Number"));
            }
            if (Request["bank_accountnumber"].IsEmpty()) {
                ModelState.AddError("bank_accountnumber", LcRessources.RequiredField("Account Number"));
            }
            if (!Regex.IsMatch(Request["bank_accountnumber"], "^\\d{6,}$")) {
                ModelState.AddError("bank_accountnumber", "Invalid Account number");
            }
            if (!Request["bank_abanumber"].IsInt()) {
                ModelState.AddError("bank_abanumber", "The ABA routing number must be a nine digit number");
            } else if (Request["bank_abanumber"].Length != 9) {
                ModelState.AddError("bank_abanumber", "The ABA routing number must be a nine digit number");
            }
            
            // Now, paymentType is a value with '4.' as prefix, being the last number (after the dot) what must
            // be saved:
            paymentType = Request["bank_accounttype"];
            
            if (ModelState.IsValid) {
                try{
                    gateway = LcPayment.NewBraintreeGateway();
                } catch {
                    ModelState.AddFormError("There was an error communicating with our secure data facility, please try again later.");
                }
            }
        }
       
        if (ModelState.IsValid) {

            // We save data on our database
            var sqlSetProviderTaxForm = @"
            BEGIN TRAN
                UPDATE  providerpaymentpreference WITH (serializable)
                SET     AccountName = @1,
                        ABANumber = @2,
                        LastThreeAccountDigits = @3,
                        ProviderPaymentPreferenceTypeID = @4,
                        Verified = 0,
                        UpdatedDate = getdate(),
                        ModifiedBy = 'sys'
                WHERE   ProviderUserId = @0

                IF @@rowcount = 0
                BEGIN
                    INSERT INTO providerpaymentpreference (ProviderUserId,
                        AccountName, ABANumber, LastThreeAccountDigits,
                        ProviderPaymentPreferenceTypeID, Verified,
                        CreatedDate, UpdatedDate, ModifiedBy)
                    VALUES (@0, @1, @2, @3, @4, 0, getdate(), getdate(), 'sys')
                END
            COMMIT TRAN
            EXEC TestAlertPayment @0
            ";
            
            var beforePositionStatuses = LcData.UserInfo.GetUserPositionsStatuses((int)user.UserID);
                
            using (var db = Database.Open("sqlloco")) {
                if (paymentType.StartsWith("4.")) {
                    db.Execute(sqlSetProviderTaxForm, user.UserID,
                        Request["bank_fullname"],
                        Request["bank_abanumber"],
                        // Bank Account Number: ONLY THE THREE LAST DIGITS
                        LcEncryptor.Encrypt(LcHelpers.GetLastStringChars(Request["bank_accountnumber"], 3)),
                        paymentType.Substring(2).AsInt()
                    );
                } else {
                    db.Execute(sqlSetProviderTaxForm, user.UserID,
                        null,
                        null,
                        null,
                        paymentType.AsInt()
                    );
                }
            }
            
            if (paymentType.StartsWith("4.")) {
                // Save Bank account number on Braintree
                CustomerRequest request = new CustomerRequest{
                    //need to pass in the userid from the cookie
                    Id = user.UserID.ToString(),
                    CustomerId = user.UserID.ToString(),
                    CustomFields = new Dictionary<string,string>{
                        { "loco_bank_account", Request["bank_accountnumber"] }
                    }
                };
                // Check if user exists and must be updated, or be created
                Customer customer = null;
                try {
                    customer = gateway.Customer.Find(user.UserID.ToString());
                } catch (Braintree.Exceptions.NotFoundException ex){
                }
                Result<Customer> result = null;
                if (customer != null) {
                    result = gateway.Customer.Update(user.UserID.ToString(), request);
                } else {
                    result = gateway.Customer.Create(request);
                }
                if (!result.IsSuccess()){
                    foreach (var row in result.Errors.DeepAll())
                    {
                        if (Context.IsDebuggingEnabled) {
                            ModelState.AddFormError(row.Code.ToString() + ": " + row.Message);
                        } else {
                            ModelState.AddFormError(row.Message);
                        }
                    }
                }
            }

            if (ModelState.IsValid){
                // Show the profile activation popup with 'next-step' buttons and progress information when need,
                // if not the short message is showed:
                if (!LcHelpers.UseProfileActivationPopup(beforePositionStatuses,
                    user.UserID,
                    LcRessources.DataSaved,
                    "Edit bank account"))
                {
                    LcHelpers.ReturnJsonResult(5, LcRessources.ShortDataSaved);
                }
            }
        }
    }
@*// Try to get the data from this customer, if was previously saved or user exist at Braintree
try {
    customer = gateway.Customer.Find(user.UserID.ToString());
    PageData["customer"] = customer;
}
//} catch (Braintree.Exceptions.NotFoundException ex){ // Customer don't exist exception
catch { }*@
    using (var db = Database.Open("sqlloco")) {
        paymentpreferences = db.Query(@"
            SELECT  *
            FROM    providerpaymentpreferencetype
            WHERE   Active=1
        ");
        bankinfo = db.QuerySingle(@"
            SELECT  TOP 1 P.*,
                    (SELECT TOP 1 DependsOnID FROM ProviderPaymentPreferenceType As T
                     WHERE T.ProviderPaymentPreferenceTypeID = P.ProviderPaymentPreferenceTypeID
                    ) As ProviderPaymentPreferenceTypeDependsOnID
            FROM    providerpaymentpreference As P
            WHERE   ProviderUserID = @0
        ", user.UserID);
    }
}
<p class="setting-instructions">
Doing the job is the tough part, getting paid is the easy part.  You can be paid via direct deposit, or we can mail you a paper check.  Please indicate your preference below.  Rest assured your data is stored securely.
</p>
<div>
<form method="post" id="@idprefix-form" action="@(LcUrl.LangPath)$Dashboard/$AccountPaymentsBankInfo/" class="ajax ajax-box">
    @LcHelpers.GetValidationScripts()
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="payment-type">
        <legend>Payment preference:</legend>
        @foreach (var paymentpreference in paymentpreferences)
        {
            if (paymentpreference.DependsOnID == null)
            {
                <label>
                    <input @Validation.GetHtml("payment-type") type="radio" name="payment-type" @LcHelpers.IsChecked(paymentpreference.ProviderPaymentPreferenceTypeID, new object[]{ Request["payment-type"], (bankinfo != null ? bankinfo.ProviderPaymentPreferenceTypeID : null), (bankinfo != null ? bankinfo.ProviderPaymentPreferenceTypeDependsOnID : null ) }) value="@paymentpreference.ProviderPaymentPreferenceTypeID" />
                    <abbr title="@paymentpreference.ProviderPaymentPreferenceTypeName">@paymentpreference.ProviderPaymentPreferenceTypeDescription</abbr>
                </label>
            }
        }
    </fieldset>
    <div class="warning">
        @if (bankinfo != null && bankinfo.ProviderPaymentPreferenceTypeID == 4)
        {
            if (bankinfo.Verified)
            {
            <p>Your bank account was successfully verified.</p>
            }
            else
            {
                <p>Your bank account will be verified after your first job is complete.</p>
            }
        }
    </div>
    <div class="col col-2 col-2-1 bank-account-preference">
        <fieldset id="@idprefix-fs-contactinfo" class="contact-info">
            <legend>Name on bank account:</legend>
            <ul>
                <li><label for="@idprefix-fullname"></label><input @Validation.GetHtml("bank_fullname") id="@idprefix-fullname" type="text" name="bank_fullname" value="@(Request["bank_fullname"] ?? (bankinfo != null ? bankinfo.AccountName : ""))"/></li>
            </ul>
        </fieldset>
        <fieldset id="@idprefix-fs-accounttype">
            <legend>Bank account type:</legend>
            <ul>
                @foreach (var paymentpreference in paymentpreferences)
                {
                    if (paymentpreference.DependsOnID == 4)
                    {
                        <li><input type="radio" id="@idprefix-accounttype[@paymentpreference.ProviderPaymentPreferenceTypeID]" @Validation.GetHtml("bank_accounttype") name="bank_accounttype" @LcHelpers.IsChecked(paymentpreference.ProviderPaymentPreferenceTypeID, new object[]{ Request["bank_accounttype"], (bankinfo != null ? bankinfo.ProviderPaymentPreferenceTypeID.ToString() : null) }) value="4.@paymentpreference.ProviderPaymentPreferenceTypeID"/>
                        <label for="@idprefix-accounttype[@paymentpreference.ProviderPaymentPreferenceTypeID]"><abbr title="@paymentpreference.ProviderPaymentPreferenceTypeDescription">@paymentpreference.ProviderPaymentPreferenceTypeName</abbr></label></li>
                    }
                }
            </ul>
        </fieldset>
    </div>
    <div class="col col-2 col-2-2 bank-account-preference">
        <fieldset id="@idprefix-fs-accountnumber">
            <legend>Bank account number:</legend>
            <ul>
                <li><label for="@idprefix-abanumber">ABA routing number (9 digits):</label><input type="text" id="@idprefix-abanumber" @Validation.GetHtml("bank_abanumber") name="bank_abanumber" value="@(Request["bank_abanumber"] ?? (bankinfo != null ? bankinfo.ABANumber : ""))"/></li>
                <li><label for="@idprefix-accountnumber">Account number:</label><input type="text" id="@idprefix-accountnumber" @Validation.GetHtml("bank_accountnumber") name="bank_accountnumber" value="@(Request["bank_accountnumber"] ?? (bankinfo != null ? "*****" + LcEncryptor.Decrypt((string)bankinfo.LastThreeAccountDigits) : ""))"/></li>
            </ul>
        </fieldset>
    </div>
    <fieldset class="actions">
        <button class="save main-action" type="submit">Submit</button>
    </fieldset>
</form>
</div>