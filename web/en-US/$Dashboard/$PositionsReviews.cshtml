@using WebMatrix.Data;
@{
    LcHelpers.ProviderPage();
    // Current position data record:
    var p = LcData.UserInfo.GetUserCurrentPos();
    var n = p.PositionID;
    // Current user data record:
    var u = LcData.UserInfo.GetUserRow();
    
    var idprefix = "position#" + n + "-reviews";
    
    if (Validation.GetHtml("clientsemails") == null) {
        Validation.RequireField("clientsemails", LcRessources.RequiredField("Email addresses list"));
    }
    
    if (IsPost && Validation.IsValid()) {
        
        var emails = LcValidators.ReadEmailAddressList(Request["clientsemails"]);
        if (emails == null){
            ModelState.AddError("clientsemails", "There are errors in the email list. Please, use a comma to separate emails and verify all are valid addresses.");
        }
        if (ModelState.IsValid) {
            
            var beforePositionStatuses = LcData.UserInfo.GetUserPositionsStatuses((int)u.UserID);
            
            int successfulSent = 0;
            foreach (string email in emails) {
                try {
                    LcMessaging.SendMail(email,
                        String.Format("Loconomics.com - Write {0} {1} a reference", u.FirstName, u.LastName),
                        LcMessaging.ApplyTemplate(LcUrl.LangPath + "Email/EmailProviderReference/", new Dictionary<string,object>{
                            { "ProviderUserID", u.UserID }
                            ,{ "PositionID", p.PositionID }
                    }));
                    successfulSent++;
                } catch (System.FormatException ex) {
                    ModelState.AddFormError(String.Format(
                        "We're sorry, there was an error sending the request to {0}, please ensure the address is correct.",
                        email)
                    );
                } catch (Exception ex) {
                    ModelState.AddFormError(String.Format(
                        "We're sorry, there was an error sending the request to {0}.",
                        email)
                    );
                }
            }
            
            if (successfulSent > 0) {
                // Set VerificationID:12 for this user as 'pending'; thats enough to off the alert.
                using (var db = Database.Open("sqlloco")){
                    db.Execute(@"EXEC SetUserVerification @0,@1,@2,@3", p.UserID, 12, DateTime.Now, 2, p.PositionID);
                    db.Execute("EXEC TestAlertReferenceRequests @0, @1", p.UserID, p.PositionID);
                }
            }

            if (ModelState.IsValid) {
                // Show the profile activation popup with 'next-step' buttons and progress information when need,
                // if not the short message is showed:
                if (!LcHelpers.UseProfileActivationPopup(beforePositionStatuses,
                    u.UserID,
                    "Sent.",
                    LcRessources.OK))
                {
                    LcHelpers.ReturnJsonResult(5, "Sent");
                }
            }
        }
    }
}
<p class="setting-instructions">
Here’s a chance to pull in some favors. We know you’ve done great work in the past – and your clients deserve to know too. Enter the email addresses of past clients and we’ll pass along a sweetly-worded reference request. Rest assured: no spamming will occur. We’ll post the first five to your profile. 
</p>
<div>
<form action="@(LcUrl.LangPath)$Dashboard/$PositionsReviews/" method="post" class="positionreviews ajax ajax-box" id="position#@(n)-reviews">
    <input type="hidden" name="PositionID" value="@p.PositionID"/>
    @LcHelpers.GetValidationScripts()
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="references">
        <ul>
            <li>
                <label for="@idprefix-clientsemails">Please enter the e-mail addresses of past clients, and we'll send them a request (don’t worry, we will not spam them):</label>
                <textarea id="@idprefix-clientsemails" @Validation.GetHtml("clientsemails") name="clientsemails" placeholder="type e-mail addresses separated by commas">@Request["clientsemails"]</textarea>
            </li>
        </ul>
    </fieldset>
    @*<fieldset>
        <legend>Testing the Reviews/ReviewsGrid</legend>
        <h3>Reviews</h3>
        @RenderPage(LcUrl.RenderLangPath + "Reviews/$ReviewsGrid.cshtml", u.UserID, p.PositionID)
    </fieldset>*@
    <fieldset class="actions">
        <button class="save main-action" type="submit">Send</button>
    </fieldset>
</form>
</div>