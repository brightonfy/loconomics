@*
    Allow edit or create a Calendar Appointment (events of a reduced type).
 *@
@using WebMatrix.Data;
@{
    LcHelpers.ProviderPage();
    
    var isSubform = PageData["IsSubform"] ?? Request["subform"].AsBool();

    var u = LcData.UserInfo.GetUserRow();
    var eventID = Request["AppointmentID"].AsInt();
    var idprefix = "editEvent" + eventID.ToString();

    if (Request["Action"] == "delete") {

        // Delete eventID
        LcCalendar.DelUserAppointment(u.UserID, eventID);
        LcHelpers.ReturnJsonResult(0, "Event was succesful deleted!");
        // ENDS page execution
    }

    // Validation rules
    Validation.RequireField("summary", LcRessources.RequiredField("Title"));
    Validation.RequireField("startdate", LcRessources.RequiredField("Start Date"));
    Validation.RequireField("enddate", LcRessources.RequiredField("End Date"));
    Validation.Add("startdate", Validator.DateTime("Start date is not valid"));
    Validation.Add("starttime", Validator.DateTime("Start time is not valid"));
    Validation.Add("enddate", Validator.DateTime("End date is not valid"));
    Validation.Add("endtime", Validator.DateTime("End date is not valid"));
    Validation.Add("repeat-every", Validator.Integer("'Repeat every' must be a number"));
    Validation.Add("repeat-ocurrences", Validator.Integer("Number of occurrences must be a number"));
    Validation.Add("repeat-end-date", Validator.DateTime("Repetition End Date is not valid"));

    // Some form values catched in vars because they need special treatment:
    int? repeatFrequency = Request["repeat-frequency"].AsInt();
    List<int> selectedWeekDays = new List<int>();
    if (Request.Form.AllKeys.Contains<string>("week-day")) {
        foreach(var w in Request.Form.GetValues("week-day")){
            // Try-catch because a bad-request can send non-valid values or repeated
            // ones, making the list-addition fail. For normal use, that problem
            // never will happen, because of that a better control 
            // without try-catch is over-complicate the code
            try{
                selectedWeekDays.Add(w.AsInt());
            }catch{}
        }
    }
    var monthlyOption = Request["monthly-option"] ?? "month-day";
    
    // Save posted data
    if (IsPost && Validation.IsValid()) {
        var repeatEvery = Request["repeat-every"].AsInt(1);
        // Special frequencies with an ID of 2-hundred have forced
        // an interval/repeatEvery value of 2
        if ((int)repeatFrequency / 100 == 2) {
            repeatEvery = 2;
            // And the code of frequency MUST be changed to its 'real' equivalent:
            repeatFrequency -= 200;
        }
        // Weekly frequency presets: 5 hundred values
        if ((int)repeatFrequency / 100 == 5) {
            // Interval to 1
            repeatEvery = 1;
            // Set week-days
            selectedWeekDays.Clear();
            if (repeatFrequency == 501 || repeatFrequency == 502) {
                selectedWeekDays.Add((int)DayOfWeek.Monday);
                selectedWeekDays.Add((int)DayOfWeek.Wednesday);
                selectedWeekDays.Add((int)DayOfWeek.Friday);
            }
            if (repeatFrequency == 501 || repeatFrequency == 503) {
                selectedWeekDays.Add((int)DayOfWeek.Tuesday);
                selectedWeekDays.Add((int)DayOfWeek.Thursday);
            }
            // Finally, set frequency to 'weekly':
            repeatFrequency = 5;
        }
        
        var startDT = (Request["startdate"] + " " + Request["starttime"]).AsDateTime();
        var endDT = (Request["enddate"] + " " + Request["endtime"]).AsDateTime();
        
        if (endDT < startDT){
            var dt = endDT;
            endDT = startDT;
            startDT = dt;
        }
        
        if (ModelState.IsValid) {
            
            LcCalendar.SetUserAppointment(u.UserID,
                eventID,
                Request["type"].AsInt(),
                Request["availability"].AsInt(),
                Request["summary"],
                startDT,
                endDT,
                Request["allday"].AsBool(),
                Request["repeat"].AsBool(),
                repeatFrequency.Value,
                repeatEvery,
                Request["repeat-ends"] == "date" ? (DateTime?)Request["repeat-end-date"].AsDateTime() : null,
                Request["repeat-ends"] == "ocurrences" ? (int?)Request["repeat-ocurrences"].AsInt() : null,
                Request["location"],
                Request["description"],
                selectedWeekDays,
                monthlyOption
            );

            // All was fine, AJAX-JSON response
            if (ModelState.IsValid) {
                LcHelpers.ReturnJsonResult(5, LcRessources.ShortDataSaved);
            }
        }
    }
    
    dynamic eventTypes = null, availabilityTypes = null;
    using (var db = Database.Open("sqlloco")) {
        eventTypes = db.Query(@"SELECT EventTypeID, DisplayName FROM CalendarEventType WHERE DisplayName is not null");
        availabilityTypes = db.Query(@"
            SELECT  CalendarAvailabilityTypeID As ID, SelectableAs As DisplayName
            FROM    CalendarAvailabilityType
            WHERE   LanguageID = @0 AND CountryID = @1
                    AND SelectableAs is not null
        ", LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
    }
    var repeatFrequencies = LcCalendar.GetRecurrenceFrequencyTypes();
    dynamic calEvent = LcCalendar.GetUserAppointment((int)u.UserID, eventID);
    CalendarDll.Data.CalendarReccurrence calRecurrence = null;
    var calEventIsRecurrent = false;
    var recEnds = "never";
    if (calEvent != null && calEvent.CalendarReccurrence != null && calEvent.CalendarReccurrence.Count > 0) {
        foreach(var r in calEvent.CalendarReccurrence) {
            calRecurrence = r;
            break;
        }
        if (calRecurrence != null) {
            calEventIsRecurrent = true;
            if (calRecurrence.Until != null) {
                recEnds = "date";
            } else if (calRecurrence.Count != null && calRecurrence.Count > 0) {
                recEnds = "ocurrences";
            }
            repeatFrequency = calRecurrence.Frequency;
        }
        // Week days: Fill with db values, but not in post. For Weekly and Monthly special options
        if (!IsPost && calRecurrence != null && calRecurrence.CalendarReccurrenceFrequency != null && calRecurrence.CalendarReccurrenceFrequency.Count > 0){
            foreach(var rf in calRecurrence.CalendarReccurrenceFrequency) {
                if (rf.DayOfWeek.HasValue && 
                    !selectedWeekDays.Contains(rf.DayOfWeek.Value)) {
                    selectedWeekDays.Add(rf.DayOfWeek.Value);
                }
                // If monthly, we check that there are almost one frequency record
                // that has a ByDay:true, FrequencyDay, and DayOfWeek
                // to detect that was set the 'week-day' option.
                if (repeatFrequency == 6 &&
                    rf.ByDay.HasValue && rf.ByDay.Value &&
                    rf.DayOfWeek.HasValue &&
                    rf.FrequencyDay.HasValue) {
                    monthlyOption = "week-day";
                }
            }
            // Only if there is week-days
            if (selectedWeekDays.Count > 0) {
                // Detect Weekly frequency Presets:
                if (repeatFrequency == 5) {
                    if (selectedWeekDays.Count == 3 &&
                        selectedWeekDays.Contains((int)DayOfWeek.Monday) &&
                        selectedWeekDays.Contains((int)DayOfWeek.Wednesday) &&
                        selectedWeekDays.Contains((int)DayOfWeek.Friday)){
                        repeatFrequency = 502;
                    }
                    if (selectedWeekDays.Count == 2 &&
                        selectedWeekDays.Contains((int)DayOfWeek.Tuesday) &&
                        selectedWeekDays.Contains((int)DayOfWeek.Thursday)) {
                        repeatFrequency = 503;
                    }
                    if (selectedWeekDays.Count == 5 &&
                        selectedWeekDays.Contains((int)DayOfWeek.Monday) &&
                        selectedWeekDays.Contains((int)DayOfWeek.Tuesday) &&
                        selectedWeekDays.Contains((int)DayOfWeek.Wednesday) &&
                        selectedWeekDays.Contains((int)DayOfWeek.Friday) &&
                        selectedWeekDays.Contains((int)DayOfWeek.Thursday)){
                        repeatFrequency = 501;
                    }
                }
            }
        }
    }
    
    var formAction = LcUrl.LangPath + "$dashboard/Availability/$AppointmentEdit/?AppointmentID=" + eventID;
}
@helper printOptionsHours(string selectedHour){
    var firstHour = new TimeSpan(0, 0, 0);
    var lastHour = new TimeSpan(24, 0, 0);
    var interval = new TimeSpan(0, 15, 0);
    for (var hour = firstHour; hour <= lastHour; hour += interval)
    {
        <option @LcHelpers.IsSelected(selectedHour, hour.ToString("c")) value="@hour.ToString("c")">@((new DateTime(hour.Ticks)).ToShortTimeString())</option>
    }
}

@if (isSubform) {
    @Html.Raw("<")<text>fieldset data-ajax-fieldset-action="@(formAction)&subform=true" class="crudl-form ajax ajax-box availability-events-edit"></text>
} else {
    @Html.Raw("<")<text>form action="@formAction" method="post" class="crudl-form ajax ajax-box availability-events-edit" id="@idprefix"></text>
}

    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)

    <ul>
        <li class="type">
            <label for="@(idprefix)Type">Type</label>
            <select name="type" id="@(idprefix)Type" @Validation.GetHtml("type")>
                @foreach (var type in eventTypes) {
                    <option value="@type.EventTypeID" @LcHelpers.IsSelected(type.EventTypeID, Request["type"] ?? (calEvent == null ? "" : calEvent.EventType))>@type.DisplayName</option>
                }
            </select>
        </li>
        <li class="availability">
            <label for="@(idprefix)Availability">Availability</label>
            <select name="availability" id="@(idprefix)Availability" @Validation.GetHtml("availability")>
                @foreach (var type in availabilityTypes) {
                    <option value="@type.ID" @LcHelpers.IsSelected(type.ID, Request["availability"] ?? (calEvent == null ? "" : calEvent.CalendarAvailabilityTypeID))>@type.DisplayName</option>
                }
            </select>
        </li>
        <li class="what">
            <label for="@(idprefix)Summary">What</label>
            <input id="@(idprefix)Summary" type="text" placeholder="Untitled event" name="summary" value="@(Request["summary"] ?? (calEvent == null ? "" : calEvent.Summary))" @Validation.GetHtml("summary") />
        </li>
        <li class="when">
            <label for="@(idprefix)StartDate">When</label>
            <input class="date date-pick date-pick-icon" id="@(idprefix)StartDate" placeholder="01/01/2000" name="startdate" type="text" value="@(Request["startdate"] ?? (calEvent == null ? "" : calEvent.StartTime.ToShortDateString()))" @Validation.GetHtml("startdate") />
            @*<input class="time" name="starttime" type="text" placeholder="12:00 PM" value="@(Request["starttime"] ?? (calEvent == null ? "" : calEvent.StartTime.ToShortTimeString()))" @Validation.GetHtml("starttime") />*@
            <select class="time" name="starttime">@printOptionsHours(Request["starttime"] ?? (calEvent == null ? "" : calEvent.StartTime.TimeOfDay.ToString("c")))</select>
            <span class="when-to">to</span>
            @*<input class="time" name="endtime" type="text" placeholder="12:00 PM" value="@(Request["endtime"] ?? (calEvent == null ? "" : calEvent.EndTime.ToShortTimeString()))" @Validation.GetHtml("endtime") />*@
            <select class="time" name="endtime">@printOptionsHours(Request["endtime"] ?? (calEvent == null ? "" : calEvent.EndTime.TimeOfDay.ToString("c")))</select>
            <input class="date date-pick date-pick-icon" name="enddate" placeholder="01/01/2000" type="text" value="@(Request["enddate"] ?? (calEvent == null ? "" : calEvent.EndTime.ToShortDateString()))" @Validation.GetHtml("enddate") />
            <div class="time-options">
                <div class="time-switchers">
                    <label><input type="checkbox" name="allday" value="True" @LcHelpers.IsChecked(true, Request["allday"] ?? (calEvent == null ? "" : calEvent.IsAllDay)) /> All day</label>
                    <label><input type="checkbox" name="repeat" value="True" @LcHelpers.IsChecked(true, Request["repeat"] ?? (calEvent == null ? false : calEventIsRecurrent).ToString()) /> Repeat...</label>
                </div>
                <div class="repeat-options">
                    <ul>
                        <li>
                            <label for="@(idprefix)RepeatFrequency">Repeats:</label>
                            <select name="repeat-frequency" id="@(idprefix)RepeatFrequency" @Validation.GetHtml("repeat-frequency")>
                                @foreach (var freq in repeatFrequencies) {
                                    <option value="@freq.ID" data-unit="@freq.UnitPlural" @LcHelpers.IsSelected(freq.ID, repeatFrequency)>@LcRessources.GetText(freq.Name)</option>
                                }
                            </select>
                        </li>
                        <li class="repeat-every">
                            <label for="@(idprefix)RepeatEvery">Repeat every:</label>
                            <input type="text" id="@(idprefix)RepeatEvery" name="repeat-every" value="@(Request["repeat-every"] ?? (calRecurrence == null ? "1" : calRecurrence.Interval.ToString()))" @Validation.GetHtml("repeat-every") />
                            <span class="repeat-frequency-unit">days</span>
                        </li>
                        <li class="frequency-extra frequency-extra-5 weekly-extra">
                            <label>Repeat on:</label>
                            <div class="week-days">
                                @foreach(var weekday in LcRessources.ListWeekDays()){
                                    <label title="@weekday.Name" class="has-tooltip"><input type="checkbox" name="week-day" value="@weekday.ID" @LcHelpers.IsChecked(true, selectedWeekDays.Contains(weekday.ID)) />@weekday.Abbr</label>
                                }
                            </div>
                        </li>
                        <li class="frequency-extra frequency-extra-6 monthly-extra">
                            <label>Repeat by:</label>
                            <div class="monthly-options">
                                <label><input type="radio" name="monthly-option" value="month-day" @LcHelpers.IsChecked("month-day", monthlyOption) /> day of the month</label>
                                <label><input type="radio" name="monthly-option" value="week-day" @LcHelpers.IsChecked("week-day", monthlyOption) /> day of the week</label>
                            </div>
                        </li>
                        <li class="repeat-ends">
                            <label>Ends:</label>
                            <ul>
                                <li><label><input type="radio" @LcHelpers.IsChecked("never", recEnds) value="never" name="repeat-ends" @Validation.GetHtml("repeat-ends") /> Never</label></li>
                                <li class="repeat-ocurrences"><label><input type="radio" @LcHelpers.IsChecked("ocurrences", recEnds) value="ocurrences" name="repeat-ends" @Validation.GetHtml("repeat-ends") /> After</label>
                                    <label><input type="text" name="repeat-ocurrences" value="@(Request["repeat-ocurrences"] ?? (calRecurrence == null ? "" : calRecurrence.Count.ToString()))" @Validation.GetHtml("repeat-ocurrences") /> ocurrences</label>
                                </li>
                                <li class="repeat-end-date"><label><input type="radio" value="date" @LcHelpers.IsChecked("date", recEnds) name="repeat-ends" @Validation.GetHtml("repeat-ends") /> On</label>
                                    <input class="date date-pick" type="text" name="repeat-end-date" value="@(Request["repeat-end-date"] ?? (calRecurrence == null ? "" : (calRecurrence.Until.HasValue ? calRecurrence.Until.Value.ToShortDateString() : "")))" @Validation.GetHtml("repeat-end-date") />
                                </li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </li>
        <li>
            <label for="@(idprefix)Where">Where</label>
            <input type="text" id="@(idprefix)Where" value="@(Request["location"] ?? (calEvent == null ? "" : calEvent.Location))" name="location" @Validation.GetHtml("location") />
        </li>
        <li>
            <label for="@(idprefix)Description">Description</label>
            <textarea name="description" id="@(idprefix)Description" @Validation.GetHtml("description")>@(Request["description"] ?? (calEvent == null ? "" : calEvent.Description))</textarea>
        </li>
    </ul>

    <div class="actions">
        <button type="button" class="button cancel-action crudl-cancel">Cancel</button>
        <button class="button main-action crudl-save @(isSubform ? "ajax-fieldset-submit" : "")">Save</button>
    </div>

@if(isSubform) {
    @Html.Raw("</fieldset>")
} else {
    @Html.Raw("</form>")
}