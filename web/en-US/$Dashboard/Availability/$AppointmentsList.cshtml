@*
    List user Calendar Appointments (events of that kind)
 *@
@using WebMatrix.Data;
@{
    LcHelpers.ProviderPage();
    
    var userId = WebSecurity.CurrentUserId;
    var idprefix = "DashboardAppointments-list";

    var list = LcCalendar.GetUserAppointments(userId);
}
@functions {
    string getRepetitionInfo(CalendarDll.Data.CalendarReccurrence repetition) {
        var ret = "";
        
        if (repetition.Frequency.HasValue) {
            var freq = ((DDay.iCal.FrequencyType)repetition.Frequency.Value);
            var desc = LcCalendar.RecurrenceFrequencyTypesIndexed[repetition.Frequency.Value];
            ret = desc.Name.ToLower();

            var days = new List<int>();
            var monthlyOption = "";
            var monthlyOptionDayOfWeek = DayOfWeek.Sunday;
            var monthlyOptionValue = -1;
            var monthlyOptionNth = -1;
            if (freq == DDay.iCal.FrequencyType.Weekly) {
                foreach(var day in repetition.CalendarReccurrenceFrequency) {
                    if (day.DayOfWeek.HasValue) {
                        days.Add(day.DayOfWeek.Value);
                    }
                }
            } else if (freq == DDay.iCal.FrequencyType.Monthly) {
                foreach(var rf in repetition.CalendarReccurrenceFrequency) {
                    if (rf.ByMonthDay.HasValue && rf.ByMonthDay.Value) {
                        monthlyOption = "month-day";
                        monthlyOptionValue = rf.ExtraValue.HasValue ? rf.ExtraValue.Value : -1;
                    } else if (rf.ByDay.HasValue && rf.ByDay.Value) {
                        monthlyOption = "week-day";
                        monthlyOptionDayOfWeek = rf.DayOfWeek.HasValue ? (DayOfWeek)rf.DayOfWeek.Value : repetition.CalendarEvents.StartTime.DayOfWeek;
                        monthlyOptionNth = rf.FrequencyDay.HasValue ? rf.FrequencyDay.Value : ASP.LcHelpers.NthWeekDayInMonth(repetition.CalendarEvents.StartTime);
                    }
                }
            }
            
            if (days.Count > 0) {
                days.Sort();
                ret += " on " + LcHelpers.JoinNotEmptyStrings(", ", days.Select( s => ((DayOfWeek)s).ToString() ));
            }
            
            switch (monthlyOption) {
                case "week-day":
                    ret += " by the " + monthlyOptionNth +  "º " + monthlyOptionDayOfWeek.ToString() + " of the month";
                    break;
                case "month-day":
                    ret += " by the " + monthlyOptionValue + "º day of the month";
                    break;
            }

            if (ret != "") {
                ret = "Repeats " + ret;
                if (repetition.Interval.HasValue && repetition.Interval.Value > 1) {
                    ret += " every " + repetition.Interval.Value.ToString() + " " + desc.UnitPlural.ToLower();
                }
            }
        }
        
        return ret;
    }
}

<div class="@idprefix">
@if (list != null && list.Count > 0)
{
    <ul>
        @foreach (var item in list)
        {
            <li class="DashboardAppointments-list-item ItemBox crudl-item" data-crudl-item-id="@item.Id">
                <h1 class="ItemBox-name">@item.Summary</h1>
                <p class="ItemBox-important">@item.CalendarAvailabilityType.CalendarAvailabilityTypeName</p>
                
                <h2 class="ItemBox-sectionTitle">Type</h2>
                <p>@item.CalendarEventType.DisplayName</p>

                <h2 class="ItemBox-sectionTitle">When</h2>
                <p>@LcHelpers.GetShortestDateTimeRangeString(item.StartTime, item.EndTime, dateFormat: "D", dateTimeSeparator: ", ")</p>

                @foreach (var repetition in item.CalendarReccurrence)
                {
                    <div>
                        @getRepetitionInfo(repetition)
                        @if (repetition.Until.HasValue)
                        {
                            <span>until @(repetition.Until.Value.ToLongDateString()).</span>
                        }
                        else if (repetition.Count.HasValue && repetition.Count > 0)
                        {
                            <span>after @(repetition.Count) @(repetition.Count > 1 ? "occurrences" : "ocurrence").</span>
                        }
                    </div>
                }

                <h2 class="ItemBox-sectionTitle">Where</h2>
                <p>@item.Location</p>

                <!-- More details -->

                <div class="actions ItemBox-actions">
                    <a href="#delete" class="crudl-delete">Delete</a>
                    <a href="#edit" class="crudl-update">Edit</a>
                </div>
            </li>
        }
    </ul>
}
</div>