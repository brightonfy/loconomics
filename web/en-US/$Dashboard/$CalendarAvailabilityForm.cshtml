@using WebMatrix.Data;
@{
    LcHelpers.ProviderPage();

    // Current user data
    var u = LcData.UserInfo.GetUserRow();
    var idprefix = "availability-form";
    
    var action = IsPost ? 
        Request["reset-private-url"].AsBool()
        ? "reset-private-url"
        : "save"
        : "load";

    if (action == "reset-private-url") {
        resetPrivateUrl(u.UserID);
        action = "load";
    }

    // From 0 (sunday) to 6 (saturday), true: is available. ON DATABASE use base-1; base-zero only arrays on this page
    bool[] availDates = new bool[7];
    // From 0 (sunday) to 6 (saturday), sub-index 0: start time, sub-index 1: end time
    TimeSpan[,] dateHours = new TimeSpan[7,2];
    bool useCalendarProgram = false;
    var programType = "";
    var programURL = "";
    var advanceTime = 24M;
    var minTime = 0.5M;
    var maxTime = 8M;
    var betweenTime = 0M;
    var privateUrlToken = "";

    var varSQLGetUserCalendarProviderAttributes = "EXEC GetUserCalendarProviderAttributes @0";
    
    Validation.Add("program-type", Validator.StringLength(200, 0, "Calendar type must be fewer than 200 characters."));
    Validation.Add("program-url", Validator.StringLength(500, 0, "Calendar URL must be fewer than 500 characters."));
    Validation.Add("program-url", Validator.Url("Calendar URL is not valid"));
    
    if (action == "load") {
        dynamic atts = null;
        var hoursData = LcCalendar.GetProviderWorkHours((int)u.UserID);
        using (var db = Database.Open("sqlloco")) {
            atts = db.QuerySingle(varSQLGetUserCalendarProviderAttributes, u.UserID);  
        }
        if (hoursData != null) {
            foreach (var dayHours in hoursData) {
                var dow = (int)dayHours.DayOfWeek;
                availDates[dow] = true;
                dateHours[dow, 0] = dayHours.StartTime;
                dateHours[dow, 1] = dayHours.EndTime;
            }
        }
        if (atts != null) {
            useCalendarProgram      = atts.UseCalendarProgram;
            programType             = atts.CalendarType;
            programURL              = atts.CalendarURL;
            advanceTime             = atts.AdvanceTime;
            minTime                 = atts.MinTime;
            maxTime                 = atts.MaxTime;
            betweenTime             = atts.BetweenTime;
            privateUrlToken         = atts.PrivateCalendarToken;
        }
    } else if (action == "save") {
        for (int d = 0; d < 7; d++) {
            availDates[d]   = Request["availday-" + d.ToString()].AsBool();
            dateHours[d, 0] = Request["day-" + d.ToString() + "-since-hour"].AsDateTime().TimeOfDay;
            dateHours[d, 1] = Request["day-" + d.ToString() + "-to-hour"].AsDateTime().TimeOfDay;
        }
        useCalendarProgram      = Request["use-program"].AsBool();
        programType             = Request["program-type"];
        programURL              = Request["program-url"];
        advanceTime             = Request["advance-time"].AsDecimal();
        minTime                 = Request["min-time"].AsDecimal();
        maxTime                 = Request["max-time"].AsDecimal();
        betweenTime             = Request["between-time"].AsDecimal();
        
        if (Request["advance-time"].IsEmpty()) {
            ModelState.AddError("advance-time", LcRessources.RequiredField("Time in advance of bookings"));
        }
        if (Request["min-time"].IsEmpty()) {
            ModelState.AddError("min-time", LcRessources.RequiredField("Minimum booking time"));
        }
        /*if (Request["max-time"].IsEmpty()) {
            ModelState.AddError("max-time", LcRessources.RequiredField("Maximum booking time"));
        }*/
        if (Request["between-time"].IsEmpty()) {
            ModelState.AddError("between-time", LcRessources.RequiredField("Minimum time between bookings"));
        }

        if (Validation.IsValid() && ModelState.IsValid) {
            
            var varSqlInsertCalendarProviderAttributes = "EXEC dbo.InsertCalendarProviderAttributes @0,@1,@2,@3,@4,@5,@6,@7,@8";
            
            var beforePositionStatuses = LcData.UserInfo.GetUserPositionsStatuses((int)u.UserID);

            using (var db = Database.Open("sqlloco")) {
                // Save data

                db.Execute(varSqlInsertCalendarProviderAttributes, u.UserID, 
                    advanceTime,
                    minTime,
                    maxTime,
                    betweenTime,
                    useCalendarProgram,
                    programType,
                    programURL,
                    privateUrlToken);
             
                for (int d = 0; d < 7; d++) {
                    if (availDates[d]) {
                        LcCalendar.SetProviderWorkHours(
                            u.UserID,
                            new LcCalendar.WorkHoursDay {
                                DayOfWeek = (DayOfWeek)d,
                                StartTime = dateHours[d, 0],
                                EndTime = dateHours[d, 1]
                            }
                        );
                    } else {
                        LcCalendar.DelProviderWorkHours(
                            u.UserID,
                            (DayOfWeek)d
                        );
                    }
                }
                
                db.Execute("EXEC TestAlertAvailability @0", u.UserID);
                
                // Do a calendar import for this user, to get inmediate results instead of wait for ScheduleTask
                if (LcValidators.IsUrl(programURL)) {
                    // TODO: Do the task in asynchronous way to be quickly returning the result to the user
                    //var async = new PageAsyncTask(new EventHandler(LcCalendar.Import), null, null, null, true);
                    LcCalendar.Import(u.UserID, programURL);
                }

                // Show the profile activation popup with 'next-step' buttons and progress information when need,
                // if not the short message is showed:
                if (!LcHelpers.UseProfileActivationPopup(beforePositionStatuses,
                    u.UserID,
                    "Availability data was succesful saved.",
                    "Edit availability"))
                {
                    LcHelpers.ReturnJsonResult(5, LcRessources.ShortDataSaved);
                }
            }
        }
    }
}
@functions {
    void resetPrivateUrl(int userID){
        using (var db = Database.Open("sqlloco")) {
            var newtoken = LcEncryptor.GenerateRandomToken(userID.ToString());
            db.Execute(@"
                UPDATE  CalendarProviderAttributes
                SET     PrivateCalendarToken = @1
                WHERE   UserID = @0
            ", userID, newtoken);
        }
    }
}
@helper printOptionsHours(TimeSpan selectedHour){
    var firstHour = new TimeSpan(0, 0, 0);
    var lastHour = new TimeSpan(24, 0, 0);
    var interval = new TimeSpan(0, 15, 0);
    for (var hour = firstHour; hour <= lastHour; hour += interval)
    {
        <option @LcHelpers.IsSelected(selectedHour.ToString("c"), hour.ToString("c")) value="@hour.ToString("c")">@((new DateTime(hour.Ticks)).ToShortTimeString())</option>
    }
}
@helper printHourPerDayElements(dynamic dateHours){
    var days = new string[]{"Sundays", "Mondays", "Tuesdays", "Wednesdays", "Thursdays", "Fridays", "Saturdays"};

    for (var d = 0; d < 7; d++){
    <li>
        <span class="day">@days[d]</span>
        <select data-day-index="@d" name="day-@d-since-hour">@printOptionsHours(dateHours[d, 0])</select>
        and
        <select data-day-index="@d" name="day-@d-to-hour">@printOptionsHours(dateHours[d, 1])</select>
    </li>
    }
}
@helper printDaysElements(bool[] availDates){
    var days = new string[]{"Sundays",  "Mondays", "Tuesdays", "Wednesdays", "Thursdays", "Fridays", "Saturdays"};
    for (var d = 0; d < 7; d++){
        <li>
            <span class="day">@days[d]</span>
            <label>Yes<input @LcHelpers.IsChecked(availDates[d], true) name="availday-@d" value="True" type="radio"/></label>
            <label>No<input @LcHelpers.IsChecked(availDates[d], false) name="availday-@d" value="False" type="radio"/></label>
        </li>
    }
}
@helper printHoursBooking(string what, string selected){
    <select name="@(what)-time">
        <option value="1">1 Hour</option>
        @for(var h = 2; h < 10; h++) {
            <option @LcHelpers.IsSelected(selected, h.ToString()) value="@h">@h Hours</option>
        }
    </select>
}
@helper printHoursBooking(string what, string selected, TimeSpan[] range){
    var aHour = new TimeSpan(1, 0, 0);
    var aDay = new TimeSpan(1, 0, 0, 0, 0);
    var aWeek = new TimeSpan(7, 0, 0, 0, 0);
    <select name="@(what)-time">
        @foreach (var h in range) {
            var sh = "";
            if (h < aHour) {
                sh = h.TotalMinutes.ToString() + " minutes";
            } else if (h < aDay) {
                sh = h.TotalHours.ToString() + " hours";
            } else if (h < aWeek) {
                sh = h.TotalDays.ToString() + " days";
            } else {
                sh = (h.TotalDays / 7).ToString() + " weeks";
            }
            <option @LcHelpers.IsSelected(selected, h.TotalHours.ToString()) value="@h">@sh</option>
        }
    </select>
}
@helper printOption(string selected, string val, string label) {
    <option @LcHelpers.IsSelected(selected, val) value="@val">@label</option>
}
@helper printHoursTimeInAdvance(string selected){
    // Time in advance of bookings: 1 hour, 1.5 hours, 2 hours, 2.5 hours, 3 hours, 4 hours, 5 hours, 6 hours, 7 hours, 8 hours, 12 hours, 18 hours, 1 day, 2 days, 3 days, 4 days, 5 days, 6 days, 1 week, 2 weeks
    @*@printHoursBooking("advance", selected, new TimeSpan[]{
        TimeSpan.FromHours(1),
        TimeSpan.FromHours(1.5),
        TimeSpan.FromHours(2),
        TimeSpan.FromHours(2.5),
        TimeSpan.FromHours(3),
        TimeSpan.FromHours(4),
        TimeSpan.FromHours(5),
        TimeSpan.FromHours(6),
        TimeSpan.FromHours(7),
        TimeSpan.FromHours(8),
        TimeSpan.FromHours(12),
        TimeSpan.FromHours(18),
        TimeSpan.FromDays(1),
        TimeSpan.FromDays(2),
        TimeSpan.FromDays(3),
        TimeSpan.FromDays(4),
        TimeSpan.FromDays(5),
        TimeSpan.FromDays(6),
        TimeSpan.FromDays(7),
        TimeSpan.FromDays(14)
    });*@
    <select name="advance-time">
        <option value=""></option>
        @printOption(selected, "1",     "1 hour")
        @printOption(selected, "1.5",   "1.5 hours")
        @printOption(selected, "2",     "2 hours")
        @printOption(selected, "2.5",   "2.5 hours")
        @printOption(selected, "3",     "3 hours")
        @printOption(selected, "4",     "4 hours")
        @printOption(selected, "5",     "5 hours")
        @printOption(selected, "6",     "6 hours")
        @printOption(selected, "7",     "7 hours")
        @printOption(selected, "8",     "8 hours")
        @printOption(selected, "12",    "12 hours")
        @printOption(selected, "18",    "18 hours")
        @printOption(selected, "24",    "1 day")
        @printOption(selected, "48",    "2 days")
        @printOption(selected, "72",    "3 days")
        @printOption(selected, "96",    "4 days")
        @printOption(selected, "120",   "5 days")
        @printOption(selected, "144",   "6 days")
        @printOption(selected, "168",   "1 week")
        @printOption(selected, "336",   "2 weeks")
    </select>
}
@helper printHoursMinBookingTime(string selected){
    // Minimum booking time: 15 minutes, 30 minutes, 45 minutes, 1 hour, 2 hours, 3 hours, 4 hours, 5 hours, 6 hours, 7 hours, 8 hours, 12 hours, 18 hours, 1 day
    <select name="min-time">
        <option value=""></option>
        @printOption(selected, "0.25",  "15 minutes")
        @printOption(selected, "0.5",   "30 minutes")
        @printOption(selected, "0.75",  "45 minutes")
        @printOption(selected, "1",     "1 hour")
        @printOption(selected, "2",     "2 hours")
        @printOption(selected, "3",     "3 hours")
        @printOption(selected, "4",     "4 hours")
        @printOption(selected, "5",     "5 hours")
        @printOption(selected, "6",     "6 hours")
        @printOption(selected, "7",     "7 hours")
        @printOption(selected, "8",     "8 hours")
        @printOption(selected, "12",    "12 hours")
        @printOption(selected, "18",    "18 hours")
        @printOption(selected, "24",    "1 day")
    </select>
}
@helper printHoursMaxBookingTime(string selected){
    // Maximum booking time: 1 hour, 2 hours, 3 hours, 4 hours, 5 hours, 6 hours, 7 hours, 8 hours, 12 hours, 18 hours, 1 day
    <select name="max-time">
        <option value=""></option>
        @printOption(selected, "1",     "1 hour")
        @printOption(selected, "2",     "2 hours")
        @printOption(selected, "3",     "3 hours")
        @printOption(selected, "4",     "4 hours")
        @printOption(selected, "5",     "5 hours")
        @printOption(selected, "6",     "6 hours")
        @printOption(selected, "7",     "7 hours")
        @printOption(selected, "8",     "8 hours")
        @printOption(selected, "12",    "12 hours")
        @printOption(selected, "18",    "18 hours")
        @printOption(selected, "24",    "1 day")
    </select>
}
@helper printHoursBetweenBookingTime(string selected){
    // Minimum time between bookings: 5 minutes, 10 minutes, 15 minutes, 30 minutes, 45 minutes, 1 hour, 2 hours, 3 hours, 4 hours, 5 hours, 6 hours
    <select name="between-time">
        <option value=""></option>
        @printOption(selected, "0", "0 minutes")
        @printOption(selected, "0.08",  "5 minutes")
        @printOption(selected, "0.16",  "10 minutes")
        @printOption(selected, "0.25",  "15 minutes")
        @printOption(selected, "0.5",   "30 minutes")
        @printOption(selected, "0.75",  "45 minutes")
        @printOption(selected, "1",     "1 hour")
        @printOption(selected, "2",     "2 hours")
        @printOption(selected, "3",     "3 hours")
        @printOption(selected, "4",     "4 hours")
        @printOption(selected, "5",     "5 hours")
        @printOption(selected, "6",     "6 hours")
    </select>
}

<p class="setting-instructions">
What hours do you keep? We’d like to know when we can generally expect to schedule your appointments.   
</p>
<div>
<form action="@(LcUrl.LangPath)$Dashboard/$CalendarAvailabilityForm/" method="post" class="positionavailability ajax ajax-box" id="@idprefix">
    @LcHelpers.GetValidationScripts()
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="positionavailability-days">
        <legend>I'm available these days:</legend>
        <label class="all-days-times"><input name="all-days-times" type="checkbox" />All days/times</label>
        <ul>
            @printDaysElements(availDates)
        </ul>
    </fieldset>
    <fieldset class="positionavailability-hours">
        <legend>Generally between these hours:</legend>
        <ul>
            @printHourPerDayElements(dateHours)
        </ul>
    </fieldset>
    <fieldset class="positionavailability-program has-confirm">
        <legend>I already use a calendar program:</legend>

        <div class="confirm positionavailability-use-program">
            <label>Yes<input @LcHelpers.IsChecked(useCalendarProgram, true) type="radio" name="use-program" value="True"/></label>
            <label>No<input @LcHelpers.IsChecked(useCalendarProgram, false) type="radio" name="use-program" value="False"/></label>
        </div>
        <ul>
            <li class="positionavailability-program-type">
                <label for="@idprefix-program-type">Which type?</label>
                <select name="program-type" id="@idprefix-program-type">
                    <option @LcHelpers.IsSelected(programType, "gmail") value="gmail">Gmail</option>
                </select>
            </li>
            <li class="positionavailability-program-url">
                <label for="@idprefix-program-url">Calendar URL:</label>
                <input type="text" name="program-url" value="@programURL" id="@idprefix-program-url"/>
            </li>
        </ul>
    </fieldset>
    @if (LcCalendar.EnableNewCalendar)
    {
    <fieldset class="fs-calendar-private-url">
        <legend>My Private Calendar URL</legend>
        <p>You can link your Loconomics bookings to your calendar program by using the following URL:
        <br />Copy this URL, go to your calendar program, and choose the 'add/new calendar' option and paste it.
        <br />This URL is private to ensure only you can access your appointments. You
        may reset this URL at any time by copying and pasting the new URL into your calendar program.
        </p>
        <ul><li>
            @if (string.IsNullOrEmpty(privateUrlToken))
            {
                <span>You have not generated a private URL, please click on the 'reset' button to create one.</span>
            }
            else
            {
                <input class="calendar-private-url" readonly="readonly" type="text" value="@(LcUrl.AppUrl + "Calendar/" + u.UserID + "/" + privateUrlToken + "/ical/")" />
            }
        </li><li>
            <button class="reset-private-url-action action" type="button">Reset Private URL</button>
        </li></ul>
    </fieldset>
    }
    <fieldset class="positionavailability-booking">
        <legend>I require:</legend>
        <label title="How far in advance can clients book your services? We recommend 1 or 2 days, but it's up to you." class="has-tooltip">Time in advance of bookings:@printHoursTimeInAdvance(advanceTime.ToString("###0.##"))</label>
        <label title="Let clients know the minimum time you'll work. Please ensure any pricing you have reflects this." class="has-tooltip">Minimum booking time:@printHoursMinBookingTime(minTime.ToString("###0.##"))</label>
        @*<label>Maximum booking time:@printHoursMaxBookingTime(maxTime.ToString("###0.##"))</label>*@
        <label title="Do you need time to prepare for your next client after a booking?" class="has-tooltip">Minimum time between bookings:@printHoursBetweenBookingTime(betweenTime.ToString("###0.##"))</label>
    </fieldset>
    <fieldset class="actions">
        <button class="save main-action" type="submit">Save</button>
    </fieldset>
</form>
<script type="text/javascript">
    $(function () {
        $('.positionavailability-hours select').change(function () {
            var day = parseInt($(this).data('day-index'));
            if (!isNaN(day)) {
                $(this).closest('form')
                .find('.positionavailability-days input[value=True][name=availday-' + day + ']')
                .prop('checked', true);
            }
        });

        $('.calendar-private-url').focus(function () {
            $(this).select();
        });
        $('.reset-private-url-action').click(function () {
            var f = $(this).closest('form');
            f.append('<input type="hidden" name="reset-private-url" value="True" />')
            .submit();
        });

        $('.positionavailability .all-days-times input').change(function () {
            if (this.checked) {
                var $f = $(this).closest('.positionavailability');
                // Set days as 'yes'
                $f.find('.positionavailability-days input[value=True]').prop('checked', true);
                // Set hours as 'all day - 12AM-12AM' (selecting the same option on both selects is fine)
                $f.closest('.positionavailability')
                .find('.positionavailability-hours select option:first-child')
                .prop('selected', true);
            }
        });
        $('.positionavailability-hours :input, .positionavailability-days ul :input').change(function () {
            $(this).closest('form').find('.all-days-times input').prop('checked', false);
        });
    });
</script>
</div>