@using WebMatrix.Data;
@{
    LcHelpers.ProviderPage();

    // Current user data
    var u = LcData.UserInfo.GetUserRow();
    var idprefix = "availability-form";
    
    var action = IsPost ? 
        Request["reset-private-url"].AsBool()
        ? "reset-private-url"
        : "save"
        : "load";

    if (action == "reset-private-url") {
        resetPrivateUrl(u.UserID);
        action = "load";
    }

    // From 0 (sunday) to 6 (saturday), true: is available. ON DATABASE use base-1; base-zero only arrays on this page
    bool[] availDates = new bool[7];
    // From 0 (sunday) to 6 (saturday), sub-index 0: start time, sub-index 1: end time
    TimeSpan[,] dateHours = new TimeSpan[7,2];
    var programURL = "";
    var advanceTime = 24M;
    var betweenTime = 0M;
    var privateUrlToken = "";

    var varSQLGetUserCalendarProviderAttributes = "EXEC GetUserCalendarProviderAttributes @0";
    
    Validation.Add("program-url", Validator.StringLength(500, 0, "Calendar URL must be fewer than 500 characters."));
    Validation.Add("program-url", Validator.Url("Calendar URL is not valid"));
    
    if (action == "load") {
        dynamic atts = null;
        var hoursData = LcCalendar.GetProviderWorkHours((int)u.UserID);
        using (var db = Database.Open("sqlloco")) {
            atts = db.QuerySingle(varSQLGetUserCalendarProviderAttributes, u.UserID);  
        }
        if (hoursData != null) {
            foreach (var dayHours in hoursData) {
                var dow = (int)dayHours.DayOfWeek;
                availDates[dow] = true;
                dateHours[dow, 0] = dayHours.StartTime;
                dateHours[dow, 1] = dayHours.EndTime;
            }
        }
        if (atts != null) {
            programURL              = atts.CalendarURL;
            advanceTime             = atts.AdvanceTime;
            betweenTime             = atts.BetweenTime;
            privateUrlToken         = atts.PrivateCalendarToken;
        }
    } else if (action == "save") {
        for (int d = 0; d < 7; d++) {
            availDates[d]   = Request["availday-" + d.ToString()].AsBool();
            dateHours[d, 0] = Request["day-" + d.ToString() + "-since-hour"].AsDateTime().TimeOfDay;
            dateHours[d, 1] = Request["day-" + d.ToString() + "-to-hour"].AsDateTime().TimeOfDay;
            
            // Validate start-end datetimes
            if (dateHours[d, 0] > dateHours[d, 1]) {
                ModelState.AddError("availday-" + d.ToString(), string.Format("{0}: your end time can not be before your start time. Please review and correct.", (DayOfWeek)d).ToString().Capitalize());
            }
        }
        programURL              = Request["program-url"];
        advanceTime             = Request["advance-time"].AsDecimal();
        betweenTime             = Request["between-time"].AsDecimal();
        
        if (Request["advance-time"].IsEmpty()) {
            ModelState.AddError("advance-time", LcRessources.RequiredField("Time in advance of bookings"));
        }
        if (Request["between-time"].IsEmpty()) {
            ModelState.AddError("between-time", LcRessources.RequiredField("Minimum time between bookings"));
        }

        if (Validation.IsValid() && ModelState.IsValid) {
            
            var varSqlInsertCalendarProviderAttributes = "EXEC dbo.InsertCalendarProviderAttributes @0,@1,@2,@3,@4,1,'',@5,@6";
            
            var beforePositionStatuses = LcData.UserInfo.GetUserPositionsStatuses((int)u.UserID);

            using (var db = Database.Open("sqlloco")) {
                // Save data

                db.Execute(varSqlInsertCalendarProviderAttributes, u.UserID, 
                    advanceTime,
                    0, // minTime: its being gradually removed, firstly from user use and later totally from code and db #252
                    0, // minTime: its being gradually removed, firstly from user use and later totally from code and db #279
                    betweenTime,
                    programURL,
                    privateUrlToken);
             
                for (int d = 0; d < 7; d++) {
                    if (availDates[d]) {
                        LcCalendar.SetProviderWorkHours(
                            u.UserID,
                            new LcCalendar.WorkHoursDay {
                                DayOfWeek = (DayOfWeek)d,
                                StartTime = dateHours[d, 0],
                                EndTime = dateHours[d, 1]
                            }
                        );
                    } else {
                        LcCalendar.DelProviderWorkHours(
                            u.UserID,
                            (DayOfWeek)d
                        );
                    }
                }
                
                db.Execute("EXEC TestAlertAvailability @0", u.UserID);
                
                // Do a calendar import for this user, to get inmediate results instead of wait for ScheduleTask
                if (LcValidators.IsUrl(programURL)) {
                    // TODO: Do the task in asynchronous way to be quickly returning the result to the user
                    //var async = new PageAsyncTask(new EventHandler(LcCalendar.Import), null, null, null, true);
                    try{
                        LcCalendar.Import(u.UserID, programURL);
                    }catch{}
                }

                // Show the profile activation popup with 'next-step' buttons and progress information when need,
                // if not the short message is showed:
                if (!LcHelpers.UseProfileActivationPopup(beforePositionStatuses,
                    u.UserID,
                    "Availability data was succesful saved.",
                    "Edit availability"))
                {
                    LcHelpers.ReturnJsonResult(5, LcRessources.ShortDataSaved);
                }
            }
        }
    }
}
@functions {
    void resetPrivateUrl(int userID){
        using (var db = Database.Open("sqlloco")) {
            var newtoken = LcEncryptor.GenerateRandomToken(userID.ToString());
            db.Execute(@"
                UPDATE  CalendarProviderAttributes
                SET     PrivateCalendarToken = @1
                WHERE   UserID = @0
            ", userID, newtoken);
        }
    }
}
@helper printOptionsHours(TimeSpan selectedHour){
    var firstHour = new TimeSpan(0, 0, 0);
    var lastHour = new TimeSpan(24, 0, 0);
    var interval = new TimeSpan(0, 15, 0);
    for (var hour = firstHour; hour <= lastHour; hour += interval)
    {
        <option @LcHelpers.IsSelected(selectedHour.ToString("c"), hour.ToString("c")) value="@hour.ToString("c")">@((new DateTime(hour.Ticks)).ToShortTimeString())</option>
    }
}
@helper printHourPerDayElements(dynamic dateHours){
    var days = new string[]{"Sundays", "Mondays", "Tuesdays", "Wednesdays", "Thursdays", "Fridays", "Saturdays"};

    for (var d = 0; d < 7; d++){
    <li>
        <span class="day">@days[d]</span>
        <select data-day-index="@d" name="day-@d-since-hour">@printOptionsHours(dateHours[d, 0])</select>
        and
        <select data-day-index="@d" name="day-@d-to-hour">@printOptionsHours(dateHours[d, 1])</select>
    </li>
    }
}
@helper printDaysElements(bool[] availDates){
    var days = new string[]{"Sundays",  "Mondays", "Tuesdays", "Wednesdays", "Thursdays", "Fridays", "Saturdays"};
    for (var d = 0; d < 7; d++){
        <li>
            <span class="day">@days[d]</span>
            <label>Yes<input @LcHelpers.IsChecked(availDates[d], true) name="availday-@d" value="True" type="radio"/></label>
            <label>No<input @LcHelpers.IsChecked(availDates[d], false) name="availday-@d" value="False" type="radio"/></label>
        </li>
    }
}
@helper printOption(string selected, string val, string label) {
    <option @LcHelpers.IsSelected(selected, val) value="@val">@label</option>
}
@helper printHoursTimeInAdvance(string selected){
    <select name="advance-time">
        <option value=""></option>
        @printOption(selected, "1",     "1 hour")
        @printOption(selected, "1.5",   "1.5 hours")
        @printOption(selected, "2",     "2 hours")
        @printOption(selected, "2.5",   "2.5 hours")
        @printOption(selected, "3",     "3 hours")
        @printOption(selected, "4",     "4 hours")
        @printOption(selected, "5",     "5 hours")
        @printOption(selected, "6",     "6 hours")
        @printOption(selected, "7",     "7 hours")
        @printOption(selected, "8",     "8 hours")
        @printOption(selected, "12",    "12 hours")
        @printOption(selected, "18",    "18 hours")
        @printOption(selected, "24",    "1 day")
        @printOption(selected, "48",    "2 days")
        @printOption(selected, "72",    "3 days")
        @printOption(selected, "96",    "4 days")
        @printOption(selected, "120",   "5 days")
        @printOption(selected, "144",   "6 days")
        @printOption(selected, "168",   "1 week")
        @printOption(selected, "336",   "2 weeks")
    </select>
}
@helper printHoursBetweenBookingTime(string selected){
    <select name="between-time">
        <option value=""></option>
        @printOption(selected, "0", "0 minutes")
        @printOption(selected, "0.08",  "5 minutes")
        @printOption(selected, "0.16",  "10 minutes")
        @printOption(selected, "0.25",  "15 minutes")
        @printOption(selected, "0.5",   "30 minutes")
        @printOption(selected, "0.75",  "45 minutes")
        @printOption(selected, "1",     "1 hour")
        @printOption(selected, "2",     "2 hours")
        @printOption(selected, "3",     "3 hours")
        @printOption(selected, "4",     "4 hours")
        @printOption(selected, "5",     "5 hours")
        @printOption(selected, "6",     "6 hours")
    </select>
}

<p class="setting-instructions">
What hours do you keep? We’d like to know when we can generally expect to schedule your appointments. You can add client bookings and other appointments that you have outside of Loconomics by clicking the <a href="#availabilityEvents">Appointments</a> tab. <a href="https://loconomics.zendesk.com/entries/24007951-Adding-Updating-your-general-availability" target="_blank" >Watch this short video</a> if you need help.
</p>
<div>
<form action="@(LcUrl.LangPath)$Dashboard/$CalendarAvailabilityForm/" method="post" class="positionavailability ajax ajax-box" id="@idprefix">
    @LcHelpers.GetValidationScripts()
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="positionavailability-days">
        <legend>I'm available these days:</legend>
        <label class="all-days-times"><input name="all-days-times" type="checkbox" />All days/times</label>
        <ul>
            @printDaysElements(availDates)
        </ul>
    </fieldset>
    <fieldset class="positionavailability-hours">
        <legend>Generally between these hours:</legend>
        <ul>
            @printHourPerDayElements(dateHours)
        </ul>
    </fieldset>
    <fieldset class="positionavailability-program has-confirm">
        <legend>Sync your existing calendar to Loconomics:</legend>
        <ul>
            <li class="positionavailability-program-url">
                <label for="@idprefix-program-url">Please paste the URL from your iCal-supported calendar to import your free/busy information here:</label>
                <input type="text" name="program-url" value="@programURL" id="@idprefix-program-url"/>
                <label for="@idprefix-private-url">Please copy this URL and paste it into your iCal-supported calendar to sync all your Loconomics appointments:</label>
            		@if (string.IsNullOrEmpty(privateUrlToken))
            		{
                		<span>You have not generated a private URL, please click on the 'reset' button to create one.</span>
            		}
            		else
            		{
                		<input id="@idprefix-private-url" class="calendar-private-url" readonly="readonly" type="text" value="@(LcUrl.AppUrl + "Calendar/" + u.UserID + "/" + privateUrlToken + "/ical/")" />
            		}
                <button class="reset-private-url-action action" type="button">Reset Private URL</button>
        		<br />This URL is private to ensure only you can access your appointments. You may reset this URL at any time by clicking the button above and copying and pasting the new URL into your calendar program.
            </li>
        </ul>
        <legend>If you need help, click on your calendar program below:</legend>
            <li class="positionavailability-program-url">
            <p>
            <br /><a href="https://loconomics.zendesk.com/entries/24018953-Syncing-to-your-Google-calendar" target="_blank" >Google</a>
            <br /><a href="https://loconomics.zendesk.com/entries/24007941-Syncing-to-your-Android-calendar" target="_blank" >Android</a>
            <br /><a href="https://loconomics.zendesk.com/entries/24006092-Syncing-to-your-Apple-iOS-iCal-calendar" target="_blank" >Apple iPhone/iPad</a>
            <br /><a href="https://loconomics.zendesk.com/entries/24018963-Syncing-to-your-Apple-iCal-desktop-calendar" target="_blank" >Apple iCal desktop</a>
            <br /><a href="https://loconomics.zendesk.com/entries/24006082-Syncing-to-your-Yahoo-calendar" target="_blank" >Yahoo!</a>
            <br /><a href="https://loconomics.zendesk.com/entries/24028398-Syncing-to-your-Windows-Live-calendar" target="_blank" >Outlook/Windows Live</a>
            </p>
            </li>
        </ul>
    </fieldset>
    <fieldset class="positionavailability-booking">
        <legend>I require:</legend>
        <label title="How far in advance can clients book your services? We recommend 1 or 2 days, but it's up to you." class="has-tooltip">Time in advance of bookings:@printHoursTimeInAdvance(advanceTime.ToString("###0.##"))</label>
        <label title="Do you need time to prepare for your next client after a booking?" class="has-tooltip">Minimum time between bookings:@printHoursBetweenBookingTime(betweenTime.ToString("###0.##"))</label>
    </fieldset>
    <fieldset class="actions">
        <button class="save main-action" type="submit">Save</button>
    </fieldset>
</form>
</div>