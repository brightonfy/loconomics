@* Allows upload a new image for the user profile photo (or avatar).
// TODO: reimplement this and the script dahsboard/changeProfilePhoto.js to avoid iframes and exposing global js functions,
// direct API use without iframe-normal post support (current browser matrix allow us this?)
*@
@using WebMatrix.Data;
@using WebMatrix.WebData;
@functions{
    
    const int fixedSizeWidth = 112;
    const int fixedSizeHeight = 118;
    const string avatarName = "$avatar";
    const string avatarNamePrefix = avatarName + "-";
    
    void UpdateDb(int userId, bool hasPhoto){
        using (var db = Database.Open("sqlloco")){
            // We set the name, now ever fixed as '$avatar', without extension, to allow TestAlertPhoto validate this,
            // no more because is not need.
            db.Execute(@"
                UPDATE  users
                SET     photo=@0
                WHERE   UserID=@1
                -- Check Alerts:
                EXEC TestAlertPhoto @1
            ", hasPhoto ? "$avatar" : null, userId);
        }
    }
    
    /// <summary>
    /// Save the uploaded photo as an image on the user folder
    /// with a greater size than usual but limited,
    /// for later use on cropping and resizing tasks.
    /// </summary>
    /// <param name="photo"></param>
    /// <param name="virtualPath"></param>
    void SaveEditableAvatar(Stream photo, string virtualPath) {
        // Check folder or create
        var folder = Server.MapPath(virtualPath);
        if (!Directory.Exists(folder)) {
            Directory.CreateDirectory(folder);
        }

        // Use file as image
        using (var srcImg = System.Drawing.Image.FromStream(photo)) {
            
            // Resize to maximum allowed size (but not upscale) to allow user cropping later
            var img = LcImaging.Resize(srcImg, fixedSizeWidth * 4, fixedSizeHeight * 4, LcImaging.SizeMode.Contain);

            // Save:
            img.Save(folder + avatarName + ".jpg", System.Drawing.Imaging.ImageFormat.Jpeg);
        }
        
        photo.Dispose();
    }
    
    /// <summary>
    /// Sets the previously uploaded 'editable avatar' image as the
    /// current user avatar, cropped with the given values and 
    /// optimized sizes.
    /// </summary>
    /// <param name="virtualPath"></param>
    void SaveAvatar(string virtualPath, int x, int y, int width, int height) {
        
        var folder = Server.MapPath(virtualPath);

        // Remove previous cropped/sized/adapted photos (except editable one), all start with avatarNamePrefix
        // File.Delete doesn't allow wildcards, find and delete each one
        foreach (var f in Directory.GetFiles(folder, avatarNamePrefix + "*", SearchOption.TopDirectoryOnly))
            File.Delete(f);

        // Create optimized files
        using (var img = System.Drawing.Image.FromFile(folder + avatarName + ".jpg")) {
            
            // Crop
            var cropImg = LcImaging.Crop(img, x, y, width, height);
            img.Dispose();
            
            // Size prefix
            var sizeName = fixedSizeWidth.ToString() + "x" + fixedSizeHeight.ToString();
            
            // Save image with profile size and original color
            using (var modImg = LcImaging.Resize(cropImg, fixedSizeWidth, fixedSizeHeight, LcImaging.SizeMode.Cover, LcImaging.AnchorPosition.Center)) {
                modImg.Save(folder + avatarNamePrefix + sizeName + ".jpg");
            }
            
            // Save image with profile size and grayscale (-gray)
            using (var modImg = LcImaging.Grayscale(LcImaging.Resize(cropImg, fixedSizeWidth, fixedSizeHeight, LcImaging.SizeMode.Cover, LcImaging.AnchorPosition.Center))) {
                modImg.Save(folder + avatarNamePrefix + sizeName + "-gray.jpg", System.Drawing.Imaging.ImageFormat.Jpeg);
            }
            
            // Same as previous but for hi-res 2x devices: (real pixel sizes is double but preserve the original size name to recognize it better adding the @2x suffix
            using (var modImg = LcImaging.Grayscale(LcImaging.Resize(cropImg, fixedSizeWidth * 2, fixedSizeHeight * 2, LcImaging.SizeMode.Cover, LcImaging.AnchorPosition.Center))) {
                modImg.Save(folder + avatarNamePrefix + sizeName + "-gray@2x.jpg", System.Drawing.Imaging.ImageFormat.Jpeg);
            }
            
            // NOTE Creation of images with more sizes (for small user widgets on reviews/bookings/etc) or filters go here
        }
    }
}
@{
    LcHelpers.SecurePage();
    var userId = WebSecurity.CurrentUserId;
    bool processed = false;
    string basePath = "img/userphotos/u" + userId.ToString() + "/";
    string virtualPath = LcUrl.RenderAppPath + basePath;
    string editableAvatarUrl = LcUrl.AppPath + basePath + avatarName + ".jpg?v=" + DateTime.Now.ToString().Replace(" ", "");
    
    var cropSaveAvatar = Request["save-avatar"].AsBool();
    
    if (cropSaveAvatar) {
        
        SaveAvatar(virtualPath,
            (int)Math.Round(Request["x1"].AsDecimal()), 
            (int)Math.Round(Request["y1"].AsDecimal()),
            (int)Math.Round(Request["w"].AsDecimal()),
            (int)Math.Round(Request["h"].AsDecimal())
        );
        
        // File saved, change the user preference at the database:
        UpdateDb(userId, true);
        
        Json.Write(
            new Dictionary<string, object>(){
                { "success", "Your photo is ready!" }
            },
            Response.Output
        );
        Response.End();
    }
    else {
        // Delete file support:
        if (Request["delete"].AsBool()) {
            // We don't need the upload staff here, simply update database removing all file, both
            // managed by next common function:
            UpdateDb(userId, false);
        
            LcHelpers.ReturnJsonResult(0, "Photo was removed");
        }
    
        // qq File uploader support, XHR Upload
        if (!String.IsNullOrEmpty(Request["qqfile"])){
            string fileName = (string)Request["qqfile"];
        
            try{
                if (Request.InputStream.Length > 0) {
                    SaveEditableAvatar(Request.InputStream, virtualPath);
                } else {
                    // Emulate standard error, next its replaced by better message
                    ModelState.AddFormError("Maximum request length exceeded");
                }
            } catch(Exception ex) {
                ModelState.AddFormError(ex.Message);
            }
        
            // File saved, change the user preference at the database:
            UpdateDb(userId, true);
        
            processed = true;
        } else if (IsPost){

            var fileuploaded = Request.Files["qqfile"] ?? Request.Files["avatar"];
            
            if (fileuploaded == null || String.IsNullOrEmpty(fileuploaded.FileName)) {
                ModelState.AddFormError("Please, select an image");
            }

            if (ModelState.IsValid) {
                System.IO.FileInfo fileinfo = new FileInfo(fileuploaded.FileName);
            
                try{
                    if (Request.InputStream.Length > 0) {
                        SaveEditableAvatar(fileuploaded.InputStream, virtualPath);
                    } else {
                        // Emulate standard error, next its replaced by better message
                        ModelState.AddFormError("Maximum request length exceeded");
                    }
                } catch(Exception ex) {
                    ModelState.AddFormError(ex.Message);
                }
            
                // File saved, change the user preference at the database:
                UpdateDb(userId, true);
            }
        
            processed = true;
        } else {
            // Manage normal GET
        }

        if (processed) {
            if (ModelState.IsValid) {
                // NOTE: There is some issues with IE managing this result with contenttype=json
                // because of this, here we use directly the Json helper instead our helper
                //LcHelpers.ReturnJson(
                Json.Write(
                    new Dictionary<string, object>(){
                        { "success", "File was saved" }
                    },
                Response.Output);
                Response.End();
                
                /*LcHelpers.ReturnJson(
                    new Dictionary<string, object>(){
                        { "success", "File was saved" }
                    }
                );*/
            } else {
                var errMsg = String.Join("; ", ModelState.Values.First().Errors);
                
                // We don't want the ugly default asp.net message for file-size-exceeded
                // As of #454 (https://github.com/dani0198/Loconomics/issues/454#issuecomment-37782181)
                if (errMsg.Contains("Maximum request length exceeded")) {
                    
                    var max = LcHelpers.GetMaxRequestSize();
                    var printMax = "";
                    if (max > 0) {
                        printMax = LcHelpers.PrettyFileSize(max * 1024);
                        
                        errMsg = "The file is too large, maximum file size is " + printMax;
                    } else {
                        errMsg = "The file is too large";
                    }
                }

                // NOTE: IE problems with contentype=json, use JsonHelper directly:
                //LcHelpers.ReturnJson(
                Json.Write(
                    new Dictionary<string, object>(){
                        { "error", LcRessources.GetText("an-error", errMsg) }
                    },
                    Response.Output);
                Response.End();
            }
        }
    }
}
@{
    // Main assets that allow minification
    var styleCss = "Styles/common";
    var loadScripts = new List<string>();
    // Enabled only on dev
    if (LcHelpers.InDev) {
        loadScripts.Add("libs.js");
        loadScripts.Add("app.js");
        styleCss += ".css";
    } else {
        loadScripts.Add("common.min.js");
        styleCss += ".min.css";
    }
}
<html>
    <head>
        @*<script src="@Href(LcUrl.AppPath + "Scripts/jquery/jquery-1.7.2.min.js")" type="text/javascript"></script>
            Jquery its already in common.min.js, and we reuse that because is already cached by the client browser.
        *@
        @LcAssets.PrintStyleTag(LcUrl.AppPath + styleCss)
        @foreach (var js in loadScripts)
        {
            @LcAssets.PrintScriptTag(LcUrl.AppPath + "Scripts/" + js)
        }

        <script src="@Href(LcUrl.AppPath + "Scripts/fileuploader/fileuploader.js")" type="text/javascript"></script>

        <script src="@Href(LcUrl.AppPath + "Scripts/jcrop/js/jquery.Jcrop.min.js")" type="text/javascript"></script>
        <link rel="stylesheet" href="@Href(LcUrl.AppPath + "Scripts/jcrop/css/jquery.Jcrop.min.css")" />

        <script type="text/javascript">
            @Html.Raw(LcUrl.ToJsVar())
        </script>
        <style type="text/css">
            html:after,
            html:before {
                display: none;
            }
            body {
                font-family: "Alte Haas Grotesk", Helvetica, Arial, sans-serif;
                padding: 1em;
            }
        </style>

        <script type="text/javascript">
            @{
                int sizeLimit = LcHelpers.GetMaxRequestSize() * 1024;
                // DEBUG: forcing no limit to debug server response on 'maximum request size exceded' error
                //sizeLimit = 0;
            }

            $(document).ready(function () {
                var uploader = new qq.FileUploader({
                    element: document.getElementById('change-photo-file-uploader'),
                    // path to server-side upload script
                    action: LcUrl.LangPath + 'dashboard/AboutYou/ChangePhoto/',
                    allowedExtensions: ['jpg', 'jpeg', 'png', 'gif'],
                    onComplete: function (id, fileName, responseJSON) {
                        // Go to crop photo:
                        showCropPhoto();
                    },
                    messages: {
                        typeError: "{file} has invalid extension. Only {extensions} are allowed.",
                        sizeError: "{file} is too large, maximum file size is {sizeLimit}.",
                        minSizeError: "{file} is too small, minimum file size is {minSizeLimit}.",
                        emptyError: "{file} is empty, please select files again without it.",
                        onLeave: "The files are being uploaded, if you leave now the upload will be cancelled."
                    },
                    sizeLimit: @(sizeLimit > 0 ? sizeLimit.ToString() : "undefined"),
                    template: '<div class="qq-uploader actions">' + 
                            '<div class="qq-upload-drop-area"><span>Drop a file here to upload</span></div>' +
                            '<div class="qq-upload-button">Choose a photo</div>' +
                            '<ul class="qq-upload-list"></ul>' + 
                         '</div>',
                });
            });
        </script>
        <script type="text/javascript">
            jQuery(function ($) {

                // Setup cropping form
                var $f = $('#crop-photo form');
                $f.on('submit', function (e) {
                    e.preventDefault();

                    $.ajax({
                        url: $f.attr('action'),
                        method: $f.attr('method'),
                        data: $f.serialize(),
                        success: function (data) {
                            // Avatar cropped, resized and saved!
                            window.parent.reloadUserPhoto();
                            $('#crop-photo').slideUp('fast');
                            window.parent.closePopupUserPhoto();
                        },
                        error: function (xhr, er) {
                            alert('Sorry, there was an error setting-up your photo. ' + (er || ''));
                        }
                    });
                });

                // Setup img cropping
                var $img = $('#cropimg');
                $img.Jcrop({
                    onChange: showCoords,
                    onSelect: showCoords,
                    onRelease: clearCoords,
                    aspectRatio: $img.data('target-width') / $img.data('target-height')
                }, function () {
                    jcrop_api = this;
                    // Initial selection to show user that can choose an area
                    if ($img.height() > 0)
                        jcrop_api.setSelect([0, 0, $img.width(), $img.height()]);
                    else
                        $img.on('load', function () {
                            jcrop_api.setSelect([0, 0, $img.width(), $img.height()]);
                        });
                });

                // Enable crop editor
                var $cp = $('#crop-photo');
                // If an image is loaded, show up the cropping tool
                function showEditorIfImage() {
                    if ($img.height() > 30) {
                        $cp.slideDown('fast');
                        return true;
                    }
                    else return false;
                }
                if (!showEditorIfImage()) {
                    // Show on image load, if any
                    $img.on('load', showEditorIfImage);
                }
            });

            // Simple event handler, called from onChange and onSelect
            // event handlers, as per the Jcrop invocation above
            function showCoords(c) {
                $('#x1').val(c.x);
                $('#y1').val(c.y);
                $('#x2').val(c.x2);
                $('#y2').val(c.y2);
                $('#w').val(c.w);
                $('#h').val(c.h);
            };

            function clearCoords() {
                $('#coords input').val('');
            };

            function showCropPhoto() {

                var $p = $('#crop-photo');
                // Force image reload
                $p.find('img').attr('src', function() {
                    return $(this).attr('src') + "?v=" + (new Date()).getTime();
                });

                $p.slideDown('fast');
                $('#delete-photo').hide();
            }
        </script>
    </head>
    <body>
        <div class="change-photo FileUploader">
            <div id="change-photo-file-uploader" class="FileUploader-uploader">
            </div>
            <div id="crop-photo" class="FileUploader-editor" style="display:none">
                <p>Please use the tool below to crop your photo</p>
                <img src="@editableAvatarUrl" id="cropimg" data-target-width="@fixedSizeWidth" data-target-height="@fixedSizeHeight" alt="Edit photo" />
                <form action="@(LcUrl.LangPath)$dashboard/AboutYou/ChangePhoto/" method="post">
                    <div id="coords">
                        <input type="hidden" id="x1" name="x1" />
                        <input type="hidden" id="y1" name="y1" />
                        <input type="hidden" id="x2" name="x2" />
                        <input type="hidden" id="y2" name="y2" />
                        <input type="hidden" id="w" name="w" />
                        <input type="hidden" id="h" name="h" />
                    </div>
                    <div class="actions">
                        <input type="hidden" name="save-avatar" value="True" />
                        <input type="submit" class="save-photo-action" value="Save photo changes" />
                    </div>
                </form>
            </div>
            <div id="delete-photo" class="actions FileUploader-removal">
                <button type="button" class="remove-photo-action">Remove photo</button>
                <script type="text/javascript">
                    jQuery('#delete-photo > button').click(function () {
                        window.parent.deleteUserPhoto();
                    })
                    .hover(function () {
                        jQuery(this).addClass('qq-upload-button-hover');
                    }, function () {
                        jQuery(this).removeClass('qq-upload-button-hover');
                    });
                </script>
            </div>
        </div>
    </body>
</html>