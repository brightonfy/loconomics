@* Test pricing and fees calculation defined for providers pricing
 *@
@{
    LcHelpers.TestArea();
    Layout = "_TestLayout.cshtml";

	var basePrice = Request["basePrice"].AsDecimal(25.00M);
	var feeRate = Request["feeRate"].AsDecimal(.05M);
    var fixedFeeAmount = Request["fixedFeeAmount"].AsDecimal(0);
	var roundedDecimals = Request["roundedDecimals"].AsInt(1);

	// Calculation to be tested:
    var price = new LcPricingModel.Price(
		basePrice,
		new LcPricingModel.FeeRate { Currency = fixedFeeAmount, Percentage  = feeRate },
		roundedDecimals
	);
    
    var durationHours = Request["hours"].AsDecimal();
    var durationTime = Request["time"].AsTimeSpan();
    var roundTo = (LcHelpers.RoundingType)Enum.Parse(typeof(LcHelpers.RoundingType), Request["roundTo"] ?? "Up");
    if (durationHours > 0) {
        durationTime = TimeSpan.FromHours((double)durationHours);
    }
    var duration = LcHelpers.RoundTimeToQuarterHour(durationTime, roundTo);
}
<h1>Testing Prices and Fees calculation</h1>
<style type="text/css">
    td, th
    {
        border: 1px solid #ccc;
        padding: 5px 8px;
    }
</style>
<form action="" method="get">
	<fieldset class="fixed-price">
		<legend><h2>Fixed price calculation (package price)</h2></legend>
		<label>Base price <input type="text" name="basePrice" value="@(basePrice)"/></label>
		<br/>
		<label>Fee rate (from 0 to 1) <input type="text" name="feeRate" value="@(feeRate)"/></label>
        <br/>
		<label>Fixed Fee Amount <input type="text" name="fixedFeeAmount" value="@(fixedFeeAmount)"/></label>
		<br/>
		<label>Rounded decimals <input type="text" name="roundedDecimals" value="@(roundedDecimals)"/></label>
		<br/><br/>
		<input type="submit" value="Calculate"/>
		<br/>
        <table>
            <caption>Calculation, server and client side values must match</caption>
            <tr>
                <th></th>
                <th>Server side results (press 'calculate')</th>
                <th>Client side results (instant)</th>
            </tr>
            <tr>
                <td>Base price</td>
                <td>@price.BasePrice.ToString("c")</td>
                <td><span id="basePrice"></span></td>
            </tr>
            <tr>
                <td>Fee price</td>
                <td>@price.FeePrice.ToString("c")</td>
                <td><span id="feePrice"></span></td>
            </tr>
            <tr>
                <td>Total price</td>
                <td>@price.TotalPrice.ToString("c")</td>
                <td><span id="totalPrice"></span></td>
            </tr>
            <tr>
                <td>Fee rate</td>
                <td>@price.FeeRate = @(price.FeeRate.ToString("0%"))</td>
                <td><span id="feeRate"></span> = <span id="feePercentage"></span>%</td>
            </tr>
            <tr>
                <td>Fixed fee amount</td>
                <td>@price.FixedFeeAmount.ToString("c")</td>
                <td><span id="fixedFeeAmount"></span></td>
            </tr>
        </table>
	</fieldset>
	<script type="text/javascript">
	    jQuery(function ($) {
	        $('form input').change(function () {
	            // Calculate
	            var basePrice = LC.roundTo(parseFloat($('[name=basePrice]').val()), 2),
					feeRate = parseFloat($('[name=feeRate]').val()),
                    fixedFeeAmount = parseFloat($('[name=fixedFeeAmount]').val()),
                    fee = { feeRate: feeRate, fixedFeeAmount: fixedFeeAmount },
	                roundedDecimals = parseFloat($('[name=roundedDecimals]').val());

	            // Calculation to be tested:
	            var price = new LC.Price(basePrice, fee, roundedDecimals);

	            // Write results
	            LC.setMoneyNumber(price.basePrice, $('#basePrice'));
	            LC.setMoneyNumber(price.feePrice, $('#feePrice'));
	            LC.setMoneyNumber(price.totalPrice, $('#totalPrice'));
	            $('#feeRate').text(price.feeRate);
	            $('#feePercentage').text(LC.roundTo(price.feeRate * 100, 2));
	            LC.setMoneyNumber(price.fixedFeeAmount, $('#fixedFeeAmount'));
	        }).change();
	    });
	</script>
    <fieldset class="time">
        <legend><h2>Rounding duration to 'quarter-hour' (15 minutes)</h2></legend>
        <label>Hours: <input type="text" name="hours" value="@durationHours" /></label>
        or <label>Time: <input type="text" name="time" value="@durationTime" /></label>
        <div>
            <label>Round to Down <input @LcHelpers.IsChecked(roundTo, LcHelpers.RoundingType.Down) type="radio" name="roundTo" value="Down" /></label>
            <label>Round to Nearest <input @LcHelpers.IsChecked(roundTo, LcHelpers.RoundingType.Nearest) type="radio" name="roundTo" value="Nearest" /></label>
            <label>Round to Up <input @LcHelpers.IsChecked(roundTo, LcHelpers.RoundingType.Up) type="radio" name="roundTo" value="Up" /></label>
        </div>
        <input type="submit" value="Calculate" />
        <table>
            <tr>
                <th></th>
                <th>Server side</th>
                <th>Client side</th>
            </tr>
            <tr>
                <td>Duration</td>
                <td>@duration</td>
                <td><span id="duration"></span></td>
            </tr>
        </table>
    </fieldset>
    <script type="text/javascript">
        jQuery(function ($) {
            var $f = $('form .time');
            $f.on('change', 'input', function () {
                var durationHours = parseFloat($f.find('[name=hours]').val()),
                    durationTime = LC.timeSpan.parse($f.find('[name=time]').val()),
                    roundTo = LC.enum.parse(LC.roundingTypeEnum, $f.find('[name=roundTo]:checked').val());

                durationTime = durationTime || LC.timeSpan.fromHours(durationHours);

                // Calculate
                var duration = LC.roundTimeToQuarterHour(durationTime, roundTo);
                // Results
                $f.find('#duration').text(duration.toString());
            }).find('input').change();
        });
    </script>
</form>