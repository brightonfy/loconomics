@{
    LcHelpers.TestArea();
    Layout = "_TestLayout.cshtml";
}
<div>
	<style>
		.provider-average-time {
			position: relative;
			padding-bottom: 1em;
		}
		.provider-average-time > label { }
		.provider-average-time .average-label {
			position:absolute;
			left:36%;
			right:36%;
			text-align:center
		}
		.provider-average-time .below-average-label { }
		.provider-average-time .above-average-label {
			position: absolute;
			right: 0;
		}
		
	</style>
	<div id="lightcleaning" data-average-t="170.34">
		Light cleaning: Provider average time:
		<input name="provider-average-time" type="text" />
		<div class="smart-average-time"></div>
		<div class="provider-average-time">
			<div class="provider-average-time-slider"></div>
			<label class="below-average-label">Below average</label>
			<label class="average-label">Average</label>
			<label class="above-average-label">Above average</label>
		</div>
	</div>
	<div id="routinecleaning" data-average-t="200.4">
		Routine cleaning: Provider average time:
		<input name="provider-average-time" type="text" />
		<div class="smart-average-time"></div>
		<div class="provider-average-time">
			<div class="provider-average-time-slider"></div>
			<label class="below-average-label">Below average</label>
			<label class="average-label">Average</label>
			<label class="above-average-label">Above average</label>
		</div>
	</div>
	<div id="deepcleaning" data-average-t="400.8">
		Deep cleaning: Provider average time:
		<input name="provider-average-time" type="text" />
		<div class="smart-average-time"></div>
		<div class="provider-average-time">
			<div class="provider-average-time-slider"></div>
			<label class="below-average-label">Below average</label>
			<label class="average-label">Average</label>
			<label class="above-average-label">Above average</label>
		</div>
	</div>
	<script type="text/javascript">
		function smartTime(minutes) {
			minutes = Math.floor(minutes);
			var h = Math.floor(minutes / 60),
				m = minutes - h * 60,
				d = 0;
			if (h >= 24) {
				d = Math.floor(h / 24);
				h = h - d * 24;
			}
			var r = [];
			if (d > 1)
				r.push(d + ' days');
			else if (d == 1)
				r.push('1 day');
			if (h > 1)
				r.push(h + ' hours');
			else if (h == 1)
				r.push('1 hour');
			if (m > 1)
				r.push(m + ' minutes');
			else if (m == 1)
				r.push('1 minute');
			/*if (s > 1)
				r.push(s + ' seconds');
			else if (s == 1)
				r.push('1 second');*/
			return r.join(', ');
		}
		$(function(){
			function updateAverage($c, minutes) {
				$c.find( '[name=provider-average-time]' ).val( minutes );
				$c.find( '.smart-average-time' ).text( smartTime(minutes) );
			}
			$( ".provider-average-time-slider" ).each(function(){
				var $c = $(this).closest('[data-average-t]');
				var T = $c.data('average-t');
				if (!T) return;
				var setup = {
					range: "min",
					value: T,
					min: T - 3 * 20,
					max: T + 3 * 20,
					step: 20,
					slide: function( event, ui ) {
						updateAverage($c, ui.value);
					}
				};
				var slider = $(this).slider(setup);
				$c.find('.provider-average-time').on('click', 'label', function(){
					var $t = $(this);
					if ($t.hasClass('below-average-label'))
						slider.slider('value', setup.min);
					else if ($t.hasClass('average-label'))
						slider.slider('value', setup.value);
					else if ($t.hasClass('above-average-label'))
						slider.slider('value', setup.max);
					updateAverage( $c, slider.slider('value') );
				});
				updateAverage( $c, T );
			});
		});
	</script>
</div>