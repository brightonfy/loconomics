@{
    if (!LcHelpers.InDev) {
        LcHelpers.TestArea();
    }
    Layout = "_TestLayout.cshtml";
    
    var url = Request["url"];
}
<script type="text/javascript">

    var REST_API = {
        "Test": {
            "url": "/api/v1/en-US/Test",
            "get": {
                "name": "userpos"
            },
            "post": {
                "name": "Me",
                "num": "23g",
                "short": "No longer than 5"
            }
        },
        "Test item": {
            "url": "/api/v1/en-US/Test/20",
            "put": {
                "name": "Me",
                "num": 10
            },
            "delete": {}
        },
        "Test Server Error": {
            "url": "/api/v1/en-US/Test",
            "all": {
                "givemeerror": "Something goes wrong"
            }
        },

        "Availability types": {
            "url": "/api/v1/en-US/availability-types",
            "get": {}
        },

        "Event types": {
            "url": "/api/v1/en-US/event-types",
            "get": {
                "onlySelectable": false
            }
        },

        "Facebook User": {
            "url": "/api/v1/en-US/facebook-user",
            "get": {
                "do_login": false,
                "facebook_id": 324234123,
                "signed_request": "fbsr_feSDf323fsf2"
            }
        },

        "Feedback Support": {
            "url": "/api/v1/en-US/feedback/support",
            "post": {
                "message": "A problem with that you know",
                "vocElementID": 1,
                "userDevice": "{ \"userAgent\": \"Mozilla/5.0 Some Browser\" }"
            }
        },
        "Feedback Ideas": {
            "url": "/api/v1/en-US/feedback/ideas",
            "post": {
                "message": "I have an idea!",
                "vocElementID": 1,
                "becomeACollaborator": true,
                "userDevice": "{ \"userAgent\": \"Mozilla/5.0 Some Browser\" }"
            }
        },

        "Job Titles (item)": {
            "url": "/api/v1/en-US/job-titles/106",
            "get": { }
        },
        "Job Titles Autocomplete Search": {
            "url": "/api/v1/en-US/job-titles/autocomplete",
            "get": {
                "search": "massag",
                "api_comment": "The parameter 'term' is allowed too as an alias for 'search', just for easier integration with some UI components"
            }
        },

        "Login": {
            "url": "/api/v1/en-US/login",
            "post": {
                 "username": "some user email",
                 "password": "",
                 "returnProfile": false,
                 "api comment": "Param returnProfile allows to return a 'profile' property with the user profile data (table [users]). The returned 'redirectUrl' on success must be mandatory when there is a value since sometimes will be different from the given 'redirect', as for service professionals in the Onboarding, they must continue that at the step given in 'redirectUrl'. This is the fact for current Website, what rules we will manage on mobile?."
            }
        },
        "Facebook Login": {
            "url": "/api/v1/en-US/login/facebook",
            "post": {
                "accessToken": "Facebook Access Token",
                "returnProfile": true
            }
        },

        "Logout": {
            "url": "/api/v1/en-US/logout",
            "post": {}
        },

        "Postal Codes": {
            "url": "/api/v1/en-US/postal-codes/90001",
            "get": {}
        },

        "Service Types": {
            "url": "/api/v1/en-US/pricing-types",
            "get": { }
        },
        "Service Types (item)": {
            "url": "/api/v1/en-US/pricing-types/3",
            "get": { }
        },

        "Signup, detailed data required": {
            "url": "/api/v1/en-US/signup",
            "post": {
                 "email": "some user email",
                 "password": "",
                 "firstName": "John",
                 "lastName": "Smith",
                 "phone": "1234",
                 "postalCode": "90001",
                 "referralCode": "",
                 "device": "ios",
                 "profileType": "freelancer",
                 "returnProfile": false,
                 "api comment": "Same returned data as in Login, and returnProfile behaves the same too. The returned 'redirectUrl' on success must be mandatory when there is a value since sometimes will be different from the given 'redirect', as for providers in the Onboarding, they must continue that at the step given in 'redirectUrl'. This is the fact for current Website, what rules we will manage on mobile?."
            }
        },
        "Quick Signup, simplified to require just email and password": {
            "url": "/api/v1/en-US/signup/quick",
            "post": {
                 "email": "some user email",
                 "password": "",
                 "profileType": "freelancer",
                 "returnProfile": false,
                 "api comment": "Same returned data as in Login, and returnProfile behaves the same too. The returned 'redirectUrl' on success must be mandatory when there is a value since sometimes will be different from the given 'redirect', as for providers in the Onboarding, they must continue that at the step given in 'redirectUrl'. This is the fact for current Website, what rules we will manage on mobile?."
            }
        },
        "Facebook Signup": {
            "url": "/api/v1/en-US/signup/facebook",
            "post": {
                "accessToken": "Facebook Access Token",
                "profileType": "freelancer",
                "returnProfile": true
            }
        },

        "Addresses: home (ever single)": {
            "url": "/api/v1/en-US/me/addresses/home",
            "get": { },
            "put": {
                "addressName":"Home",
                "addressLine1":"Avda Castelao",
                "addressLine2":"44",
                "postalCode":"90001",
                "specialInstructions":""
            }
        },
        "Addresses: service addresses per Job Title": {
            "url": "/api/v1/en-US/me/addresses/service/106",
            "get": { },
            "post": {
                "addressName":"Workshop",
                "addressLine1":"Second street",
                "addressLine2":"102",
                "postalCode":"90001",
                "specialInstructions":"",
                "isServiceLocation":true,
                "isServiceArea":false,
                "serviceRadius":"",
                "api_comment": "Try setting isServiceLocation false for validation of almost one, and then isServiceArea:true to make address line1 and name optional."
            }
        },
        "Addresses: service addresses per Job Title (single)": {
            "url": "/api/v1/en-US/me/addresses/service/106/95",
            "get": { },
            "put": {
                "addressName":"Billing",
                "addressLine1":"Second street",
                "addressLine2":"102",
                "postalCode":"90001",
                "specialInstructions":"",
                "isServiceLocation":true,
                "isServiceArea":false,
                "serviceRadius":"",
                "api_comment": "Try setting isServiceLocation false for validation of almost one, and then isServiceArea:true to make address line1 and name optional."
            },
            "delete": { }
        },
        "Addresses: billing addresses": {
            "url": "/api/v1/en-US/me/addresses/billing",
            "get": { },
            "post": {
                "addressName":"Workshop",
                "addressLine1":"Second street",
                "addressLine2":"102",
                "postalCode":"90001",
                "specialInstructions":"",
                "api_comment": "Try setting isServiceLocation false for validation of almost one, and then isServiceArea:true to make address line1 and name optional."
            }
        },
        "Addresses: billing addresses (single)": {
            "url": "/api/v1/en-US/me/addresses/billing/71",
            "get": { },
            "put": {
                "addressName":"Workshop",
                "addressLine1":"Second street",
                "addressLine2":"102",
                "postalCode":"90001",
                "specialInstructions":"",
                "api_comment": "Try setting isServiceLocation false for validation of almost one, and then isServiceArea:true to make address line1 and name optional."
            },
            "delete": { }
        },

        "Bookings (read only)": {
            "url": "/api/v1/en-US/me/bookings",
            "get": {
                 "start": "2014-06-01T12:00:00",
                 "end": "2014-09-30T10:00:00Z"
            }
        },
        "Bookings (single; read only)": {
            "url": "/api/v1/en-US/me/bookings/73",
            "get": {}
        },

        "Calendar Syncing": {
            "url": "/api/v1/en-US/me/calendar-syncing",
            "get": { },
            "put": {
                "icalImportUrl": "http://calendar.google.com/something/ical.ics"
            }
        },
        "Calendar Syncing Reset Export URL": {
            "url": "/api/v1/en-US/me/calendar-syncing/reset-export-url",
            "post": { }
        },

        "Book a service professional (client booking)": {
            "url": "/api/v1/en-US/me/client-booking",
            "post": {
                "serviceProfessionalUserID": 141,
                "jobTitleID": 106,
                "serviceStartTime": "2015-10-19T08:30:00.000Z",
                "alternative1StartTime": "2015-10-26T09:30:00.000Z",
                "alternative2StartTime": null,
                "serviceAddress": {
                    "addressID": 240,
                    "addressName": "Service Area",
                    "addressLine1": "",
                    "postalCode": 98001,
                    "countryCode": "US",
                    "latitude": 47.3394747,
                    "longitude": -122.2667661,
                },
                "services": [8, 108],
                "promotionalCode":null,
                "billingAddress": {
                    "postalCode": 90001,
                    "paymentMethodID": "0",
                    "nameOnCard": "",
                    "cardNumber": "123456789456123",
                    "expirationMonth": "01",
                    "expirationYear": "2017",
                    "securityCode": "1565",
                    "savePayment": false
                }
            }
        },

        "Clients (list and create)": {
            "url": "/api/v1/en-US/me/clients",
            "get": { },
            "post": {
                "firstName": "John",
                "lastName": "Smith",
                "secondLastName": "",
                "email": "john@smith.net",
                "phone": "1234567",
                "canReceiveSms": true,
                "birthMonth": 2,
                "birthMonthDay": 29,
                "notesAboutCustomer": ""
            }
        },
        "Clients (item)": {
            "url": "/api/v1/en-US/me/clients/141",
            "get": { },
            "put": {
                "firstName": "John",
                "lastName": "Smith",
                "secondLastName": "",
                "email": "john@smith.net",
                "phone": "1234567",
                "canReceiveSms": true,
                "birthMonth": 2,
                "birthMonthDay": 29,
                "notesAboutCustomer": ""
            },
            "delete": { }
        },
        "Clients Public Search": {
            "url": "/api/v1/en-US/me/clients/public-search",
            "get": {
                "fullName": "John Smith",
                "email": "john@smith.net",
                "phone": "1234"
            }
        },

        "Events and to add event": {
            "url": "/api/v1/en-US/me/events",
            "get": {
                 "types": [3, 5],
                 "start": "2014-06-01T12:00:00",
                 "end": "2014-09-30T10:00:00Z",
                 "api comment": "types is optional, and will return all the types except 'work hours' by default (To review if this is the most optimal). Optional start and end dates to reduce the results, accepting ISO strings."
            },
            "post": {
                "EventTypeID":3,
                "Summary":"Housekeeper services for JoshuaProvider D.",
                "AvailabilityTypeID":3,
                "StartTime":"2014-03-25T09:00:00",
                "EndTime":"2014-03-25T19:00:00",
                "IsAllDay":false,
                "TimeZone":"-8",
                "Location":"null",
                "Description":"test description of a REST event"
            }
        },
        "Event (single)": {
            "url": "/api/v1/en-US/me/events/353",
            "get": {},
            "put": {
                "EventTypeID":3,
                "Summary":"Housekeeper services for JoshuaProvider D.",
                "AvailabilityTypeID":3,
                "StartTime":"2014-03-25T09:00:00",
                "EndTime":"2014-03-25T19:00:00",
                "IsAllDay":false,
                "TimeZone":"-8",
                "Location":"null",
                "Description":"test description of a REST event",
                "RecurrenceRule":{
                    "FrequencyTypeID":502,
                    "Interval":1,
                    "Ending":"never",
                    "SelectedWeekDays":[1,3,5],
                    "MonthlyWeekDay":false
                }
            },
            "delete": {}
        },

        "Marketplace Profile (get and update)": {
            "url": "/api/v1/en-US/me/marketplace-profile",
            "get": { },
            "put": {
                "publicBio": "I have little to tell. That's all.",
                "freelancerProfileUrlSlug": "my-custom-loconomics-url",
                "freelancerWebsiteUrl": "http://loconomics.com"
            }
        },

        "Messaging: Threads": {
            "url": "/api/v1/en-US/me/messaging",
            "get": {
                "limit": 20,
                "untilID": null,
                "sinceID": null,
                "messagesLimit": 1
            },
            "post": {
                "customerUserID": 141,
                "freelancerUserID": 141,
                "jobTitleID": 106,
                "subject": 'Testing conversation',
                "bodyText": 'Testing first message'
            }
        },
        "Messaging: Single Thread": {
            "url": "/api/v1/en-US/me/messaging/225",
            "get": {
                "limit": 20,
                "untilID": null,
                "sinceID": null
            },
            "post": {
                "bodyText": "Answering to testing message (second)"
            }
        },
        "Messaging: Single Message": {
            "url": "/api/v1/en-US/me/messaging/225/525",
            "get": { }
        },

        "My payment methods": {
            "url": "/api/v1/en-US/me/payment-methods",
            "get": {}
        },

        "Privacy Settings (get and update)": {
            "url": "/api/v1/en-US/me/privacy-settings",
            "get": { },
            "put": {
                "smsBookingCommunication": false,
                "phoneBookingCommunication": true,
                "loconomicsCommunityCommunication": true,
                "loconomicsDbmCampaigns": false,
                "profileSeoPermission": true,
                "loconomicsMarketingCampaigns": true,
                "coBrandedPartnerPermissions": false
            }
        },

        "User Profile (get and update)": {
            "url": "/api/v1/en-US/me/profile",
            "get": { },
            "put": {
                // Name
                "firstName": "Iago",
                "lastName": "Lorenzo",
                "secondLastName": "Salgueiro",
                "businessName": "",
                // Contact
                "alternativeEmail": "",
                "phone": "",
                "canReceiveSms": false,
                "birthMonthDay": 20,
                "birthMonth": 4
            }
        },

        "Scheduling Preferences": {
            "url": "/api/v1/en-US/me/scheduling-preferences",
            "get": { },
            "put": {
                "advanceTime": 0.5,
                "betweenTime": 1,
                "incrementsSizeInMinutes": 30
            }
        },

        "Freelancer Bookings (post only)": {
            "url": "/api/v1/en-US/me/service-professional-booking",
            "post": {
                "clientUserID": 141,
                "jobTitleID": 106,
                "addressID": 1,
                "startTime": "2015-01-01T10:00:00Z",
                "services": [ 8, 35 ],
                "preNotesToClient": "",
                "preNotesToSelf": "",
                "api comment": "Fields of the Simplified Freelancer Booking, fits to the App needs. Services is a list of service attributes IDs included in the pricing."
            }
        },
        "Freelancer Bookings (single only)": {
            "url": "/api/v1/en-US/me/service-professional-booking/73",
            "put": {
                "addressID": 19,
                "startTime": "2015-02-08T10:30:00Z",
                "services": [ 8, 35 ],
                "preNotesToClient": "",
                "preNotesToSelf": "",
                "postNotesToClient": "",
                "postNotesToSelf": "",
                "api comment": "Fields of the Simplified Freelancer Booking, fits to the App needs. Services is a list of service attributes IDs included in the pricing."
            }
        },

        "Freelancer Pricing - All user pricing": {
            "url": "/api/v1/en-US/me/service-professional-services",
            "get": {
                "freelancerUserID": 141,
                "api comment": "Avoid the freelancerUserID parameter to get the own pricing."
            }
        },
        "Freelancer Pricing - Per Job Title": {
            "url": "/api/v1/en-US/me/service-professional-services/106",
            "get": {
                "freelancerUserID": 141,
                "api comment": "Avoid the freelancerUserID parameter to get the own pricing."
            },
            "post": {
                "pricingTypeID": 3,
                "name": "Testing 2",
                "description": "Testing 2",
                "price": 20,
                "serviceDurationMinutes": 60, // In minutes! Different than pricing-estimate (there is in hours)
                "firstTimeClientsOnly": false,
                "numberOfSessions": 1,
                "priceRate": 14,
                "priceRateUnit": "hour",
                "isPhone": false,
                "createdDate": "2013-08-28T21:05:59.947",
                "updatedDate": "2013-08-28T21:08:02.113",
                "serviceAttributes": [
                    501
                ],
                "noPriceRate": false,
                "api comment": "Pricing is assigned to the logged user, cannot be added to other user so no user parameter is needed. serviceDurationMinutes parameter as an integer. Different validation rules apply depending on the pricing type"
            }
        },
        "Freelancer Pricing - Job Title - Pricing item": {
            "url": "/api/v1/en-US/me/service-professional-services/106/73",
            "get": { },
            "put": {
                "pricingTypeID": 3,
                "name": "Testing 2",
                "description": "Testing 2",
                "price": 20,
                "serviceDurationMinutes": 60, // In minutes! Different than pricing-estimate (there is in hours)
                "firstTimeClientsOnly": false,
                "numberOfSessions": 1,
                "priceRate": 14,
                "priceRateUnit": "hour",
                "isPhone": false,
                "createdDate": "2013-08-28T21:05:59.947",
                "updatedDate": "2013-08-28T21:08:02.113",
                "serviceAttributes": [
                    501
                ],
                "noPriceRate": false,
                "api comment": "Pricing is assigned to the logged user, cannot be added to other user so no user parameter is needed. serviceDurationMinutes parameter as an integer. Different validation rules apply depending on the pricing type"
            },
            "delete": {}
        },

        "Upcoming Bookings": {
            "url": "/api/v1/en-US/me/upcoming-bookings",
            "get": {
                "api comment": "The result is an object with: nextWeek, tomorrow, today, nextBookingID; first three will contain the quantity of bookings and the time it starts/ends depending on the case."
            }
        },

        "User Job Profile": {
            "url": "/api/v1/en-US/me/user-job-profile",
            "get": { },
            "post": {
                "jobTitleID": 106,
                "intro": "Job title introduction",
                "cancellationPolicyID": 1,
                "instantBooking": true
            }
        },
        "User Job Profile (item -- Job Title)": {
            "url": "/api/v1/en-US/me/user-job-profile/106",
            "get": { },
            "put": {
                "intro": "Job title introduction",
                "cancellationPolicyID": 1,
                "instantBooking": true
            },
            "delete": { }
        },
        "User Job Profile - Deactivation": {
            "url": "/api/v1/en-US/me/user-job-profile/106/deactivate",
            "post": { }
        },
        "User Job Profile - Reactivation": {
            "url": "/api/v1/en-US/me/user-job-profile/106/reactivate",
            "post": { }
        },

        "User Availability at times detail": {
            "url": "/api/v1/en-US/users/141/availability/times",
            "get": {
                "start": "2016-08-01T22:00:00Z",
                "end": "2016-08-30T22:00:00Z"
            }
        },
        "User Availability at times detail as fixed size slots": {
            "url": "/api/v1/en-US/users/141/availability/slots",
            "get": {
                "start": "2016-08-01T22:00:00Z",
                "end": "2016-08-30T22:00:00Z"
            }
        },
        "User Availability at dates detail": {
            "url": "/api/v1/en-US/users/141/availability/dates",
            "get": {
                "start": "2016-08-01T22:00:00Z",
                "end": "2016-08-30T22:00:00Z"
            }
        },

        "Public user profile summary": {
            "url": "/api/v1/en-US/users/141",
            "get": {}
        },

        "User Public Job Profile (list of active job titles)": {
            "url": "/api/v1/en-US/users/141/job-profile",
            "get": {}
        },
        "User Public Job Title": {
            "url": "/api/v1/en-US/users/141/job-profile/106",
            "get": {}
        },

        "User Public Profile (basic data and contact)": {
            "url": "/api/v1/en-US/users/141/profile",
            "get": {}
        },

        "User rating": {
            "url": "/api/v1/en-US/users/141/ratings",
            "get": {}
        },
        "Client rating": {
            "url": "/api/v1/en-US/users/141/ratings/client",
            "get": {}
        },
        "Service Professional rating": {
            "url": "/api/v1/en-US/users/141/ratings/service-professional",
            "get": {}
        },
        "Job title rating": {
            "url": "/api/v1/en-US/users/141/ratings/106",
            "get": {}
        },

        "Public Service Addresses per job title": {
            "url": "/api/v1/en-US/users/141/service-addresses/106",
            "get": {}
        },

        "Public Service Professional Services per job title": {
            "url": "/api/v1/en-US/users/141/service-professional-services/106",
            "get": {}
        },

        "User verifications summary": {
            "url": "/api/v1/en-US/users/141/verifications-summary",
            "get": {}
        },
        "Client verifications summary": {
            "url": "/api/v1/en-US/users/141/verifications-summary/client",
            "get": {}
        },
        "Service Professional verifications summary": {
            "url": "/api/v1/en-US/users/141/verifications-summary/service-professional",
            "get": {}
        },
        "Job title verifications summary": {
            "url": "/api/v1/en-US/users/141/verifications-summary/106",
            "get": {}
        },

        "Weekly Schedule": {
            "url": "/api/v1/en-US/me/weekly-schedule",
            "get": {},
            "put": {
                "timeZone": "America/Los_Angeles",
                "sunday": [
                    {
                        "start": "00:00:00",
                        "end": "23:59:59"
                    }
                ],
                "monday": [
                    {
                        "start": "00:00:00",
                        "end": "23:59:59"
                    }
                ],
                "tuesday": [
                    {
                        "start": "00:00:00",
                        "end": "23:59:59"
                    }
                ],
                "wednesday": [
                    {
                        "start": "00:00:00",
                        "end": "23:59:59"
                    }
                ],
                "thursday": [],
                "friday": null,
                "saturday": [
                    {
                        "start": "10:00:00",
                        "end": "14:00:00"
                    },
                    {
                        "start": "16:30:00",
                        "end": "20:30:00"
                    }
                ],
                "isAllTime": false
            }
        }
    };

    function useApi(name, method) {
        var api = REST_API[name],
            data = api[method];
        if (api) {
            $('[name=url]').val(api.url);
            $('[name=rawdata]').val(JSON.stringify(data, null, ' '));
        }
    }

    function showApiList() {
        var $l = $('#apiList');
        Object.keys(REST_API).forEach(function (name) {

            var $li = $('<li/>')
            .text(name + ':')
            .appendTo($l);

            ['all', 'get', 'post', 'put', 'delete'].forEach(function (method) {

                if (REST_API[name][method]) {
                    $('<span/>')
                    .text(method)
                    .on('click', function () {
                        useApi(name, method);
                    })
                    .appendTo($li);
                }
            });
        });
    }

    jQuery(function ($) {

        showApiList();

        function doRequest(type, url, data) {

            $log = $('#log');

            try {

                type = type && type.toUpperCase();
                data = data && data.replace(/^\s+/, '') && JSON.parse(data);
                $('body').addClass('is-loading');

                $.ajax({
                    url: (LcUrl.AppPath + url).replace(/\/{2}/g, '/'),
                    type: type,
                    data: data,
                    //data: JSON.stringify(data),
                    //contentType: 'application/json'
                }).then(
                function (d, status, xhr) {
                    console.log('OK   ', d);
                    $log.text('OK    ' + xhr.status + ':' + xhr.statusText + '\n' + xhr.responseText + '\n');
                }, function (err) {

                    var msg = err.responseText;
                    try {
                        msg = JSON.parse(err.responseText);
                    } catch (ex) { }

                    console.log('ERROR', msg);
                    $log.text('ERROR ' + err.status + ':' + err.statusText + '\n' + err.responseText + '\n');
                }
                ).always(function () {
                    $('body').removeClass('is-loading');
                });

            } catch (ex) {
                $('body').removeClass('is-loading');
                $log.text('REQUEST ERROR, See console log.\n' + (ex && ex.toString()));
                console.error('doRequest', ex);
            }
        }

        $('form [data-method]').on('click', function () {
            doRequest($(this).data('method'), $('[name=url]').val(), $('[name=rawdata]').val());
            return false;
        });
        $('form').on('submit', function () {
            doRequest('GET', $('[name=url]').val(), $('[name=rawdata]').val());
            return false;
        });

    });
</script>
<style>
    input, textarea {
        box-sizing: border-box !important;
        -moz-box-sizing: border-box !important;
        -webkit-box-sizing: border-box !important;
        width: 100% !important;
    }
    #log {
        max-height: 200px;
        overflow: auto;
    }
    #apiList {
        padding-bottom: 40px;
    }
    #apiList li span {
        margin-left: 1em;
        cursor: pointer;
        text-decoration: underline;
        color: Blue;
    }
    .loading-spinner {
        opacity: 0;
        transition: opacity 1s;
    }
    .is-loading .loading-spinner {
        opacity: 1;
    }
</style>
<div>
    <form>
        <label>REST API URL (for example /en-US/REST/Test) <input type="text" name="url" value="/api/v1/en-US/Test" /></label>
        <div>
            <!-- Some example data as JSON -->
            <label>Request raw data as JSON
            <textarea name="rawdata" rows="7">
{
"name": "Mine"
}
            </textarea>
            </label>
        </div>
        <div class="actions">
            <img class="loading-spinner" src="@(LcUrl.AppPath)img/theme/loading.gif" alt="Loading..." />
            <button type="button" class="action" data-method="GET">GET</button>
            <button type="button" class="action" data-method="POST">POST</button>
            <button type="button" class="action" data-method="PUT">PUT</button>
            <button type="button" class="action" data-method="DELETE">DELETE</button>
        </div>
    </form>
    <h6>Task result (see it formatted in the browser web console):</h6>
    <pre id="log"></pre>
    <h6>REST API examples</h6>
    <ul id="apiList"></ul>
</div>