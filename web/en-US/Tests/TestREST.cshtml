@{
    if (!LcHelpers.InDev) {
        LcHelpers.TestArea();
    }
    Layout = "_TestLayout.cshtml";
    
    var url = Request["url"];
}
<script type="text/javascript">

    var REST_API = {
        'Test': {
            url: '/api/v1/en-US/Test',
            get: {
                name: 'userpos'
            },
            post: {
                name: 'Me',
                num: '23g',
                short: 'No longer than 5'
            }
        },
        'Test item': {
            url: '/api/v1/en-US/Test/20',
            put: {
                name: 'Me',
                num: 10
            },
            'delete': {}
        },
        'Test Server Error': {
            url: '/api/v1/en-US/Test',
            all: {
                givemeerror: 'Something goes wrong'
            }
        },
        'Upcoming Bookings': {
            url: '/api/v1/en-US/upcoming-bookings',
            get: {
                'api comment': 'The result is an object with: nextWeek, tomorrow, today, nextBookingID; ' +
                'first three will contain the quantity of bookings and the time it starts/ends depending on the case.'
            }
        },
        'Get Availability Weekly': {
            url: '/api/v1/en-US/availability/weekly',
            get: {
                user: 141,
                start: '2014-07-17',
                end: null
            }
        },
        'Get/put Availability Weekly Schedule (aka work-hours)': {
            url: '/api/v1/en-US/availability/weekly-schedule',
            get: {
            },
            put: {
                'all-time': false,
                'json-data': '{'+
                 '   "defaultStatus":"unavailable",'+
                 '   "status":"available",'+
                 '   "slots":{'+
                 '       "sunday":["00:00:00","00:15:00","00:30:00","00:45:00"],'+
                 '       "tuesday":["14:00:00","14:15:00","14:30:00","14:45:00"]'+
                 '   }'+
                '}'
            }
        },
        'Get Availability monthly': {
            url: '/api/v1/en-US/availability/monthly',
            get: {
                editable: false,
                'api comment': 'parameters allowed: "date" to pick the firts week-date for ' +
                    'the first month-date for that date; or a given "start" and "end" dates, ' +
                    'default is the current date',
                date: null
            }
        },
        'Get/put Availability monthly-schedule': {
            url: '/api/v1/en-US/availability/monthly-schedule',
            get: {
                'api comment': 'parameters allowed: "date" to pick the firts week-date for ' +
                    'the first month-date for that date; or a given "start" and "end" dates, ' +
                    'default is the current date',
                start: null,
                end: null
            },
            put: {
                'json-data':
                    '{"defaultStatus":"available","slots":{"2014-09-28":{},"2014-09-29":{"source":"user","status":"unavailable"},"2014-10-15":{"source":"user","status":"available"},"2014-11-08":{} }}'
            }
        },
        'Login': {
            url: '/api/v1/en-US/login',
            post: {
                 "username": "some user email",
                 "password": "",
                 "returnProfile": false,
                 'api comment': 'Param returnProfile allows to return a "profile" property with the user profile data (table [users]).' + 
                    ' The returned "redirectUrl" on success must be mandatory when there is a value since sometimes ' +
                    'will be different from the given "redirect", as for providers in the Onboarding, they must continue that ' +
                    'at the step given in "redirectUrl". This is the fact for current Website, what rules we will manage on mobile?.'
            }
        },
        'Logout': {
            url: '/api/v1/en-US/logout',
            post: {}
        },
        'Signup': {
            url: '/api/v1/en-US/signup',
            post: {
                 "username": "some user email",
                 "password": "",
                 "profileType": "freelancer",
                 "returnProfile": false,
                 'api comment': 'Same returned data as in Login, and returnProfile behaves the same too.' + 
                    ' The returned "redirectUrl" on success must be mandatory when there is a value since sometimes ' +
                    'will be different from the given "redirect", as for providers in the Onboarding, they must continue that ' +
                    'at the step given in "redirectUrl". This is the fact for current Website, what rules we will manage on mobile?.'
            }
        },
        'Facebook Login': {
            url: '/api/v1/en-US/login/facebook',
            post: {
                "accessToken": "Facebook Access Token",
                "returnProfile": true
            }
        },
        'Facebook Signup': {
            url: '/api/v1/en-US/signup/facebook',
            post: {
                "accessToken": "Facebook Access Token",
                "profileType": "freelancer",
                "returnProfile": true
            }
        },
        'Events and to add event': {
            url: '/api/v1/en-US/events',
            get: {
                 "types": [3, 5],
                 "start": "2014-06-01T12:00:00",
                 "end": "2014-09-30T10:00:00Z",
                 'api comment': 'types is optional, and will return all the types except "work hours" by default (To review if this is.' +
                    'the most optimal. ' +
                    'Optional start and end dates to reduce the results, accepting ISO strings.'
            },
            post: {
                "EventTypeID":3,
                "Summary":"Housekeeper services for JoshuaProvider D.",
                "AvailabilityTypeID":3,
                "StartTime":"2014-03-25T09:00:00",
                "EndTime":"2014-03-25T19:00:00",
                "IsAllDay":false,
                "TimeZone":"-8",
                "Location":"null",
                "Description":"test description of a REST event"
            }
        },
        'Event (single)': {
            url: '/api/v1/en-US/events/353',
            get: {},
            put: {
                "EventTypeID":3,
                "Summary":"Housekeeper services for JoshuaProvider D.",
                "AvailabilityTypeID":3,
                "StartTime":"2014-03-25T09:00:00",
                "EndTime":"2014-03-25T19:00:00",
                "IsAllDay":false,
                "TimeZone":"-8",
                "Location":"null",
                "Description":"test description of a REST event",
                "RecurrenceRule":{
                    "FrequencyTypeID":502,
                    "Interval":1,
                    "Ending":"never",
                    "SelectedWeekDays":[1,3,5],
                    "MonthlyWeekDay":false
                }
            },
            'delete': {}
        },
        'Bookings (read only)': {
            url: '/api/v1/en-US/bookings',
            get: {
                 "start": "2014-06-01T12:00:00",
                 "end": "2014-09-30T10:00:00Z",
            }
        },
        'Bookings (single; read only)': {
            url: '/api/v1/en-US/bookings/73',
            get: {}
        },
        'Freelancer Bookings (post only)': {
            url: '/api/v1/en-US/freelancer-bookings',
            post: {
                'customerUserID': 141,
                'addressID': 1,
                'startTime': '2015-01-01T10:00:00Z',
                'services': [ 8, 35 ],
                'preNotesToClient': '',
                'preNotesToSelf': '',
                'api comment': 'Fields of the Simplified Freelancer Booking, fits to the App needs. Services is a list of service attributes IDs included in the pricing.'
            }
        },
        'Freelancer Bookings (single only)': {
            url: '/api/v1/en-US/freelancer-bookings/73',
            put: {
                'customerUserID': 141,
                'addressID': 19,
                'startTime': '2015-02-08T10:30:00Z',
                'services': [ 8, 35 ],
                'preNotesToClient': '',
                'preNotesToSelf': '',
                'postNotesToClient': '',
                'postNotesToSelf': '',
                'api comment': 'Fields of the Simplified Freelancer Booking, fits to the App needs. Services is a list of service attributes IDs included in the pricing.'
            }
        },
        'Availability Types': {
            url: '/api/v1/en-US/availability-types',
            get: {},
        },
        'Event Types': {
            url: '/api/v1/en-US/event-types',
            get: {
                "OnlySelectable":true
            },
        },
        'iCalendar Events': {
            url: '/api/v1/en-US/icalendar/events',
            get: {
                 "types": [1, 3, 5],
                 "start": "2014-01-01T12:00:00",
                 "end": "2014-09-30T10:00:00Z",
                 'api comment': 'types is optional, and will return all the types except "work hours" by default (To review if this is.' +
                    'the most optimal. ' +
                    'Optional starnt and end dates to reduce the results, accepting ISO strings.'
            }
        },
        'Freelancer Pricing': {
            url: '/api/v1/en-US/freelancer-pricing',
            get: {
                "freelancerUserID": 141,
                "jobTitleID": -1,
                'api comment': 'The jobTitleID is optional (the same as value -1).'
            },
            post: {
                "pricingTypeID": 3,
                "freelancerUserID": 141,
                "jobTitleID": 106,
                "name": "Testing 2",
                "description": "Testing 2",
                "price": 20,
                "serviceDurationMinutes": 60, // In minutes! Different than pricing-estimate (there is in hours)
                "firstTimeClientsOnly": false,
                "numberOfSessions": 1,
                "priceRate": 14,
                "priceRateUnit": "hour",
                "isPhone": false,
                "createdDate": "2013-08-28T21:05:59.947",
                "updatedDate": "2013-08-28T21:08:02.113",
                "serviceAttributes": [
                    501
                ],
                "noPriceRate": false,
                'api comment': 'serviceDurationMinutes as an integer. Different validation rules apply depending on the pricing type'
            }
        },
        'Freelancer Pricing (item)': {
            url: '/api/v1/en-US/freelancer-pricing/73',
            get: { },
            put: {
                "pricingTypeID": 3,
                "freelancerUserID": 141,
                "jobTitleID": 106,
                "name": "Testing 2",
                "description": "Testing 2",
                "price": 20,
                "serviceDurationMinutes": 60, // In minutes! Different than pricing-estimate (there is in hours)
                "firstTimeClientsOnly": false,
                "numberOfSessions": 1,
                "priceRate": 14,
                "priceRateUnit": "hour",
                "isPhone": false,
                "createdDate": "2013-08-28T21:05:59.947",
                "updatedDate": "2013-08-28T21:08:02.113",
                "serviceAttributes": [
                    501
                ],
                "noPriceRate": false,
                'api comment': 'serviceDurationMinutes as an integer. Different validation rules apply depending on the pricing type'
            },
            delete: {}
        },
        'Job Titles (item)': {
            url: '/api/v1/en-US/job-titles/106',
            get: { }
        },
        'Pricing Types': {
            url: '/api/v1/en-US/pricing-types',
            get: { }
        },
        'Pricing Types (item)': {
            url: '/api/v1/en-US/pricing-types/3',
            get: { }
        },
        'User Job Profile': {
            url: '/api/v1/en-US/user-job-profile',
            get: { },
            post: {
                jobTitleID: 106,
                intro: 'Job title introduction',
                cancellationPolicyID: 1,
                instantBooking: true
            }
        },
        'User Job Profile (item -- Job Title)': {
            url: '/api/v1/en-US/user-job-profile/106',
            get: { },
            put: {
                intro: 'Job title introduction',
                cancellationPolicyID: 1,
                instantBooking: true
            },
            delete: { }
        },
        'User Job Profile - Deactivation': {
            url: '/api/v1/en-US/user-job-profile/106/deactivate',
            post: { }
        },
        'User Job Profile - Reactivation': {
            url: '/api/v1/en-US/user-job-profile/106/reactivate',
            post: { }
        },
        'Calendar Syncing': {
            url: '/api/v1/en-US/calendar-syncing',
            get: { },
            put: {
                icalImportURL: "http://calendar.google.com/something/ical.ics"
            }
        },
        'Calendar Syncing Reset Export URL': {
            url: '/api/v1/en-US/calendar-syncing/resetExportURL',
            post: { }
        },
        'Scheduling Preferences': {
            url: '/api/v1/en-US/scheduling-preferences',
            get: { },
            put: {
                advanceTime: 0.5,
                betweenTime: 1,
                incrementsSizeInMinutes: 30
            }
        },
        'Messaging: Threads': {
            url: '/api/v1/en-US/messaging',
            get: {
                limit: 20,
                untilID: null,
                sinceID: null,
                messagesLimit: 1
            },
            post: {
                customerUserID: 141,
                freelancerUserID: 141,
                jobTitleID: 106,
                subject: 'Testing conversation',
                bodyText: 'Testing first message'
            }
        },
        'Messaging: Single Thread': {
            url: '/api/v1/en-US/messaging/225',
            get: {
                limit: 20,
                untilID: null,
                sinceID: null
            },
            post: {
                bodyText: 'Answering to testing message (second)'
            }
        },
        'Messaging: Single Message': {
            url: '/api/v1/en-US/messaging/225/525',
            get: { }
        },
        'Addresses: home (ever single)': {
            url: '/api/v1/en-US/addresses/home',
            get: { },
            put: {
                "addressName":"Home",
                "addressLine1":"Avda Castelao",
                "addressLine2":"44",
                "postalCode":"90001",
                "specialInstructions":""
            }
        },
        'Addresses: service addresses per Job Title': {
            url: '/api/v1/en-US/addresses/service/106',
            get: { },
            post: {
                "addressName":"Workshop",
                "addressLine1":"Second street",
                "addressLine2":"102",
                "postalCode":"90001",
                "specialInstructions":"",
                "isServiceLocation":true,
                "isServiceArea":false,
                "serviceRadius":"",
                "api_comment": "Try setting isServiceLocation false for validation of almost one, and then isServiceArea:true to make address line1 and name optional."
            }
        },
        'Addresses: service addresses per Job Title (single)': {
            url: '/api/v1/en-US/addresses/service/106/95',
            get: { },
            put: {
                "addressName":"Billing",
                "addressLine1":"Second street",
                "addressLine2":"102",
                "postalCode":"90001",
                "specialInstructions":"",
                "isServiceLocation":true,
                "isServiceArea":false,
                "serviceRadius":"",
                "api_comment": "Try setting isServiceLocation false for validation of almost one, and then isServiceArea:true to make address line1 and name optional."
            },
            delete: { }
        },
        'Addresses: billing addresses': {
            url: '/api/v1/en-US/addresses/billing',
            get: { },
            post: {
                "addressName":"Workshop",
                "addressLine1":"Second street",
                "addressLine2":"102",
                "postalCode":"90001",
                "specialInstructions":"",
                "api_comment": "Try setting isServiceLocation false for validation of almost one, and then isServiceArea:true to make address line1 and name optional."
            }
        },
        'Addresses: billing addresses (single)': {
            url: '/api/v1/en-US/addresses/billing/71',
            get: { },
            put: {
                "addressName":"Workshop",
                "addressLine1":"Second street",
                "addressLine2":"102",
                "postalCode":"90001",
                "specialInstructions":"",
                "api_comment": "Try setting isServiceLocation false for validation of almost one, and then isServiceArea:true to make address line1 and name optional."
            },
            delete: { }
        },
        'User Profile (get and update)': {
            url: '/api/v1/en-US/profile',
            get: { },
            put: {
                // Name
                "firstName": "Iago",
                "lastName": "Lorenzo",
                "secondLastName": "Salgueiro",
                // Contact
                "alternativeEmail": "",
                "phone": "",
                "canReceiveSms": false,
                "birthMonthDay": 20,
                "birthMonth": 4
            }
        },
        'Marketplace Profile (get and update)': {
            url: '/api/v1/en-US/marketplace-profile',
            get: { },
            put: {
                "publicBio": "I have little to tell. That's all.",
                "freelancerProfileUrl": "my-custom-loconomics-url",
                "freelancerWebsiteUrl": "http://loconomics.com"
            }
        }
    };

    function useApi(name, method) {
        var api = REST_API[name],
            data = api[method];
        if (api) {
            $('[name=url]').val(api.url);
            $('[name=rawdata]').val(JSON.stringify(data, null, ' '));
        }
    }

    function showApiList() {
        var $l = $('#apiList');
        Object.keys(REST_API).forEach(function (name) {

            var $li = $('<li/>')
            .text(name + ':')
            .appendTo($l);

            ['all', 'get', 'post', 'put', 'delete'].forEach(function (method) {

                if (REST_API[name][method]) {
                    $('<span/>')
                    .text(method)
                    .on('click', function () {
                        useApi(name, method);
                    })
                    .appendTo($li);
                }
            });
        });
    }

    jQuery(function ($) {

        showApiList();

        function doRequest(type, url, data) {

            $log = $('#log');

            try {

                type = type && type.toUpperCase();
                data = data && data.replace(/^\s+/, '') && JSON.parse(data);
                $('body').addClass('is-loading');

                $.ajax({
                    url: (LcUrl.AppPath + url).replace(/\/{2}/g, '/'),
                    type: type,
                    data: data,
                    //data: JSON.stringify(data),
                    //contentType: 'application/json'
                }).then(
                function (d, status, xhr) {
                    console.log('OK   ', d);
                    $log.text('OK    ' + xhr.status + ':' + xhr.statusText + '\n' + xhr.responseText + '\n');
                }, function (err) {

                    var msg = err.responseText;
                    try {
                        msg = JSON.parse(err.responseText);
                    } catch (ex) { }

                    console.log('ERROR', msg);
                    $log.text('ERROR ' + err.status + ':' + err.statusText + '\n' + err.responseText + '\n');
                }
                ).always(function () {
                    $('body').removeClass('is-loading');
                });

            } catch (ex) {
                $('body').removeClass('is-loading');
                $log.text('REQUEST ERROR, See console log.\n' + (ex && ex.toString()));
                console.error('doRequest', ex);
            }
        }

        $('form [data-method]').on('click', function () {
            doRequest($(this).data('method'), $('[name=url]').val(), $('[name=rawdata]').val());
            return false;
        });
        $('form').on('submit', function () {
            doRequest('GET', $('[name=url]').val(), $('[name=rawdata]').val());
            return false;
        });

    });
</script>
<style>
    input, textarea {
        box-sizing: border-box !important;
        -moz-box-sizing: border-box !important;
        -webkit-box-sizing: border-box !important;
        width: 100% !important;
    }
    #log {
        max-height: 200px;
        overflow: auto;
    }
    #apiList {
        padding-bottom: 40px;
    }
    #apiList li span {
        margin-left: 1em;
        cursor: pointer;
        text-decoration: underline;
        color: Blue;
    }
    .loading-spinner {
        opacity: 0;
        transition: opacity 1s;
    }
    .is-loading .loading-spinner {
        opacity: 1;
    }
</style>
<div>
    <form>
        <label>REST API URL (for example /en-US/REST/Test) <input type="text" name="url" value="/api/v1/en-US/Test" /></label>
        <div>
            <!-- Some example data as JSON -->
            <label>Request raw data as JSON
            <textarea name="rawdata" rows="7">
{
"name": "Mine"
}
            </textarea>
            </label>
        </div>
        <div class="actions">
            <img class="loading-spinner" src="@(LcUrl.AppPath)img/theme/loading.gif" alt="Loading..." />
            <button type="button" class="action" data-method="GET">GET</button>
            <button type="button" class="action" data-method="POST">POST</button>
            <button type="button" class="action" data-method="PUT">PUT</button>
            <button type="button" class="action" data-method="DELETE">DELETE</button>
        </div>
    </form>
    <h6>Task result (see it formatted in the browser web console):</h6>
    <pre id="log"></pre>
    <h6>REST API examples</h6>
    <ul id="apiList"></ul>
</div>