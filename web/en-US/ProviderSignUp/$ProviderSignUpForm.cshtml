@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    var u = LcData.UserInfo.GetUserRowWithContactData();
    if (u != null && u.IsProvider) {
        // It's already a provider!
        Response.Redirect(LcUrl.LangPath);
    }
    // Initialize general page variables
    var userid = 0;
    var email = "";
    var password = "";
    var confirmPassword = "";
    var firstname  ="";
    var lastname  = "";
    var formzipcode = "";
    var zipcode   = 0;
    var state = 0;
    var lang = LcData.GetCurrentLanguageID();
    var countryId = LcData.GetCurrentCountryID();
    var termsofuse = "0";
    var emailcontact = "0";

    /** Validations **/
    if (u == null) {
	    // Validate the user's email address
        Validation.RequireField("email", "You must specify an email address.");
        // Validate the user's password and password confirmation
        Validation.Add("email",
            Validator.Regex(@"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*","The email is not valid."));
	    Validation.RequireField("password", "The password cannot be left blank.");
        Validation.Add("confirmPassword", 
            Validator.EqualsTo("password", "The new password and confirmation password do not match."));
    }
    Validation.RequireField("firstname", "You must specify your first name.");
    Validation.RequireField("lastname", "You must specify your last name.");
    Validation.RequireField("termsofuse", "You must agree to the terms of use and privacy policy.");
    Validation.RequireField("zipcode", "You must enter your zip code.");
    Validation.Add("firstname", Validator.StringLength(50, 0, "First name must be fewer than 50 characters."));
    Validation.Add("lastname", Validator.StringLength(145, 0, "Last name must be fewer than 145 characters."));
    // Position selection:
    Validation.RequireField("position", "You must add at least one position.");
        
    /** Set Form input values **/
    email = Request.Form["email"];
    password = Request.Form["password"];
    confirmPassword = Request.Form["confirmPassword"];
    firstname = Request.Form["firstname"];
    lastname = Request.Form["lastname"];
    formzipcode = Request.Form["zipcode"];
    state = Request["state"].AsInt();
    termsofuse = Request.Form["termsofuse"];
    emailcontact = Request.Form["emailcontact"];
    
    /** Get request with customer user: fill user data **/
    if (u != null) {
        firstname = Request.Form["firstname"] ?? u.FirstName;
        lastname = Request.Form["lastname"] ?? u.LastName;
        email = u.Email;
        formzipcode = Request.Form["zipcode"] ?? u.PostalCode;
        state = u.StateProvinceID ?? 0;
        userid = u.UserID;
    }
    
    // If this is a POST request, validate and process data
    if (IsPost && Validation.IsValid()) {
        
        /** Server side validations **/
        // Validate the user's captcha answer
        // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
        //     ModelState.AddError("recaptcha", "Captcha response was not correct");
        // }
        state = LcData.GetStateFromZipCode(formzipcode);
        int auxZip = LcData.GetPostalCodeID(formzipcode, state);
        if (auxZip == 0) {
            ModelState.AddError("zipcode", LcRessources.GetText("postal-code-validation-error"));
        } else {
            zipcode = auxZip;
        }
        if (!termsofuse.AsBool()){
            ModelState.AddError("termsofuse", "You must agree to the Terms of Use and Privacy Policy");
        }

        // If all information is valid, create a new account
        if (ModelState.IsValid) { 
            /** Create user profile (general creation - no provider still) **/
            if (u == null) {               
                if (LcAuth.ExistsEmail(Request["email"])) {
                    // User already exists
                    ModelState.AddFormError("Email address is already in use.");
                } else {
                    try {
                        var registeredUser = 
                        LcAuth.RegisterUser(
                            Request["email"],
                            Request["firstname"],
                            Request["lastname"],
                            Request["password"],
                            true
                        );
                        LcAuth.SendRegisterUserEmail(registeredUser);
                        
                        Session["RegisteredUserID"] = registeredUser.UserID;
                        userid = registeredUser.UserID;

                        // Auto-login:
                        LcAuth.Login(registeredUser.Email, Request["password"]);

                    } catch (System.Web.Security.MembershipCreateUserException e) {
                        ModelState.AddFormError(e.Message);
                    }
                }
            }
            /** Convert created user into a provider **/
            if (ModelState.IsValid) {
                using (var db = Database.Open("sqlloco")) {
                    db.Execute("exec CreateProviderFromUser @0,@1,@2,@3,@4,@5,@6,@7,@8",
                        userid,
                        firstname,
                        lastname,
                        (object)(zipcode == 0 ? null : (object)zipcode),
                        (object)(state == 0 ? null : (object)state),
                        lang,
                        countryId,
                        emailcontact.AsBool() ? 1 : 0,
                        LcData.UserInfo.GenerateBookCode(userid));
                    /** Add selected positions to the provider **/
                    foreach (string sPosID in Request.Form.GetValues("position")) {
                        if (sPosID.IsInt()) {
                            try{
                                LcData.UserInfo.InsProviderPosition(userid, sPosID.AsInt());
                            } catch (Exception ex) {
                                ModelState.AddFormError(ex.Message);
                            }
                        }
                    }
                }
            }
            
            /*** All finished, it was ok? ***/
            if (ModelState.IsValid) {
                var red = LcUrl.LangPath + "dashboard/";
                if (Request.IsAjaxRequest()) {
                    LcHelpers.ReturnJsonResult(1, red);
                } else {
                    Response.Redirect(red);
                }
            }
        }
    }
    
    // Recover positions after postback error to re-populate form:
    dynamic positions = null;
    if (IsPost) {
        // @iagosrl: We need a comma separated list of positionIDs for build the SQL to retrieve names for later, but
        // WE CANNOT use directly the Request["position"] value because can have SQL-inject - XSS attacks.
        // We parse every value as integer, strictly!
        string positionIDList = "";
        bool first = true;
        foreach (string sPosID in Request.Form.GetValues("position")) {
            if (!first) {
                positionIDList += ",";
            }
            positionIDList += sPosID.AsInt().ToString();
            first = false;
        }
        if (positionIDList != "") {
            using (var db = Database.Open("sqlloco")) {
                positions = db.Query(@"SELECT PositionID, PositionSingular FROM Positions WHERE PositionID IN (" + positionIDList + ")" + 
                    " AND LanguageID=@0 AND CountryID=@1", LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
            }
        }
    }
}
        <form method="post" id="provider-sign-up-create-a-login" action="@(LcUrl.LangPath)ProviderSignUp/$ProviderSignUpForm/" class="ajax ajax-box">
            @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
            <div id="provider-sign-up-truste-seal">
                @RenderPage(LcUrl.RenderLangPath + "HelpCenter/_TrusteSealWidget.cshtml")
            </div>
            <ol class="wizard-steps">
                <li class="step-1">
                    <div class="step-number">1</div>
                    <h2>About you</h2>
                    <fieldset class="login-data">
                        @if (u == null)
                        {
                        <div class="facebook-connect choice-option">
                            @RenderPage(LcUrl.RenderLangPath + "Account/_FacebookConnectButton.cshtml", new { Section = "Callback/Provider" })
                            <p class="info">By clicking "Connect with Facebook" you confirm that you accept the
                            <a class="view-terms-of-use" target="_blank" href="@(LcUrl.LangPath)About/#termsofuse">Terms of Service</a> and <a class="view-privacy-policy" target="_blank" href="@(LcUrl.LangPath)About/#privacypolicy">Privacy Policy</a></p>
                            <p class="footnote">*we don't post anything without your permission</p>
                        </div>
                        <p class="choice-or">or</p>
                        }
                        <ul class="signup-data choice-option">
                            <li class="first-name">
                                <label for="firstname" @if(!ModelState.IsValidField("firstname")){<text>class="error-label"</text>}>First Name</label>
                                <input placeholder="First Name" type="text" id="firstname" name="firstname" title="First Name" value="@firstname" @Validation.GetHtml("firstname") />
                                @* Write any email validation errors to the page *@
                                @Html.ValidationMessage("firstname")

                                @* need to have the error label class show up  *@   
                            </li>
                            <li class="last-name">
                              <label for="lastname" @if(!ModelState.IsValidField("lastname")){<text>class="error-label"</text>}>Last Name</label>
                                <input placeholder="Last Name" type="text" id="lastname" name="lastname" title="Last Name" value="@lastname" @Validation.GetHtml("lastname") />
                                @* Write any email validation errors to the page *@
                                @Html.ValidationMessage("lastname")
                             </li>
                            <li class="email">
                                <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}>Email Address</label>
                                <input placeholder="E-mail Address" @(Html.Raw(u != null ? "disabled='disabled'" : "")) type="text" id="email" name="email" title="Email address" value="@email" @Validation.GetHtml("email") />
                                @* Write any email validation errors to the page *@
                                @Html.ValidationMessage("email")
                            </li>
                            <li class="zip-code">
                                <label for="zipcode" @if(!ModelState.IsValidField("zipcode")){<text>class="error-label"</text>}>Zip Code</label>
                                <input placeholder="Zip Code" type="text" id="zipcode" name="zipcode" title="Zip Code" data-val-postalcode="@LcRessources.GetText("postal-code-validation-error")" value="@(formzipcode)" @(IsPost ? ModelState.ContainsKey("zipcode") ? new HtmlString("class='input-validation-error'") : new HtmlString("") : Validation.GetHtml("zipcode")) />
                                @Html.ValidationMessage("zipcode")
                            </li>
                            @if (u == null)
                            {
                            <li class="password">
                                <label for="password" @if (!ModelState.IsValidField("password"))
                                                      {<text>class="error-label"</text>}>Password</label>
                                <input placeholder="Password" @(Html.Raw(u != null ? "disabled='disabled'" : "")) type="password" id="password" name="password" title="Password" @Validation.GetHtml("password") />
                                @* Write any password validation errors to the page *@
                                @Html.ValidationMessage("password")
                             </li>
                            <li class="confirm-password">
                                <label for="confirmPassword" @if (!ModelState.IsValidField("confirmPassword"))
                                                             {<text>class="error-label"</text>} >Re-enter Password</label>
                                <input placeholder="Re-enter password" @(Html.Raw(u != null ? "disabled='disabled'" : "")) type="password" id="confirmPassword" name="confirmPassword" title="Confirm password" @Validation.GetHtml("confirmPassword") />
                                @* Write any password validation errors to the page *@
                                @Html.ValidationMessage("confirmPassword")
                            </li>
                            }
                        </ul>
                    </fieldset>
                </li>
                <li class="step-2">
                    <div class="step-number">2</div>
                    <h2>About your work</h2>
                    <fieldset class="positions">
                        <div class="select-position">
                            <div class="position-search">
                                <label for="providersignup-position-search">I am a...</label>
                                <input type="text" id="providersignup-position-search" />
                                <button type="button" class="action button add-action">+</button>
                            </div>
                            <div class="position-description">
                                <label for="providersignup-position-desc"></label>
                                <textarea disabled="disabled" rows="4"></textarea>
                            </div>
                        </div>
                        <div class="positions-list">
                            <h3>You can add up to five positions</h3>
                            <ul>
                                <li data-position-id="0" class="template"><span class="name"></span><a href="#remove-position">remove</a><input type="hidden" name="position" /></li>
                                @if (IsPost && positions != null)
                                {
                                    foreach (var pos in positions)
                                    {
                                        <li data-position-id="@pos.PositionID"><span class="name">@pos.PositionSingular</span><a href="#remove-position">remove</a><input type="hidden" name="position" value="@pos.PositionID" /></li>
                                    }
                                }
                            </ul>
                            <div class="lc-ressources">
                                <span class="positions-required">You must select at least one position</span>
                            </div>
                        </div>
                    </fieldset>
                </li>
                <li class="step-3">
                    <div class="step-number">3</div>
                    <h2>About how we’ll work together</h2>
                    <fieldset class="legal-agreement">
                        <ol class="legal-agreement-terms">
                            <li>I am at least 18 years old and will personally provide the services listed on my profile.</li>
                            <li>I am not acting on behalf of an agency or employer for services booked using my profile</li>
                            <li>I am legally authorized to perform the services listed on my profile and possess any 
                    licenses required to perform those services.</li>
                            <li>I will not engage in any unlawful or innapropriate activity while performing services for Customers.</li>
                            <li>I will take the necessary safety precautions when meeting Customers to assure both their and 
                   my own safety.</li>
                        </ol>
                        <ul>
                             <li>
                                <label><input type="checkbox" data-customval-requirechecked="You must agree terms of use" @Validation.GetHtml("termsofuse") @LcHelpers.IsChecked(Request["termsofuse"].AsBool(), true) name="termsofuse" id="termsofuse" value="True"/>I have read and agree to the above and the full <a class="view-terms-of-use" target="_blank" href="@(LcUrl.LangPath)About/TermsOfUse/">Terms of Service</a> and <a class="view-privacy-policy" target="_blank" href="@(LcUrl.LangPath)About/PrivacyPolicy/">Privacy Policy</a>.</label>
                                @Html.ValidationMessage("termsofuse")
                             </li>
                             <li>
                                <label><input type="checkbox" @Validation.GetHtml("emailcontact") @LcHelpers.IsChecked(Request["emailcontact"].AsBool(), true) name="emailcontact" id="emailcontact" value="True"/>I don't mind having you e-mail me important news.</label>
                                @Html.ValidationMessage("emailcontact")
                             </li>
                         </ul>
                     </fieldset>
                </li>
            </ol>
            <fieldset class="actions">
                <button class="main-action">Create my account</button>
            </fieldset>
            @LcHelpers.GetValidationScripts()
            @if (IsPost)
            {
            <script type="text/javascript">
                // Reapply initialization
                ProviderSignUp.init();
            </script>
            }
        </form>