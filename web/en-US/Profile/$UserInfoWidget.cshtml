@{   
    var size = PageData["Size"] ?? "mini"; // medium, large, search, mini-position, mini
    var withContactData = PageData["WithContactData"] ?? false;
    var userID = PageData["UserID"] ?? 0;
    var data = PageData["Data"];
    var dataPrefix = PageData["DataPrefix"] ?? "";
    var userType = PageData["UserType"] ?? "user"; // customer, provider
    var addCssClasses = PageData["AddCssClasses"] ?? "";
    var extraInfo = PageData["ExtraInfo"];
    var withGoogleMap = PageData["WithGoogleMap"] ?? true;
    var useAbsoluteUrls = PageData["UseAbsoluteUrls"] ?? false;
    var positionID = (int)(PageData["PositionID"] ?? -1);
    var positionData = PageData["PositionData"];
    var urlBase = useAbsoluteUrls ? LcUrl.SiteUrl : "";
    var withFullRating = PageData["WithFullRating"] ?? false;
    var linkInName = PageData["WithLinkInName"] ?? false;

    if (positionData != null) {
        // Preserve integrity of position-related parameters:
        positionID = positionData.PositionID;
    }
    if (withContactData) {
        addCssClasses += " user-contact-data";
    }
    
    if (data == null) {
        if (withContactData) {
            data = LcData.UserInfo.GetUserRowWithContactData(userID);
        } else {
            data = LcData.UserInfo.GetUserRow(userID);
        }
        dataPrefix = "";
    }
    
    if (Array.IndexOf<string>(new string[] { "mini", "medium", "large", "search", "mini-position" }, size) == -1) {
        throw new Exception("Size is not valid: " + size);
    }
    if (Array.IndexOf<string>(new string[] { "user", "customer", "provider" }, userType) == -1) {
        throw new Exception("UserType is not valid: " + userType);
    }
}
@** Not used now because is too small, but preserved for future changes and addition
 *@
@helper printGoogleMap(string location){
    <iframe class="google-map" width="120" height="120" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="http://maps.google.com/?q=@(location);z=16&amp;output=embed"></iframe>
}
@helper printGoogleLink(string location){
    <a class="google-map" href="http://maps.google.com/?q=@(location);z=16" target="_blank">view map and directions</a>
}
@functions{
    string getLocationForGoogleMaps(dynamic data){
        return LcHelpers.JoinNotEmptyStrings(", ", data.AddressLine1, data.City, data.StateProvinceCode, "United States");
    }
    string getNamePosition(dynamic data, string dataPrefix, dynamic positionData) {
        return LcHelpers.GetUserDisplayName(data, dataPrefix) + (positionData == null ? "" : " - " + positionData.PositionSingular);
    }
}
@helper printProfileLinkUrl(dynamic data, string dataPrefix, string urlBase) {
    @Href(urlBase + LcData.UserInfo.GetUserPublicURL(data[dataPrefix + "UserID"]))
}
@helper printProfileLink(dynamic data, string dataPrefix, string urlBase, string label = "View profile") {
    <a target="_blank" class="view-profile" href="@printProfileLinkUrl(data, dataPrefix, urlBase)">@label</a>
}
@helper printUserName(dynamic data, string dataPrefix, string urlBase, dynamic positionData, bool linkInName) {
    <h5 class="user-public-name">
        @if (linkInName)
        {
            <a target="_blank" href="@printProfileLinkUrl(data, dataPrefix, urlBase)">@getNamePosition(data, dataPrefix, positionData)</a>
        }
        else
        {
            @getNamePosition(data, dataPrefix, positionData)
        }
    </h5>
}
@if (size == "medium")
{
    <div class="@userType medium-user-info @addCssClasses @(withFullRating ? "with-full-rating" : "")">
        <div class="user-micro-summary">
            @printUserName(data, dataPrefix, urlBase, positionData, linkInName)
            <span class="member-since">Member since @data[dataPrefix + "MemberSinceDate"].ToString("MMMM yyyy")</span>
        </div>
        
        <img class="avatar mini-avatar" alt="@data[dataPrefix + "FirstName"]'s Photo" src="@(urlBase + LcUrl.LangPath)Profile/Photo/@data[dataPrefix + "UserID"]" width="55" height="55" />
        
        @if (withContactData) {
            <div class="user-contact-data">
                <div class="user-full-name">Name: <span class="value">@data[dataPrefix + "FirstName"] @data[dataPrefix + "MiddleIn"] @data[dataPrefix + "LastName"]</span></div>
                <div class="user-address">Address: <span class="value">@data[dataPrefix + "AddressLine1"] @data[dataPrefix + "AddressLine2"]</span></div>
                <div class="user-location">@LcHelpers.JoinNotEmptyStrings(", ", data[dataPrefix + "City"], @data[dataPrefix + "StateProvinceCode"], @data[dataPrefix + "PostalCode"])</div>
                <div class="user-mobile-phone">Mobile phone: <span class="value">@data[dataPrefix + "MobilePhone"]</span></div>
                <div class="user-email">Email address: <span class="value">@data[dataPrefix + "Email"]</span></div>
            </div>
            if (withGoogleMap) {
                @printGoogleLink(getLocationForGoogleMaps(data))
            }
        }
        else {
        <p class="user-text">
            @if (!String.IsNullOrWhiteSpace(data[dataPrefix + "PublicBio"])) {
                @data[dataPrefix + "PublicBio"]
            } else {
                <text></text>
                @*Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec lorem turpis, volutpat id adipiscing placerat, convallis sit amet orci. Donec quis enim nunc. Etiam iaculis porttitor sodales. Ut vel nisl vel augue cursus viverra vitae sed lectus. Nunc varius vehicula felis, in tincidunt lorem venenatis*@
            }
        </p>
        }

        @if (withFullRating)
        {
            @RenderPage(LcUrl.RenderLangPath + "Reviews/$UserRatingSummaryWidget.cshtml", new { ReviewedID = data[dataPrefix + "UserID"], PositionID = positionID })
        }
        else
        {
            if (userType == "customer")
            {
                <div class="user-rating global-rating">
                    @RenderPage(LcUrl.RenderLangPath + "Reviews/$UserRatingSummaryWidget.cshtml", new
                    {
                        ReviewedID = data[dataPrefix + "UserID"],
                        PositionID = 0,
                        ReviewedData = data,
                        ReviewedDataPrefix = dataPrefix,
                        RatingSummaryMode = "summary"
                    })
                </div>
            }
            else if (userType == "provider")
            {
                <div class="user-rating global-rating">
                    @RenderPage(LcUrl.RenderLangPath + "Reviews/$UserRatingSummaryWidget.cshtml", new
                    {
                        ReviewedID = data[dataPrefix + "UserID"],
                        PositionID = positionID,
                        ReviewedData = data,
                        ReviewedDataPrefix = dataPrefix,
                        RatingSummaryMode = "summary"
                    })
                </div>
            }
        }

        @printProfileLink(data, dataPrefix, urlBase, "View full profile")
    </div>
}
@* Mini size is the same for all userType's *@
else if (size == "mini") {
    <div class="@userType mini-user-info @addCssClasses @(withFullRating ? "with-full-rating" : "")">
        <img class="avatar mini-avatar" alt="@data[dataPrefix + "FirstName"]'s Photo" src="@(urlBase + LcUrl.LangPath)Profile/Photo/@data[dataPrefix + "UserID"]" width="55" height="55" />
        @printUserName(data, dataPrefix, urlBase, positionData, linkInName)
        @if (!String.IsNullOrWhiteSpace(extraInfo)) {
            <div class="extra-info">@extraInfo</div>
        } else {
            @printProfileLink(data, dataPrefix, urlBase, "View profile")
        }
        @if (withFullRating)
        {
            @RenderPage(LcUrl.RenderLangPath + "Reviews/$UserRatingSummaryWidget.cshtml", new { ReviewedID = data[dataPrefix + "UserID"], PositionID = positionID })
        }
    </div>
} else if (size == "search" || size == "mini-position") {
    <div class="@userType @(size)-user-info w-UserInfo w-UserInfo--@(LcExtensions.ToCamelCase(size)) @(addCssClasses) @(withFullRating ? "with-full-rating" : "")">
        <img class="avatar mini-avatar" alt="@data[dataPrefix + "FirstName"]'s Photo" src="@(urlBase + LcUrl.LangPath)Profile/Photo/@data[dataPrefix + "UserID"]" width="66" height="66" />
        <div class="user-micro-summary">
            @printUserName(data, dataPrefix, urlBase, null, linkInName)

            <p class="user-text">
                @if (userType == "customer")
                {
                    @("Client") @*data[dataPrefix + "PublicBio"]*@
                }
                else if (userType == "provider")
                {
                    if (data.Columns.Contains(dataPrefix + "Positions"))
                    {
                        @data[dataPrefix + "Positions"]
                    }
                    else if (positionData != null)
                    {
                        @positionData.PositionSingular
                    }
                }
            </p>

            @if (!withFullRating) {
                if (userType == "customer")
                {
                    <div class="user-rating global-rating">
                        @RenderPage(LcUrl.RenderLangPath + "Reviews/$UserRatingSummaryWidget.cshtml", new
                           {
                               ReviewedID = data[dataPrefix + "UserID"],
                               PositionID = 0,
                               ReviewedData = data,
                               ReviewedDataPrefix = dataPrefix,
                               RatingSummaryMode = "summary",
                               ShowReviewsCountAsNote = true
                           })
                    </div>
                }
                else if (userType == "provider")
                {
                    <div class="user-rating global-rating">
                        @RenderPage(LcUrl.RenderLangPath + "Reviews/$UserRatingSummaryWidget.cshtml", new
                           {
                               ReviewedID = data[dataPrefix + "UserID"],
                               PositionID = positionID,
                               ReviewedData = data,
                               ReviewedDataPrefix = dataPrefix,
                               RatingSummaryMode = "summary",
                               ShowReviewsCountAsNote = true
                           })
                    </div>
                }
            }
        </div>

        @if (withFullRating)
        {
            @RenderPage(LcUrl.RenderLangPath + "Reviews/$UserRatingSummaryWidget.cshtml", new { ReviewedID = data[dataPrefix + "UserID"], PositionID = positionID })
        }
    </div>
} else {
    <strong>This has not been implemented.</strong>
}