@*
    List all packages for a given pricing type (PricingTypeID), provider (ProviderUserID) and position (PositionID)
    List can be showed for edition by the ProviderUserID or as a read only list to pick a pricing type for booking (from a customer)
*@
@{
    LcData.ProviderPackagesView data = PageData["data"];
    bool editable = PageData["editable"] ?? Request["editable"].AsBool();
    int pricingTypeID = PageData["PricingTypeID"] ?? Request["PricingTypeID"].AsInt();
    int providerUserID = PageData["ProviderUserID"] ?? Request["ProviderUserID"].AsInt();
    if (providerUserID == 0) {
        providerUserID = WebSecurity.CurrentUserId;
    }
    int positionID = PageData["PositionID"] ?? Request["PositionID"].AsInt();
    var customer = PageData["Customer"] ?? LcData.UserInfo.GetUserRow();
    if (!LcPricingModel.PackageBasePricingTypeConfigs.ContainsKey(pricingTypeID)) {
        // WITHOUT Config, there is nothing to display (is not a package-based pricing type)
        return;
    }

    // If there is no customer or 'customer' and provider are different, ever in non-editable mode
    if (customer == null || customer.UserID != providerUserID) {
        editable = false;
    }

    if (data == null) {
        data = LcData.GetPricingPackagesByProviderPosition(providerUserID, positionID, -1, pricingTypeID);
    }

    // Get Fees that apply to the provider and customer
    var feesSet = editable ?
        null :
        LcPricingModel.GetFeesSetFor((customer == null ? 0 : customer.UserID), providerUserID, pricingTypeID, positionID);
}
@if (data.Packages != null && data.Packages.Count > 0)
{
    <ul>
        @foreach (var pak in data.Packages)
        {
            // Filtering per PricingTypeID (if data was externally provided without previous filter):
            if (pak.PricingTypeID != pricingTypeID)
            {
                continue;
            }
            
            var details = data.PackagesDetailsByPackage.ContainsKey(pak.ProviderPackageID)
                        ? data.PackagesDetailsByPackage[pak.ProviderPackageID]
                        : null;

            <li class="provider-package crudl-item @(editable ? "" : "view")" data-crudl-item-id="@pak.ProviderPackageID">
                @RenderPage("$PackageView.cshtml", new { 
                    Package = pak,
                    ServiceAttributes = details,
                    EditableView = editable,
                    Customer = customer,
                    FeesSet = feesSet
                })
            </li>
        }
    </ul>
}