@{
    // Widget variables and default values
    LcPricingModel.PackageBaseData pak = null;
    List<LcPricingModel.PackageServiceAttribute> atts = null;
    bool editable = false;
    int customerUserID = WebSecurity.IsAuthenticated ? WebSecurity.CurrentUserId : 0;
    Dictionary<string, LcPricingModel.FeeRate> feesSet = null;
    string containerTag = "div";
    string containerClasses = "provider-package w-ProviderPackage ";
    int pricingEstimateID = 0;
    int pricingEstimateRevision = 0;
    bool showPrices = true;
    var extraDetails = "";

    // Getting values from RenderPage or Request
    if (PageData.ContainsKey("Package")) {
        pak = PageData["Package"] is LcPricingModel.PackageBaseData
            ? (LcPricingModel.PackageBaseData)PageData["Package"]
            : new LcPricingModel.PackageBaseData(PageData["Package"]);
        var dbAtts = PageData["ServiceAttributes"];
        if (dbAtts != null)
        {
            atts = LcPricingModel.PackageServiceAttribute.ListFromDBRecords(dbAtts);
        }
        editable = PageData["EditableView"];
        if (PageData["Customer"] != null)
        {
            customerUserID = PageData["Customer"].UserID;
        }
        feesSet = PageData["FeesSet"];
        containerTag = PageData["ContainerTag"] ?? containerTag;
        containerClasses += PageData["ContainerClasses"];
        pricingEstimateID = PageData["PricingEstimateID"] ?? 0;
        pricingEstimateRevision = PageData["PricingEstimateRevision"] ?? 0;
        showPrices = PageData["ShowPrices"] ?? true;
    } else {
        pak = LcPricingModel.PackageBaseData.FromPackageID(Request["PackageID"].AsInt());
        pricingEstimateID = Request["PricingEstimateID"].AsInt();
        pricingEstimateRevision = Request["PricingEstimateRevision"].AsInt();
        showPrices = Request["ShowPrices"].AsBool(false);
    }
    
    // Setup variables that depends on others
    containerClasses = containerClasses ?? "";
    containerClasses += (editable ? "" : " view");
    // Attributes: if not provided, fetched:
    if (atts == null) {
        atts = LcPricingModel.PackageServiceAttribute.ListFromPackageID(pak.ID);
    }
    // Pricing config:
    if (!LcPricingModel.PackageBasePricingTypeConfigs.ContainsKey(pak.PricingTypeID)) {
        // WITHOUT Config, there is nothing to display (is not a package-based pricing type)
        return;
    }
    var config = LcPricingModel.PackageBasePricingTypeConfigs[pak.PricingTypeID];
    if (feesSet == null && showPrices && pricingEstimateID == 0) {
        feesSet = editable ?
            null :
            LcPricingModel.GetFeesSetFor(customerUserID, pak.ProviderUserID, pak.PricingTypeID, pak.PositionID);
    } else if (pricingEstimateID != 0 || !showPrices) {
        feesSet = null;
    }
    // Getting the correct fees for the package
    LcPricingModel.FeeRate fee = null;
    if (feesSet != null)
    {
        // Use the package price on FixedPrice packages to get the fees that fit better:
        if (config.PriceCalculation == LcPricingModel.PriceCalculationType.FixedPrice)
        {
            fee = LcPricingModel.GetFeeByPackagePrice(feesSet, pak.Price, LcData.UserInfo.UserType.Customer);
        }
        else
        {
            // Else, get the standard ones
            fee = feesSet["standard:customer"];
        }
    }
    if (config.Mod != null && pricingEstimateID > 0) {
        extraDetails = config.Mod.GetPackagePricingDetails(pak.ID, pricingEstimateID, pricingEstimateRevision);
    }
}
@if (!String.IsNullOrEmpty(containerTag))
{
    @Html.Raw(String.Format("<{0} class='{1}'>", containerTag, containerClasses));
}
    <h4 class="w-ProviderPackage-name">@pak.Name</h4>
    <div class="provider-package-service-summary w-ProviderPackage-serviceSummary">
        @{
            var inpersonphone = "in-person";
            if (config.InPersonPhoneLabel != null)
            {
                inpersonphone = (pak.IsPhone ? "phone" : "in-person");
            }
            var summaryFormat = "";
            if (pak.NumberOfSessions > 1)
            {
                if (pak.Duration == TimeSpan.Zero) {
                    summaryFormat = config.SummaryFormatMultipleSessionsNoDuration;
                } else {
                    summaryFormat = config.SummaryFormatMultipleSessions;
                }
            }
            else if (pak.Duration == TimeSpan.Zero)
            {
                summaryFormat = config.SummaryFormatNoDuration;
            }
            // Default value and generic:
            if (String.IsNullOrEmpty(summaryFormat))
            {
                summaryFormat = config.SummaryFormat;
            }
            @String.Format(summaryFormat, LcHelpers.TimeToSmartLongString(pak.Duration), pak.NumberOfSessions, inpersonphone)
        }
        @if (!String.IsNullOrEmpty(extraDetails))
        {
            <div class="w-ProviderPackage-extraDetails">
                @extraDetails
            </div>
        }
        @if(showPrices){
            <div class="provider-package-price">
			    @{
				    // Choices fixed price or price-rate checking the pricing-type configuration
				    var price = pak.Price;
				    var priceSufix = "";
                    // To use in non-editable (customer view, as search, profile, booking, communications..)
                    // calculate price with fees. No decimals for fixed prices
                    LcPricingModel.Price priceWithFees = null;
                    if (fee != null)
                    {
                        priceWithFees = new LcPricingModel.Price(price, fee, 0);
                    }
				    if (config.PriceLabel == null) {
					    price = pak.PriceRate ?? 0M;
                        if (fee != null)
                        {
                            // fees apply with 1 decimal for the case of hourly-rates:
                            priceWithFees = new LcPricingModel.Price(price, fee, 1);
                        }
					    if (N.DW(pak.PriceRateUnit) == null || pak.PriceRateUnit.ToUpper() == "HOUR") {
						    priceSufix = "/h";
					    } else {
						    priceSufix = "<span class='price-rate-unit'>" + config.PriceRateUnitListLabel + pak.PriceRateUnit + "</span>";
					    }
				    }
				    if (editable || priceWithFees == null)
				    {
					    <text>@price.ToString("c") @priceSufix</text>
				    }
				    else
				    {
					    <div class="actions book">
						    @if (config.IsAddon)
						    {
							    // Addons cannot be booked independently:
							    <div class="package-price addon-price">@String.Format("{0:c}", priceWithFees.TotalPrice)</div>
							    <div class="addon-price-note">Available during checkout</div>
						    }
						    else
						    {
							    <a class="button book-action main-action" href="@Href(LcUrl.LangPath + "Booking/?providerid=" + pak.ProviderUserID + "&positionid=" + pak.PositionID + "&packageid=" + pak.ID)"><span class="book-now-label">Book now for </span>@String.Format("{0:c}", priceWithFees.TotalPrice) @Html.Raw(priceSufix)</a>
						    }
					    </div>
				    }
			    }
            </div>
        }
    </div>
    @if (editable)
    {
    <div class="actions">
        <a href="#delete" class="delete-action crudl-delete">Delete</a>
        <a href="#edit" class="edit-action crudl-update">Edit</a>
    </div>
    }
    @if (config.FirstTimeClientsOnlyListText != null && pak.FirstTimeClientsOnly)
    {
        <h5 class="w-ProviderPackage-sectionTitle">@config.FirstTimeClientsOnlyListText</h5>
    }
    <h5 class="w-ProviderPackage-sectionTitle">Description:</h5>
    <div class="provider-package-description w-ProviderPackage-description">
        @LcHelpers.PrintTextAsHtml(pak.Description)
    </div>
	@if (config.Mod != null) {
		@Html.Raw(config.Mod.GetPackageViewHtml(pak, feesSet));
	}
    @if (showPrices && config.PriceRateQuantityListLabel != null && pak.PriceRate is decimal)
    {
        LcPricingModel.Price priceRateWithFees = new LcPricingModel.Price(pak.PriceRate ?? 0M, 0, 1);
        if (!editable && feesSet != null)
        {
            // The price-rate will ever be the standard fees (there is no chance for the flat ones) (this can be different from the package price)
            var rateFee = feesSet["standard:customer"];
            // fees apply with 1 decimal for the case of hourly-rates:
            priceRateWithFees = new LcPricingModel.Price(pak.PriceRate ?? 0M, rateFee, 1);
        }
        <h5 class="price-rate w-ProviderPackage-sectionTitle">@config.PriceRateQuantityListLabel @priceRateWithFees.TotalPrice.ToString("c")
            @if (config.PriceRateUnitListLabel != null)
            {
                <span class="price-rate-unit">@config.PriceRateUnitListLabel @pak.PriceRateUnit</span>
            }
        </h5>
    }
    @if (showPrices && config.NoPriceRateListMessage != null && N.D(pak.PriceRate) == null)
    {
        <h5 class="w-ProviderPackage-sectionTitle">@config.NoPriceRateListMessage</h5>
    }
    @if (config.IncludeServiceAttributes)
    {
        if (atts.Count > 0
            || (config.WithoutServiceAttributesCustomerMessage != null && !editable)
            || (config.WithoutServiceAttributesProviderMessage != null && editable)
            )
        {
            <h5 class="w-ProviderPackage-sectionTitle">Services included:</h5>
            <ul class="provider-package-services attributes-list service-attributes-list w-ProviderPackage-serviceAttributes">
                @foreach (var ser in atts)
                {
                    <li title="@ser.Name" data-description="@ser.Description" data-service-attribute-id="@ser.ID">@ser.Name</li>
                }
                @if (atts.Count == 0)
                {
                    if (editable)
                    {
                        <li class="empty">@config.WithoutServiceAttributesProviderMessage</li>
                    }
                    else
                    {
                        <li class="empty">@config.WithoutServiceAttributesCustomerMessage</li>
                    }
                }
            </ul>
        }
    }
@if (!String.IsNullOrEmpty(containerTag))
{
    @Html.Raw(String.Format("</{0}>", containerTag));
}
