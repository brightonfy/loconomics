@* Form to review a customer by a provider based on a performed Booking
*@
@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    LcHelpers.SecurePage();
    var thisUserID = WebSecurity.CurrentUserId;
    var provider = LcData.UserInfo.GetUserRow();
    int bookingID = Request["BookingID"].AsInt();
    if (bookingID == 0) {
        bookingID = (int)PageData["BookingID"];
    }
    
    dynamic booking = PageData["booking"] ?? LcData.Booking.GetBookingBasicInfo(bookingID);
    dynamic customer = null;

    // Check booking is valid and current user is the provider (only he can rate customer at this bookingid)
    if (booking == null || booking.ProviderUserID != thisUserID) {
        ModelState.AddFormError("Not valid booking to review");
    } else {
        customer = LcData.UserInfo.GetUserRow(booking.CustomerUserID);
    }

    if (ModelState.IsValid) {
        Validation.RequireField("question2", "Please response to section 3 question");
        Validation.RequireField("rating1", "Please rate customer");
        Validation.RequireField("public-review", "Please write a public review");
        Validation.RequireField("private-review", "Please write a private review");
        /* Validating texts length */
        Validation.Add("public-review", Validator.StringLength(500, 20, "Your public review must be between 20 and 500 characters"));
        Validation.Add("private-review", Validator.StringLength(1000, 0, "Your public review must be fewer than 1,000 characters"));
        Validation.Add("question2", Validator.StringLength(1000, 0, "Please answer question 3 in fewer than 1,000 characters"));

        if(IsPost && Validation.IsValid()){

            var answer2 = Request["question2"].AsBool();
            var rating1 = Request["rating1"].AsInt();
            var publicreview = Request["public-review"];
            var privatereview = Request["private-review"];

            if(ModelState.IsValid){
                using (var db = Database.Open("sqlloco")) {
                    var hasreview = db.QueryValue(LcData.sqlCheckUserReview,
                        0 /*positionID as customer*/,
                        bookingID, 
                        booking.ProviderUserID,
                        booking.CustomerUserID);
                    if(hasreview > 0){
                        ModelState.AddFormError("You've already reviewed this user for this service.");
                    } else {
                        //Look for existing scores
                        var scores = db.QuerySingle(LcData.sqlGetUserReviewScores, booking.CustomerUserID, 0);
                        if (scores == null) {
                            //First scores for the customer (positionID=0)
                            db.Execute(LcData.sqlInsertUserReviewScores, 
                                booking.CustomerUserID, 0,
                                1,
                                rating1, null, null, null,
                                null, (answer2 ? 1 : 0),
                                0, DateTime.Now);
                        } else {
                            // Recalculate and Save the updated scores
                            var tr = scores.TotalRatings;
                            var ntr = tr + 1;
                            db.Execute(LcData.sqlUpdateUserReviewScores,
                                booking.CustomerUserID, 0,
                                ntr,
                                ((scores.Rating1 ?? 0) * tr + rating1) / ntr,
                                // No usamos rating2-4, mantenemos el valor que hubiese -que será null-
                                scores.Rating2,
                                scores.Rating3,
                                scores.Rating4,
                                scores.Answer1,
                                (answer2 ? scores.Answer2 + 1 : scores.Answer2),
                                0, DateTime.Now);
                        };
                        //Store Review
                        db.Execute(LcData.sqlInsertUserReview, 
                            bookingID, booking.CustomerUserID, thisUserID, 0,
                            rating1, null, null, null,
                            null, answer2, null, null,
                            privatereview, publicreview,
                            0, 0);
                        
                        // Set VerificationID:11 for reviewed user as confirmed just with only receive a review(see issue #8 comment https://github.com/djorgensen/Loconomics/issues/8#issuecomment-6807651)
                        db.Execute(@"EXEC SetUserVerification @0,@1,@2,@3", booking.CustomerUserID, 11, DateTime.Now, 1);
                    }
                }
                if(ModelState.IsValid){
                    //LcHelpers.ReturnJsonResult(0, "Thanks for rating");
                    LcHelpers.ReturnJsonResult(3, LcUrl.LangPath + "Reviews/$BookingRatingDetails/?BookingID=" + bookingID);
                }
            }
        }
    }
    
    var rateTexts = LcData.GetPositionRatings(0);
}
<form class="customer-rating-form ajax ajax-box" method="post" action="@(LcUrl.LangPath)Reviews/$CustomerRatingForm/">
    @LcHelpers.SetupStarRatingPlugin()
    @LcHelpers.GetValidationScripts()
    @Html.ValidationSummary()
    @if (booking != null && provider != null) {
        <input type="hidden" name="BookingID" value="@bookingID" />
        <fieldset class="section-1">
            <legend>Section 1: Rate @customer.FirstName as a client</legend>
            <ul>
                <li class="rating1">
                    <span>@(rateTexts.Rating1)@(String.IsNullOrEmpty(rateTexts.Rating1FormDescription) ? "" : " - " + rateTexts.Rating1FormDescription): @*Rate @customer.FirstName as a client:*@</span>
                    <div class="user-rating">
                        @RenderPage(LcUrl.RenderLangPath + "Reviews/_StarRating.cshtml", new String[] { "rating1", Request["rating1"], "false" })
                    </div>
                </li>
                <li class="publicreview">
                    <label for="public-review">Write a brief review for other Loconomics members wanting to work with @customer.FirstName:
                    (please be respectful and constructive)</label>
                    <textarea rows="4" id="public-review" name="public-review" placeholder="(250 or fewer characters)">@Request["public-review"]</textarea>
                </li>
            </ul>
        </fieldset>
        <fieldset class="section-2">
            <legend>Section 2: Help @customer.FirstName become a better client</legend>
            <ul>
                <li class="private-review">
                    <label for="private-review">Please give @customer.FirstName any constructive criticism to help
                        him (only @customer.FirstName will see this):</label>
                    <textarea rows="10" id="private-review" name="private-review" placeholder="(1000 or fewer characters)">@Request["private-review"]</textarea>
                </li>
            </ul>
        </fieldset>
        <fieldset class="section-3">
            <legend>Section 3: Recommend @customer.FirstName</legend>
            <ul>
                <li class="question2">
                    <span>Would you work with @customer.FirstName again?</span>
                    <label>Yes<input type="radio" name="question2" @LcHelpers.IsChecked("true", Request["question2"]) value="true" /></label>
                    <label>No<input type="radio" name="question2" @LcHelpers.IsChecked("false", Request["question2"]) value="false" /></label>
                </li>
            </ul>
        </fieldset>
        <fieldset class="actions">
            <button class="button main-action" type="submit">Submit feedback</button>
        </fieldset>
    }
</form>