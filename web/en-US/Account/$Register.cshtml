@using WebMatrix.Data;
@using WebMatrix.WebData;
@{   
    // Set if the system must wait for the confirmation code (sent on email) before allow user to login
    // By default is true, the standard behavior, but with false the user will be logged automatically
    // on registering, with 'partially confirmed', but an email will sent will the link to confirm its address still.
    bool waitConfirmation = PageData["WaitConfirmation"] ?? Session["RegisterWaitConfirmation"] ?? true;
    string redirect = N.W(Request.QueryString["Redirect"]) ?? LcUrl.LangPath + "Dashboard/";
    
    // Setup Validation
    // Required first name and last name
    Validation.RequireField("firstname", "You must specify your first name.");
    Validation.RequireField("lastname", "You must specify your last name.");
	// Validate the user's email address
    Validation.RequireField("email", "You must specify an email address.");
    // Validate the user's password and password confirmation
    Validation.Add("email",
        Validator.Regex(LcValidators.EmailAddressRegexPattern, "The email is not valid."));

	Validation.RequireField("password", "The password cannot be blank.");
    Validation.Add("confirmPassword", 
        Validator.EqualsTo("password", "The new password and confirmation password do not match."));
        
	Validation.RequireField("iagree", "You must agree to the Terms of Service and Privacy Policy.");

    // Validate the user's captcha answer
    // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
    //     ModelState.AddError("recaptcha", "Captcha response was not correct");
    // }
    
    // If this is a POST request, validate and process data
    if (IsPost && Validation.IsValid()) {

        if (LcAuth.ExistsEmail(Request["email"])) {
            // User already exists
            ModelState.AddFormError("Email address is already in use.");
        } else {
            
            var stateProvinceID = LcData.GetStateFromZipCode(Request["zipcode"]);
            int postalCodeID = LcData.GetPostalCodeID(Request["zipcode"], stateProvinceID);
            if (postalCodeID == 0) {
                ModelState.AddError("zipcode", LcRessources.GetText("postal-code-validation-error"));
            }
            
            if (ModelState.IsValid) {
                try {
                    var user = 
                    LcAuth.RegisterUser(
                        Request["email"],
                        Request["firstname"],
                        Request["lastname"],
                        Request["password"],
                        false
                    );
                    LcData.SetHomeAddress(user.UserID, "", "", "", stateProvinceID, postalCodeID, LcData.GetCurrentCountryID(), LcData.GetCurrentLanguageID());
                    LcAuth.SendRegisterUserEmail(user);
                
                    if (waitConfirmation) {
                        Session["RegisteredUserID"] = user.UserID;
                        // Thank the user for registering and let them know an email is on its way
                        // We return a json with result OK and redirect link (Code=1),
                        // and response end just after this:
                        LcHelpers.ReturnJsonResult(1, LcUrl.LangPath + "Account/Thanks/");
                    } else {
                        LcAuth.Login(user.Email, Request["password"]);

                        // We return a json with result OK and redirect link (Code=1),
                        // and response end just after this:
                        LcHelpers.ReturnJsonResult(1, redirect);
                    }
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
            }
        }
    }
}
@LcHelpers.GetValidationScripts()
<article id="registerBox" class="ajax-box account-popup">
    <hgroup class="title">
        <h1>Create a free account</h1>
        <div class="subh1">Do you want to provide services? <a href="@(LcUrl.LangPath)ProviderSignUp/">Click here</a></div>
    </hgroup>
    <section>
        <form method="post" action="@(LcUrl.LangPath)Account/$Register/@(Request.Url.Query)" class="choice-option ajax changes-notification-disabled" data-success-post-message="Register successfully!">
            @* If at least one validation error exists, notify the user *@
            @*Html.ValidationSummary("Please correct the errors and try again.")*@

            <fieldset>
                <legend>Registration Form</legend>
                <ul>
                    <li class="firstname">
                        <label for="firstname" @if(!ModelState.IsValidField("firstname")){<text>class="error-label"</text>}>First name:</label>
                        <input type="text" id="firstname" name="firstname" title="First name" value="@Request["firstname"]" @Validation.GetHtml("firstname") />
                        @* Write any email validation errors to the page *@
                        @Html.ValidationMessage("firstname")
                    </li>
                    <li class="lastname">
                        <label for="lastname" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}>Last name:</label>
                        <input type="text" id="lastname" name="lastname" title="Last name" value="@Request["lastname"]" @Validation.GetHtml("lastname") />
                        @* Write any email validation errors to the page *@
                        @Html.ValidationMessage("lastname")
                    </li>
                    <li class="email username">
                        <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}>Email address:</label>
                        <input type="text" id="email" name="email" title="Email address" value="@Request["email"]" @Validation.GetHtml("email") />
                        @* Write any email validation errors to the page *@
                        @Html.ValidationMessage("email")
                    </li>
                    <li class="zipcode">
                        <label for="zipcode" @if(!ModelState.IsValidField("zipcode")){<text>class="error-label"</text>}>Zip code:</label>
                        <input type="text" id="zipcode" name="zipcode" title="Zip code" value="@Request["zipcode"]" @Validation.GetHtml("zipcode") />
                        @* Write any email validation errors to the page *@
                        @Html.ValidationMessage("zipcode")
                    </li>
                    <li class="password">
                        <label for="password" @if(!ModelState.IsValidField("password")) {<text>class="error-label"</text>}>Password:</label>
                        <input type="password" id="password" name="password" title="Password" @Validation.GetHtml("password") />
                        @* Write any password validation errors to the page *@
                        @Html.ValidationMessage("password")
                    </li>
                    <li class="confirm-password password">
                        <label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>} >Re-enter Password:</label>
                        <input type="password" id="confirmPassword" name="confirmPassword" title="Confirm password" @Validation.GetHtml("confirmPassword") />
                        @* Write any password validation errors to the page *@
                        @Html.ValidationMessage("confirmPassword")
                    </li>
                     @*<li class="recaptcha">
             
                       @ReCaptcha.GetHtml("PUBLIC_KEY", theme: "white")
                          @Html.ValidationMessage("recaptcha")
                        }
                    </li>*@
                    <li class="remember-me">
                        <input type="checkbox" id="register-iagree" name="iagree" value="true" title="I agree the Terms of Service and Privacy Policy" />
                        <label class="checkbox" for="register-iagree">I agree to the <a target="_blank" href="@(LcUrl.LangPath)About/TermsOfUse/">Terms of Service</a></label>
                    </li>
                    <li class="actions">
                        <button type="submit" class="main-action">Sign up</button>
                    </li>
                </ul>
            </fieldset>
        </form>
        <p class="choice-or">or</p>
        <div class="social choice-option">
             @RenderPage("_FacebookConnectButton.cshtml", new { Redirect = redirect } )
            <p class="footnote">*we don't post anything without your permission</p>
            <p class="info">By clicking "Connect with Facebook" you confirm that you accept the <a target="_blank" href="@(LcUrl.LangPath)About/TermsOfUse/">Terms of Service</a></p>
        </div>
    </section>
</article>