@{
    // Avoid loading the page twice
    if (Validation.GetHtml("profile-type") != null) {
        return;
    }
    
    //string PROVIDER_REDIRECT = LcUrl.LangPath + "HelpCenter/HowItWorks/#howitworks-providers";
    string PROVIDER_REDIRECT = LcUrl.LangPath + "dashboard/"; // "Account/ProviderWelcome/";
    string CUSTOMER_REDIRECT = LcUrl.LangPath; //"HelpCenter/HowItWorks/#howitworks-customers";
    var redirect = "";
    bool withLogo = PageData["WithLogo"] ?? true;
    string title = PageData["WelcomePopupTitle"] ?? "Welcome to Loconomics";
    bool allowBack = PageData["AllowBack"] ?? true;
    
    /* The special case of provider logged but without a position still (it went from facebook redirect)
        doesn't need more of the fields, only JobTitle,
        because of that, we check if user is logged, provider and without position, and changes
        validation rules and post tasks depending of that
     */

    // Check user
    var u = LcData.UserInfo.GetUserRowWithContactData();
    bool providerWithoutPosition = false;
    if (u != null) {
        if (u.IsProvider) {
            // Check if the logged provider has or not a position
            providerWithoutPosition = LcData.UserInfo.GetUserPos().Count == 0;
            
            if (!providerWithoutPosition && !IsPost) {
                // Is provider with almost one position, doesn't need this page, redirect
                if (Request.IsAjaxRequest()) {
                    LcHelpers.ReturnJsonResult(1, LcUrl.LangPath);
                } else {
                    Response.Redirect(LcUrl.LangPath);
                }
            }
        }
    }

    /* Validation rules */
    if (!providerWithoutPosition) {    
        Validation.RequireField("profile-type", "Please, select one from Provider or Customer");
        Validation.RequireField("firstname", LcRessources.RequiredField("First name"));
        
        // Last name disabled for a while, as of #514
        //Validation.RequireField("lastname", LcRessources.RequiredField("Last name"));
        
        Validation.RequireField("email", LcRessources.RequiredField("Email"));
        Validation.RequireField("zipcode", LcRessources.RequiredField("Zip code"));
        Validation.Add("email",
            Validator.Regex(LcValidators.EmailAddressRegexPattern, "The email is not valid."));
        
        // Password has special treatment, since is not required when connected with Facebook
        //Validation.RequireField("create-password", LcRessources.RequiredField("Password"));
    }

    if (IsPost && Validation.IsValid()) {
        // Server side validations
        int stateProvinceID = 0, postalCodeID = 0;
        if (!providerWithoutPosition) {
            stateProvinceID = LcData.GetStateFromZipCode(Request["zipcode"]);
            postalCodeID = LcData.GetPostalCodeID(Request["zipcode"], stateProvinceID);
            if (postalCodeID == 0) {
                ModelState.AddError("zipcode", LcRessources.GetText("postal-code-validation-error"));
            }
        }
        // Validations depending on the profile-type selected
        string profileType = Request["profile-type"];
        int positionID = Request["positionid"].AsInt();
        if (providerWithoutPosition) {
            profileType = "provider";
        }

        if (profileType == "provider") {
            if (!Request["positionid"].IsInt()) {
                if (Request["jobtitle"].IsEmpty()) {
                    ModelState.AddError("jobtitle", LcRessources.RequiredField("Job Title"));
                } else {
                    positionID = LcData.GetPositionIDByName(Request["jobtitle"]);
                    if (positionID <= 0) {
                        ModelState.AddError("jobtitle", "We are still working on adding that position. Please e-mail us (support@loconomics.com), and we'll be sure to get it created right away.");
                    }
                }
            }
            redirect += PROVIDER_REDIRECT;
        } else {
            redirect += CUSTOMER_REDIRECT;
        }
        
        // Password and Facebook Connect, or Customer user becoming provider
        var facebookId = getFacebookId();
        if (facebookId == 0 && u == null) {
            // No Facebook, no customer user, needs pasword
            if (Request["create-password"].IsEmpty()) {
                ModelState.AddError("create-password", LcRessources.RequiredField("Password"));
            }
        }
        
        // Optional Gender (comes with Facebook)
        var gender = Request["gender"].IsInt() ? Request["gender"].AsInt(-1) :
            (Request["gender"] == "female" ? 1 :
            Request["gender"] == "male" ? 2 :
            -1);
        // Ensure a valid value:
        if (gender != 1 && gender != 2) {
            gender = -1;
        }

        if (ModelState.IsValid) {
            // Double check that if the Facebook ID exists already
            // and load its user data on that case to get updated
            if (facebookId > 0) {
                var userFromFbId = LcAuth.GetFacebookUser(facebookId);
                if (userFromFbId != null) {
                    u = LcData.UserInfo.GetUserRowWithContactData(userFromFbId.UserID);
                }
            }
            
            // Create account:
            if (u == null &&
                LcAuth.ExistsEmail(Request["email"])) {
                // User already exists
                ModelState.AddFormError("Email address is already in use--please click login below.");
            } else {
                try {
                    // Check user type to be created
                    bool asProvider = profileType == "provider";
                        
                    LcAuth.RegisteredUser user = null;
                        
                    if (u == null) {
                        user = LcAuth.RegisterUser(
                            Request["email"],
                            Request["firstname"],
                            Request["lastname"],
                            N.DW(Request["create-password"]) ?? Membership.GeneratePassword(14, 5),
                            asProvider,
                            Request.Url.Query,
                            gender,
                            Request["about"]
                        );
                    }
                    else {
                        if (asProvider) {
                            LcAuth.BecomeProvider(u.UserID);
                        }
                            
                        user = new LcAuth.RegisteredUser {
                            Email = u.Email,
                            UserID = u.UserID,
                            IsProvider = asProvider
                        };
                    }
                    
                    if (facebookId != 0) {
                        LcAuth.ConnectWithFacebookAccount(user.UserID, facebookId);
                    }
                        
                    LcData.SetHomeAddress(user.UserID, "", "", "", stateProvinceID, postalCodeID, LcData.GetCurrentCountryID(), LcData.GetCurrentLanguageID());
                        
                    if (asProvider) {
                        try{
                            // Add the position.
                            // For already existint users, if it already has it, 
                            // the process will activate it and continue silently:
                            LcData.UserInfo.InsProviderPosition(user.UserID, positionID);
                        } catch (Exception exInsPos) {
                            // For the second attempt only
                            if (providerWithoutPosition) {
                                throw exInsPos;
                            }
                            // else: If there is an error ONLY with the position creation, still continue as
                            // successfully because the account was created, after the redirect
                            // the form will be showed again to fullfill position information
                        }
                    }
                        
                    LcAuth.SendRegisterUserEmail(user);
                        
                    // Auto-login (even for current user, to revalidate):
                    FormsAuthentication.SetAuthCookie(user.Email, false);
                    LcData.UserInfo.RegisterLastLoginTime(user.UserID);
                        
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
                
                if (ModelState.IsValid) {
                    // We return a json with result OK and redirect link (Code=1),
                    // and response end just after this:
                    LcHelpers.ReturnJsonResult(1, redirect);
                }
            }
        }
    }
    
    var idprefix = "welcomepopup";
    // WelcomePopup is required again #514 and is optional again #541
    var closable = true;
}
@functions{
    /// <summary>
    /// Get the Facebook ID doing validations.
    /// For simplicity and double check, the form parameter 'facebookid'
    /// is sent but the only secure way to know that is by verifying
    /// with the Facebook API and the signed cookie, doing a 
    /// double check.
    /// </summary>
    /// <returns></returns>
    long getFacebookId() {
        var fid = Request["facebookid"].AsLong();
        var fuser = LcFacebook.GetUserFromCurrentRequest();
        var fuserid = fuser != null ? ((string)fuser["id"] ?? "0").AsLong() : 0;

        if (fuserid == fid)
            return fid;

        return 0;
    }
}
<div id="welcomepopup" class="@(providerWithoutPosition ? "select-position" : "")">
    @if (closable)
    {
        <a class="close-popup" href="#close-popup">X</a>
    }

    <header>
        <h1 class="@(withLogo ? "has-icon" : "")">@(title)</h1>
        <div class="presentation">
            We’re readying for our launch this winter as a 
            <a href="#" data-toggle="popover" data-placement="bottom" data-trigger="hover"
                data-content="There are no fat cats in suits here. Just a bunch of hard-working people strengthening local economies...probably even one of your neighbors!">freelancer-owned cooperative</a>
            and marketplace.<br></br/>
            You'll soon be able to find and book therapists to pamper your mind or body, tutors for your upcoming trip to Spain,
            caterers for your next big birthday, and so much more.<br></br>
            For freelancers, we provide you the tools you need to launch and grow your own service-based business while having a seat
            at the table with a vote and share in the profits.<br></br>
            Introduce yourself, take a look around, and we’ll keep you in the loop as we progress!
        </div>
    </header>

    <div class="register">
        @if (allowBack)
        {
            <a class="back-action" href="#back">&lt;&lt;back</a>
        }
        <div id="welcomepopupLoading"><img alt="Loading" src="@(LcUrl.AppPath)img/theme/loading.gif" /></div>
        <form action="@(LcUrl.LangPath)Account/$WelcomePopup/@(Request.Url.Query)" method="post" class="ajax ajax-box lightform">
            @if (IsPost)
            {
                // Only showed on post for back-end errors, avoiding show it for first-time front-end errors:
                @Html.ValidationSummary("")
            }
            @if (!providerWithoutPosition)
            {
            <div class="profile-choice">
                <h2>Join our San Francisco community as a:</h2>
                <div class="profile-choice-list">
                <label><input type="radio" name="profile-type" value="provider" @Validation.GetHtml("profile-type") @LcHelpers.IsChecked("provider", new string[] { Request["profile-type"], (string)PageData["PreselectedType"] }) /> Freelancer (future co-op member)</label>
                <label><input type="radio" name="profile-type" value="customer" @Validation.GetHtml("profile-type") @LcHelpers.IsChecked("customer", new string[] { Request["profile-type"], (string)PageData["PreselectedType"] }) /> Potential customer</label>
                </div>
            </div>
            }
            <div class="profile-data">
                @if (!providerWithoutPosition)
                {
                <div class="social choice-option">
                    <a class="facebook-connect" href="#">
                        <img alt="Facebook Connect" src="@(LcUrl.AppPath)img/theme/connect-facebook-large.png" width="193px" height="24px"/>
                    </a>
                    <span style="display:none" class="facebook-logged">You are successfully logged with <strong>Facebook</strong>. Please, confirm your email address below:</span>
                    <span style="display:none" class="facebook-logged-is-user">You've already created an account with <strong>Facebook</strong>. <span class="provider">Please add another job title below.</span></span>
                </div>
                
                <p class="choice-or">or</p>
                }

                @if (providerWithoutPosition)
                {
                <h2>Select a job title:</h2>
                }

                <div class="choice-option">
                    <input type="hidden" name="facebookid" value="@Request["facebookid"]" />
                    <input type="hidden" name="gender" value="@Request["gender"]" />
                    <input type="hidden" name="about" value="@Request["about"]" />
                    @* We need to mark server-side a user that already exists, since with javascript
                        we need to manage to hide some fields and validations, as the case of
                        customer becoming provider. Do it this way, checking a userid, helps
                        fix the issue #594 *@
                    <input type="hidden" name="userid" value="@(u != null ? u.UserID : "")" />
                    <ul>
                        @if (!providerWithoutPosition)
                        {
                        <li class="provider customer has-personal-data"><label for="@(idprefix)-firstname">First name</label><input id="@(idprefix)-firstname" type="text" placeholder="First name" name="firstname" @Validation.GetHtml("firstname") value="@(Request["firstname"] ?? (u != null ? u.FirstName : ""))" /></li>
                        @* class="provider customer  *@
                        <li class="has-personal-data"><label for="@(idprefix)-lastname">Last name</label><input id="@(idprefix)-lastname" type="text" placeholder="Last name" name="lastname" @Validation.GetHtml("lastname") value="@(Request["lastname"] ?? (u != null ? u.LastName : ""))" /></li>
                        <li class="provider customer has-personal-data">
                        <label for="@(idprefix)-zipcode">Zip code</label><input data-val-postalcode="@(LcRessources.GetText("postal-code-validation-error"))" id="@(idprefix)-zipcode" @Validation.GetHtml("zipcode") @Html.Raw(ModelState.IsValidField("zipcode") ? "" : "class='input-validation-error'") type="text" placeholder="Zip code" name="zipcode" value="@(Request["zipcode"] ?? (u != null ? u.PostalCode : ""))" />
                        <span class="field-validation-error" data-valmsg-for="zipcode" data-valmsg-replace="true"></span>
                        </li>
                        <li class="provider customer has-personal-data">
                            <label for="@(idprefix)-email">Email</label><input id="@(idprefix)-email" type="text" placeholder="E-mail address" name="email"  @Validation.GetHtml("email") value="@(Request["email"] ?? (u != null ? u.Email : ""))" />
                            <span class="facebook-note" style="display:none"><strong>IMPORTANT</strong>: Use an e-mail address you check regularly as all booking communications will be sent here. We won't spam you so worry not.</span>
                            </li>
                        <li class="provider customer has-secure-data"><label for="@(idprefix)-password">Password</label><input id="@(idprefix)-password" type="password" placeholder="Create password" name="create-password" @Validation.GetHtml("create-password")/></li>
                        }
                        <li class="provider job-title has-search-data"><label for="@(idprefix)-jobtitle">Job title</label><input id="@(idprefix)-jobtitle" type="text" placeholder="Job title (you can add more later)" name="jobtitle" @Validation.GetHtml("jobtitle") @Html.Raw(ModelState.IsValidField("jobtitle") ? "" : "class='input-validation-error'") value="@Request["jobtitle"]" /></li>
                        <li class="position-description provider"><textarea rows="5" name="jobdescription" disabled readonly>@Request["jobdescription"]</textarea><input type="hidden" name="positionid" value="@Request["positionid"]" /></li>
                    </ul>
                    <div class="actions">
                        @{
                            var btnText = "Sign up - It's free!";
                        }
                        @if (providerWithoutPosition)
                        {
                            btnText = "Save and continue";
                        }
                        <button type="submit" class="next-action action">@(btnText)</button>   
                    </div>
                </div>

            </div>
        </form>
    </div>
    <footer>
    @if (!providerWithoutPosition)
    {
        <div class="terms">
            By clicking Sign up, you confirm that you accept the <a class="terms-of-use" target="_blank" href="@(LcUrl.LangPath)About/TermsOfUse/" data-tooltip-url="#terms-tooltip">Terms of Use.</a>
            We won't share your email address or post anything to your Facebook profile without permission.
            <div class="popups"><div id="terms-tooltip">
                <ul>
                    <li>I am at least 18 years old and will personally provide the services listed on my profile.</li>
                    <li>I am not acting on behalf of an agency or employer for services booked using my profile.</li>
                    <li>I am legally authorized to perform the services listed on my profile and possess any licenses required to perform those services.</li>
                    <li>I will not engage in any unlawful or innapropriate activity while performing services for Customers.</li>
                    <li>I will take the necessary safety precautions when meeting Customers to assure both their and my own safety.</li>
                </ul>
                @*<p>View full <a target="_blank" href="@(LcUrl.LangPath)About/TermsOfUse/">Terms of Use</a></p>*@
            </div></div>
        </div>
        <div class="login">
            Already have an account? <a target="_blank" href="@(LcUrl.LangPath)Account/Login/" class="login action">Log in</a>
        </div>
    }
    </footer>
</div>