@{
    //string PROVIDER_REDIRECT = LcUrl.LangPath + "HelpCenter/HowItWorks/#howitworks-providers";
    string PROVIDER_REDIRECT = LcUrl.LangPath + "dashboard/"; // "HelpCenter/ProviderWelcome/";
    string CUSTOMER_REDIRECT = LcUrl.LangPath + "dashboard/"; //"HelpCenter/HowItWorks/#howitworks-customers";
    var redirect = "";
    bool withLogo = PageData["WithLogo"] ?? true;
    string title = PageData["Title"] ?? "Welcome to Loconomics";
    
    /* The special case of provider logged but without a position still (it went from facebook redirect)
        doesn't need more of the fields, only JobTitle,
        because of that, we check if user is logged, provider and without position, and changes
        validation rules and post tasks depending of that
     */

    // Check user
    var u = LcData.UserInfo.GetUserRow();
    bool providerWithoutPosition = false;
    if (u != null) {
        if (u.IsProvider) {
            // Check if the logged provider has or not a position
            providerWithoutPosition = LcData.UserInfo.GetUserPos().Count == 0;
        }
        if (!providerWithoutPosition) {
            // Is customer or provider with almost one position, doesn't need this page, redirect
            if (Request.IsAjaxRequest()) {
                LcHelpers.ReturnJsonResult(1, LcUrl.LangPath);
            } else {
                Response.Redirect(LcUrl.LangPath);
            }
        }
    }

    /* Validation rules */
    if (!providerWithoutPosition) {    
        Validation.RequireField("profile-type", "Please, select one from Provider or Customer");
        Validation.RequireField("firstname", LcRessources.RequiredField("First name"));
        Validation.RequireField("lastname", LcRessources.RequiredField("Last name"));
        Validation.RequireField("email", LcRessources.RequiredField("Email"));
        Validation.RequireField("zipcode", LcRessources.RequiredField("Zip code"));
        Validation.RequireField("password", LcRessources.RequiredField("Password"));
        Validation.Add("email",
            Validator.Regex(LcValidators.EmailAddressRegexPattern, "The email is not valid."));
    }

    if (IsPost && Validation.IsValid()) {
        // Server side validations
        int stateProvinceID = 0, postalCodeID = 0;
        if (!providerWithoutPosition) {
            stateProvinceID = LcData.GetStateFromZipCode(Request["zipcode"]);
            postalCodeID = LcData.GetPostalCodeID(Request["zipcode"], stateProvinceID);
            if (postalCodeID == 0) {
                ModelState.AddError("zipcode", LcRessources.GetText("postal-code-validation-error"));
            }
        }
        // Validations depending on the profile-type selected
        string profileType = Request["profile-type"];
        int positionID = Request["positionid"].AsInt();
        if (providerWithoutPosition) {
            profileType = "provider";
        }

        if (profileType == "provider") {
            if (!Request["positionid"].IsInt()) {
                if (Request["jobtitle"].IsEmpty()) {
                    ModelState.AddError("jobtitle", LcRessources.RequiredField("Job Title"));
                } else {
                    positionID = LcData.GetPositionIDByName(Request["jobtitle"]);
                    if (positionID <= 0) {
                        ModelState.AddError("jobtitle", "We are still working on adding that position. Please e-mail us (support@loconomics.com), and we'll be sure to get it created right away.");
                    }
                }
            }
            redirect += PROVIDER_REDIRECT;
        } else {
            redirect += CUSTOMER_REDIRECT;
        }

        if (ModelState.IsValid) {
            if (providerWithoutPosition) {
                LcData.UserInfo.InsProviderPosition(u.UserID, positionID);
                LcHelpers.ReturnJsonResult(1, redirect);
            } else {
                // Create account:
                if (LcAuth.ExistsEmail(Request["email"])) {
                    // User already exists
                    ModelState.AddFormError("Email address is already in use--please click login below.");
                } else {
                    try {
                        // Check user type to be created
                        bool asProvider = profileType == "provider";
                        var user = 
                        LcAuth.RegisterUser(
                            Request["email"],
                            Request["firstname"],
                            Request["lastname"],
                            Request["password"],
                            asProvider
                        );
                        LcData.SetHomeAddress(user.UserID, "", "", "", stateProvinceID, postalCodeID, LcData.GetCurrentCountryID(), LcData.GetCurrentLanguageID());
                        LcAuth.SendRegisterUserEmail(user);
                        // Auto-login:
                        LcAuth.Login(user.Email, Request["password"]);
                        if (asProvider) {
                            try{
                                // Add position
                                LcData.UserInfo.InsProviderPosition(user.UserID, positionID);
                            } catch {
                                // If there is an error ONLY with the position creation, still continue as
                                // successfully because the account was created, after the redirect
                                // the form will be showed again to fullfill position information
                            }
                        }
                    } catch (System.Web.Security.MembershipCreateUserException e) {
                        ModelState.AddFormError(e.Message);
                    }
                
                    if (ModelState.IsValid) {
                        // We return a json with result OK and redirect link (Code=1),
                        // and response end just after this:
                        LcHelpers.ReturnJsonResult(1, redirect);
                    }
                }
            }
        }
    }
    
    var idprefix = "welcomepopup";
}
<div id="welcomepopup" class="@(providerWithoutPosition ? "select-position" : "")">
    <header>
        <h1 class="@(withLogo ? "has-icon" : "")">@(title)</h1>
        <div class="presentation">
            Whether you're providing or purchasing local services, we've designed a marketplace with you in mind.
            We're a <a href="#bcorp" class="has-tooltip" title="Benefit Corporations are a new class of corporation that are required to create a material positive impact on society and the environment.">California Benefit Corporation</a>
            dedicated to the self-employed movement.
            We invite you to create a <strong>free</strong> profile!
        </div>
    </header>

    <div class="register">
        <div id="welcomepopupLoading"><img alt="Loading" src="@(LcUrl.AppPath)img/theme/loading.gif" /></div>
        <form action="@(LcUrl.LangPath)Account/$WelcomePopup/@(Request.Url.Query)" method="post" class="ajax ajax-box lightform">
            @if (IsPost)
            {
                // Only showed on post for back-end errors, avoiding show it for first-time front-end errors:
                @Html.ValidationSummary("")
            }
            @if (!providerWithoutPosition)
            {
            <div class="profile-choice">
                <h2>Join our San Francisco community as a:</h2>
                <label><input type="radio" name="profile-type" value="provider" @Validation.GetHtml("profile-type") @LcHelpers.IsChecked("provider", new string[] { Request["profile-type"], (string)PageData["PreselectedType"] }) /> Provider</label>
                <label><input type="radio" name="profile-type" value="customer" @Validation.GetHtml("profile-type") @LcHelpers.IsChecked("customer", new string[] { Request["profile-type"], (string)PageData["PreselectedType"] }) /> Customer</label>
            </div>
            }
            <div class="profile-data">
                @if (!providerWithoutPosition)
                {
                <div class="social choice-option">
                    @RenderPage("_FacebookConnectButton.cshtml", new { Redirect = redirect, Size = "large" })
                </div>
                
                <p class="choice-or">or</p>
                }

                @if (providerWithoutPosition)
                {
                <h2>Select a job title:</h2>
                }

                <div class="choice-option">
                    <ul>
                        @if (!providerWithoutPosition)
                        {
                        <li class="provider customer has-personal-data"><label for="@(idprefix)-firstname">First name</label><input id="@(idprefix)-firstname" type="text" placeholder="First name" name="firstname" @Validation.GetHtml("firstname") value="@Request["firstname"]" /></li>
                        <li class="provider customer has-personal-data"><label for="@(idprefix)-lastname">Last name</label><input id="@(idprefix)-lastname" type="text" placeholder="Last name" name="lastname" @Validation.GetHtml("lastname") value="@Request["lastname"]" /></li>
                        <li class="provider customer has-personal-data"><label for="@(idprefix)-zipcode">Zip code</label><input data-val-postalcode="@(LcRessources.GetText("postal-code-validation-error"))" id="@(idprefix)-zipcode" @Validation.GetHtml("zipcode") @Html.Raw(ModelState.IsValidField("zipcode") ? "" : "class='input-validation-error'") type="text" placeholder="Zip code" name="zipcode" value="@Request["zipcode"]" /></li>
                        <li class="provider customer has-personal-data"><label for="@(idprefix)-email">Email</label><input id="@(idprefix)-email" type="text" placeholder="E-mail address" name="email"  @Validation.GetHtml("email") value="@Request["email"]" /></li>
                        <li class="provider customer has-secure-data"><label for="@(idprefix)-password">Password</label><input id="@(idprefix)-password" type="password" placeholder="Create password" name="password" @Validation.GetHtml("password")/></li>
                        }
                        <li class="provider job-title has-search-data"><label for="@(idprefix)-jobtitle">Job title</label><input id="@(idprefix)-jobtitle" type="text" placeholder="Job title (you can add more later)" name="jobtitle" @Validation.GetHtml("jobtitle") @Html.Raw(ModelState.IsValidField("jobtitle") ? "" : "class='input-validation-error'") value="@Request["jobtitle"]" /></li>
                        <li class="position-description provider"><textarea rows="5" name="jobdescription" readonly>@Request["jobdescription"]</textarea><input type="hidden" name="positionid" value="@Request["positionid"]" /></li>
                    </ul>
                    <div class="actions">
                        @{
                            var btnText = "Sign up - It's free!";
                        }
                        @if (providerWithoutPosition)
                        {
                            btnText = "Save and continue";
                        }
                        <button type="submit" class="main-action action">@(btnText)</button>   
                    </div>
                </div>

            </div>
        </form>
    </div>
    <footer>
    @if (!providerWithoutPosition)
    {
        <div class="terms">
            By clicking Sign up, you confirm that you accept the <a class="terms-of-use" target="_blank" href="@(LcUrl.LangPath)About/TermsOfUse/" data-tooltip-url="#terms-tooltip">Terms of Use.</a>
            We won't share your email address or post anything to your Facebook profile without permission.
            <div class="popups"><div id="terms-tooltip">
                <ul>
                    <li>I am at least 18 years old and will personally provide the services listed on my profile.</li>
                    <li>I am not acting on behalf of an agency or employer for services booked using my profile.</li>
                    <li>I am legally authorized to perform the services listed on my profile and possess any licenses required to perform those services.</li>
                    <li>I will not engage in any unlawful or innapropriate activity while performing services for Customers.</li>
                    <li>I will take the necessary safety precautions when meeting Customers to assure both their and my own safety.</li>
                </ul>
                @*<p>View full <a target="_blank" href="@(LcUrl.LangPath)About/TermsOfUse/">Terms of Use</a></p>*@
            </div></div>
        </div>
        <div class="login">
            Already have an account? <a target="_blank" href="@(LcUrl.LangPath)Account/Login/" class="login action">Login</a>
        </div>
    }
    </footer>
</div>