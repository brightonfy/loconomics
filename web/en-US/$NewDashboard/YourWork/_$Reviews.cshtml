@* Cancellation Policy for the position
*@
@{
    LcHelpers.SecurePage();
    
    var PageState = PageData["PageState"] ?? ModelState;
    var doReturn = PageState == ModelState;

    int providerID = WebSecurity.CurrentUserId;
    var u = LcData.UserInfo.GetUserRow();
    int positionID = PageData["PositionID"] ?? Request["PositionID"].AsInt();

    var idprefix = "position-" + positionID + "-reviews";
    
    if (Validation.GetHtml("clientsemails") == null) {
        Validation.RequireField("clientsemails", LcRessources.RequiredField("Email addresses list"));
    }
    
    if (IsPost && Validation.IsValid()) {
        
        var emails = LcValidators.ReadEmailAddressList(Request["clientsemails"]);
        if (emails == null){
            PageState.AddError("clientsemails", "There are errors in the email list. Please, use a comma to separate emails and verify all are valid addresses.");
        }
        if (PageState.IsValid) {
            
            int successfulSent = 0;
            foreach (string email in emails) {
                try {
                    LcMessaging.SendMail(email,
                        String.Format("Loconomics.com - Write {0} {1} a reference", u.FirstName, u.LastName),
                        LcMessaging.ApplyTemplate(LcUrl.LangPath + "Email/EmailProviderReference/", new Dictionary<string,object>{
                            { "ProviderUserID", u.UserID }
                            ,{ "PositionID", positionID }
                    }));
                    successfulSent++;
                } catch (System.FormatException ex) {
                    PageState.AddFormError(String.Format(
                        "We're sorry, there was an error sending the request to {0}, please ensure the address is correct.",
                        email)
                    );
                } catch (Exception ex) {
                    PageState.AddFormError(String.Format(
                        "We're sorry, there was an error sending the request to {0}.",
                        email)
                    );
                }
            }
            
            if (successfulSent > 0) {
                // Set VerificationID:12 for this user as 'pending'; thats enough to off the alert.
                using (var db = Database.Open("sqlloco")){
                    db.Execute(@"EXEC SetUserVerification @0,@1,@2,@3", providerID, 12, DateTime.Now, 2, positionID);
                    db.Execute("EXEC TestAlertReferenceRequests @0, @1", providerID, positionID);
                }
            }

            if (PageState.IsValid && doReturn) {
                LcHelpers.ReturnJsonResult(5, "Sent");
            }
        }
    }
}
<p class="DashboardSection-page-section-introduction">
    Here’s a chance to pull in some favors.
    We know you’ve done great work in the past – and your clients deserve to know too.
    Enter the email addresses of past clients and we’ll pass along a sweetly-worded reference request.
    Rest assured: no spamming will occur. We’ll post the first five to your profile. 
</p>
<fieldset class="DashboardReviews">
    <ul>
        <li>
            <label for="@idprefix-clientsemails">Please enter the e-mail addresses of past clients, and we'll send them a request (don’t worry, we will not spam them):</label>
            <textarea data-success-message="Sent!" id="@idprefix-clientsemails" @Validation.GetHtml("clientsemails") name="clientsemails" placeholder="type e-mail addresses separated by commas">@Request["clientsemails"]</textarea>
        </li>
    </ul>
</fieldset>