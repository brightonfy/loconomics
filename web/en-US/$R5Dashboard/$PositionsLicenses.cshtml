@using WebMatrix.Data;
@{
    LcHelpers.ProviderPage();
    // Current user data
    var u = LcData.UserInfo.GetUserRowWithContactData();
    // Current position data record:
    var p = LcData.UserInfo.GetUserCurrentPos();
    var n = p.PositionID;
    
    var idprefix = "position" + n + "-licenses";
    
    dynamic licenses = null, userLicenses = null;
    var sqlGetLicenses = @"
        SELECT
            L.*,
            SP.StateProvinceName,
            SP.StateProvinceCode
        FROM
            licensecertification As L
             INNER JOIN
            positionlicense As P
              ON L.LicenseCertificationID = P.LicenseCertificationID
                AND L.StateProvinceID = P.StateProvinceID
                AND L.CountryID = P.CountryID
             INNER JOIN
            StateProvince As SP
              ON SP.StateProvinceID = L.StateProvinceID
        WHERE
            P.PositionID = @0
             AND
            L.Active = 1
             AND
            P.Active = 1
             AND
            L.StateProvinceID = @1
    ";
    var sqlGetUserLicenses = @"
        SELECT
            L.LicenseCertificationType,
            S.StatusName,
            S.StatusDescription
        FROM
            LicenseCertification As L
             INNER JOIN
            userlicenseverification As V
              ON L.LicenseCertificationID = V.LicenseCertificationID
             INNER JOIN
            Status As S
              ON V.StatusID = S.StatusID
        WHERE
            V.ProviderUserID = @0
             AND
            V.PositionID = @1
             AND
            V.StatusID <> 2
    ";
    
    if (Validation.GetHtml("license-type") == null) {
        Validation.RequireField("license-type", LcRessources.RequiredField("License"));
        Validation.RequireField("first-name", LcRessources.RequiredField("First name"));
        Validation.RequireField("last-name", LcRessources.RequiredField("Last name"));
        Validation.RequireField("license-number", LcRessources.RequiredField("License number"));
        Validation.RequireField("county", LcRessources.RequiredField("County"));
        Validation.RequireField("city", LcRessources.RequiredField("City"));
        Validation.Add("license-link", Validator.StringLength(2073, 0, "License URL link must be fewer than 2073 characters."));
        Validation.Add("license-number", Validator.StringLength(100, 0, "License/Certification number must be fewer than 100 characters."));
        Validation.Add("first-name", Validator.StringLength(100, 0, "First name must be fewer than 100 characters."));
        Validation.Add("last-name", Validator.StringLength(100, 0, "Last name must be fewer than 100 characters."));
        Validation.Add("second-last-name", Validator.StringLength(100, 0, "Second last name must be fewer than 100 characters."));
        Validation.Add("middle-initial", Validator.StringLength(1, 0, "Middle initial must be a single character."));
        Validation.Add("business-name", Validator.StringLength(200, 0, "Business name must be fewer than 200 characters."));
        Validation.Add("city", Validator.StringLength(2073, 0, "City must be fewer than 100 characters."));
    }

    if (IsPost && Validation.IsValid()) {
        if (Request["middle-initial"].Length > 1) {
            ModelState.AddError("middle-initial", "Middle Initial must be only one letter");
        }
        if (ModelState.IsValid) {
            var sqlCheckLicense = @"
                SELECT  count(*)
                FROM    userlicenseverification
                WHERE   ProviderUserID = @0
                         AND
                        PositionID = @1
                         AND
                        LicenseCertificationID = @2 
            ";
            var sqlCheckOptionGroup = @"
                DECLARE @OptionGroup varchar(50)

                SELECT  @OptionGroup = OptionGroup
                FROM    LicenseCertification As L
                WHERE   L.LicenseCertificationID = @2

                SELECT  count(*)
                FROM    licensecertification As L
                         INNER JOIN
                        userlicenseverification As R
                          ON L.LicenseCertificationID = R.LicenseCertificationID
                WHERE
                        ProviderUserID = @0
                         AND
                        PositionID = @1
                         AND
                        L.Active = 1
                         AND
                        L.OptionGroup is not null
                         AND
                        L.OptionGroup = @OptionGroup
            ";
            var sqlInsRequest = @"
                INSERT INTO userlicenseverification (
                    ProviderUserID,
                    PositionID,
                    -- License info
                    LicenseCertificationID,
                    LicenseCertificationURL,
                    LicenseCertificationNumber,
                    -- Provider personal
                    FirstName,
                    LastName,
                    SecondLastName,
                    MiddleInitial,
                    BusinessName,
                    -- Provider location
                    City,
                    CountyID,
                    StateProvinceID,
                    CountryID,
                    -- Record
                    CreatedDate,
                    ModifiedDate,
                    ModifiedBy,
                    StatusID
                ) VALUES (
                    @0, @1,
                    @2, @3, @4,
                    @5, @6, @7, @8, @9,
                    @10, @11, @12, @13,
                    getdate(), getdate(), 'sys', 1 --Pending status
                )

                -- Check Alert
                EXEC TestAlertProfessionalLicense @0, @1
            ";
            
            var beforePositionStatuses = LcData.UserInfo.GetUserPositionsStatuses((int)u.UserID);
            
            using (var db = Database.Open("sqlloco")) {
            
                if (db.QueryValue(sqlCheckLicense, u.UserID, p.PositionID, Request["license-type"]) > 0) {
                    ModelState.AddError("license-type", "You already have this license registered!");
                }
                if (ModelState.IsValid && db.QueryValue(sqlCheckOptionGroup, u.UserID, p.PositionID, Request["license-type"]) > 0) {
                    ModelState.AddError("license-type", "You have a license that is incompatible with this one.");
                }
            
                if (ModelState.IsValid) {
                    // Save request
                    db.Execute(sqlInsRequest,
                        u.UserID,
                        p.PositionID,
                        Request["license-type"],
                        Request["license-link"],
                        Request["license-number"],
                        Request["first-name"],
                        Request["last-name"],
                        Request["second-last-name"],
                        Request["middle-initial"],
                        Request["business-name"],
                        Request["city"],
                        Request["county"],
                        u.StateProvinceID,
                        u.PreferredCountryID //LcData.GetCurrentCountryID()
                    );
                    // Send email to loconomics
                    LcMessaging.SendMail("verifications@loconomics.com",
                        "[Action Required] License verification request",
                        LcMessaging.ApplyTemplate(LcUrl.LangPath + "Email/EmailLicenseVerificationRequest",
                            new Dictionary<string, object> { 
                                { "ProviderUserID", u.UserID },
                                { "PositionID", p.PositionID },
                                { "LicenseCertificationID", Request["license-type"] }
                    }));

                    // Show the profile activation popup with 'next-step' buttons and progress information when need,
                    // if not the short message is showed:
                    if (!LcHelpers.UseProfileActivationPopup(beforePositionStatuses,
                        u.UserID,
                        LcRessources.DataSaved,
                        "Edit licenses"))
                    {
                        LcHelpers.ReturnJsonResult(5, LcRessources.ShortDataSaved);
                    }
                }
            }
        }
    }
    
    using (var db = Database.Open("sqlloco")) {
        licenses = db.Query(sqlGetLicenses, p.PositionID, u.StateProvinceID);
        userLicenses = db.Query(sqlGetUserLicenses, u.UserID, p.PositionID);
    }
}
@LcHelpers.GetValidationScripts()
<div id="positions-licenses-for-@(p.PositionID)" class="position-licenses-container" data-position-id="@(p.PositionID)">
@if (!(u.StateProvinceID is int))
{
    <p class="setting-instructions">
        Please specify your address <a href="@(LcUrl.LangPath)R5Dashboard/Account/#account-profile-contact">here</a> in order for us to determine if a license is required to perform this work.
    </p>
}
else if (licenses == null || licenses.Count == 0)
{
    <p class="setting-instructions">
        Our research has indicated that a license or certification is not needed for this type of work. If this is incorrect, please <a href="mailto:providerhelp@loconomics.com">e-mail us</a>, and we'll update our records accordingly.
    </p>
}
else
{
    <p class="setting-instructions">
        Our research tells that you require a professional license or certification to perform this work. Please input your license details below, and we’ll verify it right away.  If you feel any of the information below is incomplete or inaccurate, please <a href="mailto:providerhelp@loconomics.com">e-mail us</a>, and we'll update our records accordingly.
    </p>
    <div>
        @if (userLicenses != null && userLicenses.Count > 0)
        {
        <div class="user-licenses">
            @{ 
                var resRequestedLicensesSingular = "You have requested {0} license verification:";
                var resRequestedLicensesPlural = "You have requested {0} licenses verifications:";
            }
            <h4>@String.Format(userLicenses.Count == 1 ? resRequestedLicensesSingular : resRequestedLicensesPlural, userLicenses.Count) </h4>
            <ul>
            @foreach (var ul in userLicenses)
            {
                <li>
                    <strong>@(ul.LicenseCertificationType)</strong>, status: 
                    <em>@ul.StatusName</em> @ul.StatusDescription
                </li>
            }
            </ul>
        </div>
        }
        @RenderPage(LcUrl.RenderLangPath + "Profile/$UserVerifiedLicensesWidget.cshtml", new { 
            UserID = u.UserID,
            PositionID = p.PositionID,
            Title = "Your verified licenses:"
        })
        <form action="@(LcUrl.LangPath)$R5Dashboard/$PositionsLicenses/" method="post" class="positionlicenses ajax ajax-box" id="@idprefix-licenses">
            <input type="hidden" name="PositionID" value="@p.PositionID"/>
            @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
            <fieldset class="license-type-selector">
                <label for="@idprefix-license-type">Please select the license/certification you possess:</label>
                <select id="@idprefix-license-type" name="license-type" @Validation.GetHtml("license-type")>
                    <option value=""></option>
                    @foreach (var license in licenses)
                    {
                        <option @LcHelpers.IsSelected(Request["license-type"], license.LicenseCertificationID)
                            value="@license.LicenseCertificationID" 
                            data-description="@license.LicenseCertificationTypeDescription"
                            data-state-name="@license.StateProvinceName"
                            data-authority-name="@license.LicenseCertificationAuthority"
                            data-verification-url="@license.VerificationWebsiteURL"
                            data-get-license-url="@license.HowToGetLicensedURL">
                            @license.LicenseCertificationType</option>
                    }
                </select>
                <ul class="license-details">
                    <li><strong>Description:</strong> <span class="license-description"></span></li>
                    <li><strong>State:</strong> <span class="license-state"></span></li>
                    <li><strong>Certifying board:</strong> <a href="#" target="_blank" class="license-authority"></a></li>
                </ul>
            </fieldset>
            <fieldset class="license-request">
                <ul>
                    <li>
                        <label for="@idprefix-county">County:</label>
                        <select id="@idprefix-county" name="county" @Validation.GetHtml("county")>
                            <option value=""></option>
                            @LcHelpers.CountyOptions(Request["county"])
                        </select>
                    </li>
                    <li>
                        <label for="@idprefix-license-number">License/certificate number:</label>
                        <input type="text" id="@idprefix-license-number" value="@Request["license-number"]" name="license-number" @Validation.GetHtml("license-number")/>
                    </li>
                    <li>
                        <label for="@idprefix-business-name">Business name (optional):</label>
                        <input type="text" id="@idprefix-business-name" value="@Request["business-name"]" name="business-name" @Validation.GetHtml("business-name")/>
                    </li>
                    <li>
                        <label for="@idprefix-first-name">First name:</label>
                        <input type="text" id="@idprefix-first-name" value="@Request["first-name"]" name="first-name" @Validation.GetHtml("first-name")/>
                    </li>
                    <li>
                        <label for="@idprefix-last-name">Last name:</label>
                        <input type="text" id="@idprefix-last-name" value="@Request["last-name"]" name="last-name" @Validation.GetHtml("last-name")/>
                    </li>
                    @if (LcData.GetCurrentCountryID() == 1)
                    {
                    <li>
                        <label for="@idprefix-middle-initial">Middle initial:</label>
                        <input type="text" id="@idprefix-middle-initial" value="@Request["middle-initial"]" name="middle-initial" @Validation.GetHtml("middle-initial")/>
                    </li>
                    }
                    @if (LcData.GetCurrentCountryID() == 2)
                    {
                    <li>
                        <label for="@idprefix-second-last-name">Second last name:</label>
                        <input type="text" id="@idprefix-second-last-name" value="@Request["second-last-name"]" name="second-last-name" @Validation.GetHtml("second-last-name")/>
                    </li>
                    }
                    <li>
                        <label for="@idprefix-city">City:</label>
                        <input type="text" id="@idprefix-city" value="@Request["city"]" name="city" @Validation.GetHtml("city")/>
                    </li>
                    <li>
                        <label for="@idprefix-license-link">Link to license:</label>
                        <input type="text" id="@idprefix-license-link" value="@Request["license-link"]" name="license-link" @Validation.GetHtml("license-link")/>
                    </li>
                    <li class="get-license-info">
                        Need to apply or renew this license/certification? Please <a class="get-license-url" target="_blank" href="#">visit this link</a>.
                    </li>
                </ul>
            </fieldset>
            <fieldset class="actions">
                <button class="save main-action" type="submit">Save</button>
            </fieldset>
        </form>
    </div>
}
</div>