@*  $CalendarEditEventForm.cshtml
    Allow edit or create an event.
 *@
@using WebMatrix.Data;
@{
    LcHelpers.ProviderPage();
    
    var u = LcData.UserInfo.GetUserRow();
    var eventID = Request["EventID"].AsInt();
    var idprefix = "editEvent" + eventID.ToString();
    
    if (Request["Action"] == "delete") {

        // Delete eventID
        LcCalendar.DelUserAppointment(u.UserID, eventID);
        LcHelpers.ReturnJsonResult(0, "Event was succesful deleted!");
        // ENDS page execution
    }
    
    // Validation rules
    Validation.RequireField("summary", LcRessources.RequiredField("Title"));
    Validation.RequireField("startdate", LcRessources.RequiredField("Start Date"));
    Validation.RequireField("enddate", LcRessources.RequiredField("End Date"));
    Validation.Add("startdate", Validator.DateTime());
    Validation.Add("starttime", Validator.DateTime());
    Validation.Add("enddate", Validator.DateTime());
    Validation.Add("endtime", Validator.DateTime());
    Validation.Add("repeat-every", Validator.Integer());
    Validation.Add("repeat-ocurrences", Validator.Integer());
    Validation.Add("repeat-end-date", Validator.DateTime());
    
    // Save posted data
    if (IsPost && Validation.IsValid()) {
        
        var beforePositionStatuses = LcData.UserInfo.GetUserPositionsStatuses((int)u.UserID);
        
        LcCalendar.SetUserAppointment(u.UserID,
            eventID,
            Request["type"].AsInt(),
            Request["summary"],
            (Request["startdate"] + " " + Request["starttime"]).AsDateTime(),
            (Request["enddate"] + " " + Request["endtime"]).AsDateTime(),
            Request["allday"].AsBool(),
            Request["repeat"].AsBool(),
            Request["repeat-frequency"].AsInt(),
            Request["repeat-every"].AsInt(),
            Request["repeat-ends"] == "date" ? (DateTime?)Request["repeat-end-date"].AsDateTime() : null,
            Request["repeat-ends"] == "ocurrences" ? (int?)Request["repeat-ocurrences"].AsInt() : null,
            Request["location"],
            Request["description"]
        );
        
        if (ModelState.IsValid) {
            // Show the profile activation popup with 'next-step' buttons and progress information when need,
            // if not the short message is showed:
            if (!LcHelpers.UseProfileActivationPopup(beforePositionStatuses,
                u.UserID,
                LcRessources.DataSaved,
                LcRessources.OK))
            {
                LcHelpers.ReturnJsonResult(5, LcRessources.ShortDataSaved);
            }
        }
    }
    
    dynamic eventTypes = null, repeatFrequencies = null;
    using (var db = Database.Open("sqlloco")) {
        eventTypes = db.Query(@"SELECT EventTypeID, DisplayName FROM CalendarEventType WHERE DisplayName is not null");
        repeatFrequencies = db.Query(@"
            SELECT  ID, FrequencyType
            FROM    CalendarRecurrenceFrequencyTypes
            WHERE   ID > 0
        ");
    }
    var calEvent = LcCalendar.GetUserAppointment(u.UserID, eventID);
    dynamic calRecurrence = null;
    if (calEvent != null && calEvent.CalendarReccurrence != null && calEvent.CalendarReccurrence.Count > 0) {
        foreach(var r in calEvent.CalendarReccurrence) {
            calRecurrence = r;
            break;
        }
    }
    var calEventIsRecurrent = (calRecurrence != null);
    var recEnds = "never";
    if (calRecurrence != null) {
        if (calRecurrence.Until != null) {
            recEnds = "date";
        } else if (calRecurrence.Count != null && calRecurrence.Count > 0) {
            recEnds = "ocurrences";
        }
    }
}
<form action="@(LcUrl.LangPath)$Dashboard/$CalendarEditEventForm/?EventID=@(eventID)" method="post" class="crudl-form ajax ajax-box" id="@idprefix">
    @LcHelpers.GetValidationScripts()
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)

    <ul>
        <li class="type">
            <label for="@(idprefix)Type">Type</label>
            <select name="type" id="@(idprefix)Type">
                @foreach (var type in eventTypes) {
                    <option value="@type.EventTypeID" @LcHelpers.IsSelected(type.EventTypeID, Request["type"] ?? calEvent == null ? "" : calEvent.EventType)>@type.DisplayName</option>
                }
            </select>
        </li>
        <li class="what">
            <label for="@(idprefix)Summary">What</label>
            <input id="@(idprefix)Summary" type="text" placeholder="Untitled event" name="summary" value="@(Request["summary"] ?? calEvent == null ? "" : calEvent.Summary)" />
        </li>
        <li class="when">
            <label for="@(idprefix)StartDate">When</label>
            <input id="@(idprefix)StartDate" name="startdate" type="text" value="@(Request["startdate"] ?? calEvent == null ? "" : calEvent.StartTime.ToShortDateString())" />
            <input name="starttime" type="text" value="@(Request["starttime"] ?? calEvent == null ? "" : calEvent.StartTime.ToShortTimeString())" />
            <span class="when-to">to</span>
            <input name="endtime" type="text" value="@(Request["endtime"] ?? calEvent == null ? "" : calEvent.EndTime.ToShortTimeString())" />
            <input name="enddate" type="text" value="@(Request["enddate"] ?? calEvent == null ? "" : calEvent.EndTime.ToShortDateString())" />
            <div class="time-options">
                <label><input type="checkbox" name="allday" value="True" @LcHelpers.IsChecked(true, Request["allday"] ?? calEvent == null ? "" : calEvent.IsAllDay) /> All day</label>
                <label><input type="checkbox" name="repeat" value="True" @LcHelpers.IsChecked(true, Request["repeat"] ?? calEvent == null ? "" : calEventIsRecurrent) /> Repeat...</label>
                <div class="repeat-options">
                    <ul>
                        <li>
                            <label for="@(idprefix)RepeatFrequency">Repeats:</label>
                            <select name="repeat-frequency" id="@(idprefix)RepeatFrequency">
                                @foreach (var freq in repeatFrequencies) {
                                    <option value="@freq.ID" @LcHelpers.IsSelected(freq.ID, Request["repeat-frequency"] ?? calRecurrence == null ? "" : calRecurrence.Frequency)>@LcRessources.GetText(freq.FrequencyType)</option>
                                }
                            </select>
                        </li>
                        <li>
                            <label for="@(idprefix)RepeatEvery">Repeat every:</label>
                            <input type="number" id="@(idprefix)RepeatEvery" name="repeat-every" value="@(Request["repeat-every"] ?? calRecurrence == null ? "" : calRecurrence.Interval)" /> days
                        </li>
                        <li>
                            <label>Ends:</label>
                            <ul>
                                <li><label><input type="radio" @LcHelpers.IsChecked("never", recEnds) value="never" name="repeat-ends" /> Never</label></li>
                                <li><label><input type="radio" @LcHelpers.IsChecked("ocurrences", recEnds) value="ocurrences" name="repeat-ends" /> After</label>
                                    <label><input type="number" name="repeat-ocurrences" value="@(Request["repeat-ocurrences"] ?? calRecurrence == null ? "" : calRecurrence.Count)" /> ocurrences</label>
                                </li>
                                <li><label><input type="radio" value="date" @LcHelpers.IsChecked("date", recEnds) name="repeat-ends" /> On</label>
                                    <input type="date" name="repeat-end-date" value="@(Request["repeat-end-date"] ?? calRecurrence == null ? "" : (calRecurrence.Until != null ? calRecurrence.Until.ToShortDateString() : ""))" />
                                </li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </li>
        <li>
            <label for="@(idprefix)Where">Where</label>
            <input id="@(idprefix)Where" value="@(Request["location"] ?? calEvent == null ? "" : calEvent.Location)" name="location" />
        </li>
        <li>
            <label for="@(idprefix)Description">Description</label>
            <input id="@(idprefix)Description" value="@(Request["description"] ?? calEvent == null ? "" : calEvent.Description)" name="description" />
        </li>
    </ul>

    <div class="actions">
        <button type="button" class="button cancel-action crudl-cancel">Cancel</button>
        <button class="button main-action crudl-save">Save</button>
    </div>

    <script type="text/javascript">
        jQuery(function ($) {
            var f = $('#@(idprefix)');
            var repeat = f.find('[name=repeat]').change(function(){
                f.find('.repeat-options').toggle(this.checked);
            });
            var allday = f.find('[name=allday]').change(function(){
                f.find('[name=starttime],[name=endtime]')
                .prop('disabled', this.checked);
            });

            // Init:
            repeat.change();
            allday.change();
        });
    </script>
</form>