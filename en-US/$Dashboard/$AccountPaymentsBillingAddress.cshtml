@using WebMatrix.Data;
@{
    LcHelpers.SecurePage();
    
    var idprefix = "account-payments-billingaddress";
    var user = LcData.UserInfo.GetUserRow();

    var sqlCondBillingAddress = " AND L.AddressTypeID = 13";
    
    Validation.RequireField("name", LcRessources.RequiredField("Name"));
    Validation.RequireField("addressline1", LcRessources.RequiredField("Address Line 1"));
    Validation.RequireField("city", LcRessources.RequiredField("City"));
    Validation.RequireField("state", LcRessources.RequiredField("State"));
    Validation.RequireField("postalcode", LcRessources.RequiredField("Zip Code"));
    Validation.Add("name", Validator.StringLength(100, 0, "Card nickname must be fewer than 50 characters."));
    Validation.Add("addressline1", Validator.StringLength(100, 0, "Address Line 1 must be fewer than 100 characters."));
    Validation.Add("addressline2", Validator.StringLength(100, 0, "Address Line 2 must be fewer than 100 characters."));
    if (Validation.GetHtml("city") == null) {
        Validation.Add("city", Validator.StringLength(100, 0, "City must be fewer than 100 characters."));
    }
    
    if (IsPost && Validation.IsValid()) {

        var beforePositionStatuses = LcData.UserInfo.GetUserPositionsStatuses((int)user.UserID);
        
        using (var db = Database.Open("sqlloco")) {
            // Validate Postal Code
            var state = Request["state"].AsInt();
            var postalCodeID = LcData.GetPostalCodeID(Request["postalcode"], state);
            if (postalCodeID == 0) {
                ModelState.AddFormError("Postal Code not valid");
            }

            if (ModelState.IsValid) {
                db.Execute(LcData.sqlSetAddress,
                    Request["AddressID"],
                    user.UserID,
                    Request["addressline1"],
                    Request["addressline2"],
                    Request["city"],
                    state,
                    postalCodeID,
                    user.PreferredCountryID,
                    Request["name"],
                    13, // Billing address, ever
                    null, //Request["special-instructions"],
                    null, //Request["latitude"].AsDecimal(),
                    null, //Request["longitude"].AsDecimal(),
                    null //Request["google-map-url"]
                );
            }
        }
        
        if (ModelState.IsValid) {
            // Show the profile activation popup with 'next-step' buttons and progress information when need,
            // if not the short message is showed:
            if (!LcHelpers.UseProfileActivationPopup(beforePositionStatuses,
                user.UserID,
                LcRessources.DataSaved,
                LcRessources.OK))
            {
                LcHelpers.ReturnJsonResult(5, LcRessources.ShortDataSaved);
            }
        }
    }
    
    dynamic location = null;
    using (var db = Database.Open("sqlloco")) {
        location = db.QuerySingle(LcData.sqlGetAddresses + sqlCondBillingAddress, user.UserID);
    }
}
<p></p>
<form method="post" id="@idprefix-form" action="@(LcUrl.LangPath)$Dashboard/$AccountPaymentsBillingAddress/" class="ajax ajax-box billing-address-form">
    <input type="hidden" name="AddressID" value="@(location != null ? location.AddressID : null)" />
    @LcHelpers.GetValidationScripts()
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
        <fieldset>
            <ul class="location-data">
                <li class="location-name">
                    <label>Card nickname: <input type="text" name="name" value="@(Request["name"] ?? (location != null ? location.AddressName : null))" @Validation.GetHtml("name") /></label>
                    @Html.ValidationMessage("name")
                </li>
                <li class="location-addressline location-addressline1">
                    <label>Address Line 1: <input type="text" name="addressline1" value="@(Request["addressline1"] ?? (location != null ? location.AddressLine1 : null))" @Validation.GetHtml("addressline1") /></label>
                    @Html.ValidationMessage("addressline1")
                </li>
                <li class="location-addressline location-addressline2">
                    <label>Address Line 2: <input type="text" name="addressline2" value="@(Request["addressline2"] ?? (location != null ? location.AddressLine2 : null))" @Validation.GetHtml("addressline2") /></label>
                    @Html.ValidationMessage("addressline2")
                </li>
                <li class="location-city">
                    <label>City: <input type="text" name="city" value="@(Request["city"] ?? (location != null ? location.City : null))" @Validation.GetHtml("city") /></label>
                </li>
                <li class="location-state">
                    <label>State:
                        <select name="state" @Validation.GetHtml("state")>
                            @LcHelpers.StateProvinceOptions(Request["state"] ?? (location != null ? location.StateProvinceID : null))
                        </select>
                        @Html.ValidationMessage("state")
                    </label>
                </li>
                <li class="location-zipcode">
                    <label>Zip Code: <input type="text" name="postalcode" value="@(Request["postalcode"] ?? (location != null ? location.PostalCode : null))" data-val-postalcode="Postal Code is not valid" @Validation.GetHtml("postalcode")/></label>
                    @Html.ValidationMessage("postalcode")
                </li>
            </ul>
        </fieldset>
    <fieldset class="actions">
        <button class="save main-action" type="submit">Save</button>
    </fieldset>
</form>