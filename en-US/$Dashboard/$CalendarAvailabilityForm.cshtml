@using WebMatrix.Data;
@{
    LcHelpers.ProviderPage();

    // Current user data
    var u = LcData.UserInfo.GetUserRow();
    var idprefix = "availability-form";
    
    var redirectURL = LcHelpers.GetRedirectURLFromReferrer("/alerts");
    
    // From 0 (sunday) to 6 (saturday), true: is available. ON DATABASE use base-1; base-zero only arrays on this page
    bool[] availDates = new bool[7];
    // From 0 (sunday) to 6 (saturday), sub-index 0: start time, sub-index 1: end time
    TimeSpan[,] dateHours = new TimeSpan[7,2];
    bool useCalendarProgram = false;
    var programType = "";
    var programURL = "";
    var advanceTime = 0M;
    var minTime = 0M;
    var maxTime = 0M;
    var betweenTime = 0M;

    var varSQLGetUserFreeTimeSettings = "EXEC GetUserFreeTimeSettings @0";
    var varSQLGetUserCalendarProviderAttributes = "EXEC GetUserCalendarProviderAttributes @0";
    
    Validation.Add("program-type", Validator.StringLength(200, 0, "Calendar type must be fewer than 200 characters."));
    Validation.Add("program-url", Validator.StringLength(500, 0, "Calendar public URL must be fewer than 500 characters."));
    
    if (!IsPost) {
        dynamic hoursData = null, atts = null;
        using (var db = Database.Open("sqlloco")) {
            hoursData = db.Query(varSQLGetUserFreeTimeSettings ,u.UserID);
            atts = db.QuerySingle(varSQLGetUserCalendarProviderAttributes, u.UserID);  
        }
        foreach (var dayHours in hoursData) {
            if (dayHours.DayofWeek != null && 
                dayHours.DayofWeek > 0 &&
                dayHours.DayofWeek < 8) {
                availDates[dayHours.DayofWeek - 1] = true;
                dateHours[dayHours.DayofWeek - 1, 0] = dayHours.StartTime;
                dateHours[dayHours.DayofWeek - 1, 1] = dayHours.EndTime;
            }
        }
        if (atts != null) {
            useCalendarProgram      = atts.UseCalendarProgram;
            programType             = atts.CalendarType;
            programURL              = atts.CalendarURL;
            advanceTime             = atts.AdvanceTime;
            minTime                 = atts.MinTime;
            maxTime                 = atts.MaxTime;
            betweenTime             = atts.BetweenTime;
        }
    } else {
        for (int d = 0; d < 7; d++) {
            availDates[d]   = Request["availday-" + d.ToString()].AsBool();
            dateHours[d, 0] = Request["day-" + d.ToString() + "-since-hour"].AsDateTime().TimeOfDay;
            dateHours[d, 1] = Request["day-" + d.ToString() + "-to-hour"].AsDateTime().TimeOfDay;
        }
        useCalendarProgram      = Request["use-program"].AsBool();
        programType             = Request["program-type"];
        programURL              = Request["program-url"];
        advanceTime             = Request["advance-time"].AsDecimal();
        minTime                 = Request["min-time"].AsDecimal();
        maxTime                 = Request["max-time"].AsDecimal();
        betweenTime             = Request["between-time"].AsDecimal();
        
        if (Request["advance-time"].IsEmpty()) {
            ModelState.AddError("advance-time", LcRessources.RequiredField("Time in advance of bookings"));
        }
        if (Request["min-time"].IsEmpty()) {
            ModelState.AddError("min-time", LcRessources.RequiredField("Minimum booking time"));
        }
        if (Request["max-time"].IsEmpty()) {
            ModelState.AddError("max-time", LcRessources.RequiredField("Maximum booking time"));
        }
        if (Request["between-time"].IsEmpty()) {
            ModelState.AddError("between-time", LcRessources.RequiredField("Minimum time between bookings"));
        }

        if (Validation.IsValid() && ModelState.IsValid) {
            
            var varSqlInsertAvailFreetime = "EXEC InsertProviderAvailabilityFreeTime @0,@1,@2,@3,@4";
            var varSqlInsertCalendarProviderAttributes = "EXEC dbo.InsertCalendarProviderAttributes @0,@1,@2,@3,@4, @5,@6,@7";

            using (var db = Database.Open("sqlloco")) {
                // Save data

                db.Execute(varSqlInsertCalendarProviderAttributes, u.UserID, 
                    advanceTime,
                    minTime,
                    maxTime,
                    betweenTime,
                    useCalendarProgram,
                    programType,
                    programURL);
             
                for (int d = 0; d < 7; d++) {
                    if (availDates[d]) {
                        db.Execute(varSqlInsertAvailFreetime, u.UserID,
                            d + 1, // DATABASE Base-1
                            dateHours[d, 0],
                            dateHours[d, 1],
                            false);
                    } else {
                        // Not available, execute with last parameter as 'true' to remove free events
                        db.Execute(varSqlInsertAvailFreetime, u.UserID,
                            d + 1, // DATABASE Base-1
                            TimeSpan.Zero,
                            TimeSpan.Zero,
                            // Remove events:
                            true);
                    }
                }
                
                db.Execute("EXEC TestAlertAvailability @0", u.UserID);

                // All was fine, AJAX-JSON response
                string success = "Availability data was succesful saved!";
                if (!String.IsNullOrEmpty(redirectURL)) {
                    LcHelpers.ReturnJsonResult(4, new { SuccessMessage = success, RedirectURL = redirectURL } );
                } else {
                    LcHelpers.ReturnJsonResult(5, LcRessources.ShortDataSaved);
                }
            }
        }
    }
}
@helper printOptionsHours(TimeSpan selectedHour){
    var firstHour = new TimeSpan(0, 0, 0);
    var lastHour = new TimeSpan(24, 0, 0);
    var interval = new TimeSpan(0, 30, 0);
    for (var hour = firstHour; hour <= lastHour; hour += interval)
    {
        <option @LcHelpers.IsSelected(selectedHour.ToString("c"), hour.ToString("c")) value="@hour.ToString("c")">@((new DateTime(hour.Ticks)).ToShortTimeString())</option>
    }
}
@helper printHourPerDayElements(dynamic dateHours){
    var days = new string[]{"Sundays", "Mondays", "Tuesdays", "Wednesdays", "Thursdays", "Fridays", "Saturdays"};

    for (var d = 0; d < 7; d++){
    <li>
        <span class="day">@days[d]</span>
        <select data-day-index="@d" name="day-@d-since-hour">@printOptionsHours(dateHours[d, 0])</select>
        and
        <select data-day-index="@d" name="day-@d-to-hour">@printOptionsHours(dateHours[d, 1])</select>
    </li>
    }
}
@helper printDaysElements(bool[] availDates){
    var days = new string[]{"Sundays",  "Mondays", "Tuesdays", "Wednesdays", "Thursdays", "Fridays", "Saturdays"};
    for (var d = 0; d < 7; d++){
        <li>
            <span class="day">@days[d]</span>
            <label>Yes<input @LcHelpers.IsChecked(availDates[d], true) name="availday-@d" value="True" type="radio"/></label>
            <label>No<input @LcHelpers.IsChecked(availDates[d], false) name="availday-@d" value="False" type="radio"/></label>
        </li>
    }
}
@helper printHoursBooking(string what, string selected){
    <select name="@(what)-time">
        <option value="1">1 Hour</option>
        @for(var h = 2; h < 10; h++) {
            <option @LcHelpers.IsSelected(selected, h.ToString()) value="@h">@h Hours</option>
        }
    </select>
}
@helper printHoursBooking(string what, string selected, TimeSpan[] range){
    var aHour = new TimeSpan(1, 0, 0);
    var aDay = new TimeSpan(1, 0, 0, 0, 0);
    var aWeek = new TimeSpan(7, 0, 0, 0, 0);
    <select name="@(what)-time">
        @foreach (var h in range) {
            var sh = "";
            if (h < aHour) {
                sh = h.TotalMinutes.ToString() + " minutes";
            } else if (h < aDay) {
                sh = h.TotalHours.ToString() + " hours";
            } else if (h < aWeek) {
                sh = h.TotalDays.ToString() + " days";
            } else {
                sh = (h.TotalDays / 7).ToString() + " weeks";
            }
            <option @LcHelpers.IsSelected(selected, h.TotalHours.ToString()) value="@h">@sh</option>
        }
    </select>
}
@helper printOption(string selected, string val, string label) {
    <option @LcHelpers.IsSelected(selected, val) value="@val">@label</option>
}
@helper printHoursTimeInAdvance(string selected){
    // Time in advance of bookings: 1 hour, 1.5 hours, 2 hours, 2.5 hours, 3 hours, 4 hours, 5 hours, 6 hours, 7 hours, 8 hours, 12 hours, 18 hours, 1 day, 2 days, 3 days, 4 days, 5 days, 6 days, 1 week, 2 weeks
    @*@printHoursBooking("advance", selected, new TimeSpan[]{
        TimeSpan.FromHours(1),
        TimeSpan.FromHours(1.5),
        TimeSpan.FromHours(2),
        TimeSpan.FromHours(2.5),
        TimeSpan.FromHours(3),
        TimeSpan.FromHours(4),
        TimeSpan.FromHours(5),
        TimeSpan.FromHours(6),
        TimeSpan.FromHours(7),
        TimeSpan.FromHours(8),
        TimeSpan.FromHours(12),
        TimeSpan.FromHours(18),
        TimeSpan.FromDays(1),
        TimeSpan.FromDays(2),
        TimeSpan.FromDays(3),
        TimeSpan.FromDays(4),
        TimeSpan.FromDays(5),
        TimeSpan.FromDays(6),
        TimeSpan.FromDays(7),
        TimeSpan.FromDays(14)
    });*@
    <select name="advance-time">
        <option value=""></option>
        @printOption(selected, "1",     "1 hour")
        @printOption(selected, "1.5",   "1.5 hours")
        @printOption(selected, "2",     "2 hours")
        @printOption(selected, "2.5",   "2.5 hours")
        @printOption(selected, "3",     "3 hours")
        @printOption(selected, "4",     "4 hours")
        @printOption(selected, "5",     "5 hours")
        @printOption(selected, "6",     "6 hours")
        @printOption(selected, "7",     "7 hours")
        @printOption(selected, "8",     "8 hours")
        @printOption(selected, "12",    "12 hours")
        @printOption(selected, "18",    "18 hours")
        @printOption(selected, "24",    "1 day")
        @printOption(selected, "48",    "2 days")
        @printOption(selected, "72",    "3 days")
        @printOption(selected, "96",    "4 days")
        @printOption(selected, "120",   "5 days")
        @printOption(selected, "144",   "6 days")
        @printOption(selected, "168",   "1 week")
        @printOption(selected, "336",   "2 weeks")
    </select>
}
@helper printHoursMinBookingTime(string selected){
    // Minimum booking time: 15 minutes, 30 minutes, 45 minutes, 1 hour, 2 hours, 3 hours, 4 hours, 5 hours, 6 hours, 7 hours, 8 hours, 12 hours, 18 hours, 1 day
    <select name="min-time">
        <option value=""></option>
        @printOption(selected, "0.25",  "15 minutes")
        @printOption(selected, "0.5",   "30 minutes")
        @printOption(selected, "0.75",  "45 minutes")
        @printOption(selected, "1",     "1 hour")
        @printOption(selected, "2",     "2 hours")
        @printOption(selected, "3",     "3 hours")
        @printOption(selected, "4",     "4 hours")
        @printOption(selected, "5",     "5 hours")
        @printOption(selected, "6",     "6 hours")
        @printOption(selected, "7",     "7 hours")
        @printOption(selected, "8",     "8 hours")
        @printOption(selected, "12",    "12 hours")
        @printOption(selected, "18",    "18 hours")
        @printOption(selected, "24",    "1 day")
    </select>
}
@helper printHoursMaxBookingTime(string selected){
    // Maximum booking time: 1 hour, 2 hours, 3 hours, 4 hours, 5 hours, 6 hours, 7 hours, 8 hours, 12 hours, 18 hours, 1 day
    <select name="max-time">
        <option value=""></option>
        @printOption(selected, "1",     "1 hour")
        @printOption(selected, "2",     "2 hours")
        @printOption(selected, "3",     "3 hours")
        @printOption(selected, "4",     "4 hours")
        @printOption(selected, "5",     "5 hours")
        @printOption(selected, "6",     "6 hours")
        @printOption(selected, "7",     "7 hours")
        @printOption(selected, "8",     "8 hours")
        @printOption(selected, "12",    "12 hours")
        @printOption(selected, "18",    "18 hours")
        @printOption(selected, "24",    "1 day")
    </select>
}
@helper printHoursBetweenBookingTime(string selected){
    // Minimum time between bookings: 5 minutes, 10 minutes, 15 minutes, 30 minutes, 45 minutes, 1 hour, 2 hours, 3 hours, 4 hours, 5 hours, 6 hours
    <select name="between-time">
        <option value=""></option>
        @printOption(selected, "0.08",  "5 minutes")
        @printOption(selected, "0.16",  "10 minutes")
        @printOption(selected, "0.25",  "15 minutes")
        @printOption(selected, "0.5",   "30 minutes")
        @printOption(selected, "0.75",  "45 minutes")
        @printOption(selected, "1",     "1 hour")
        @printOption(selected, "2",     "2 hours")
        @printOption(selected, "3",     "3 hours")
        @printOption(selected, "4",     "4 hours")
        @printOption(selected, "5",     "5 hours")
        @printOption(selected, "6",     "6 hours")
    </select>
}

<p class="setting-instructions">
What hours do you keep? We’d like to know when we can generally expect to schedule your appointments.   
</p>
<div>
<form action="@(LcUrl.LangPath)$Dashboard/$CalendarAvailabilityForm/" method="post" class="positionavailability ajax ajax-box" id="@idprefix">
    <input type="hidden" name="RedirectURL" value="@(redirectURL)" />
    @LcHelpers.GetValidationScripts()
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="positionavailability-days">
        <legend>I'm available these days:</legend>
        <label class="all-days-times"><input type="checkbox" />All days/times</label>
        <ul>
            @printDaysElements(availDates)
        </ul>
    </fieldset>
    <fieldset class="positionavailability-hours">
        <legend>Generally between these hours:</legend>
        <ul>
            @printHourPerDayElements(dateHours)
        </ul>
    </fieldset>
    <fieldset class="positionavailability-program has-confirm">
        <legend>I already use a calendar program:</legend>

        <div class="confirm positionavailability-use-program">
            <label>Yes<input @LcHelpers.IsChecked(useCalendarProgram, true) type="radio" name="use-program" value="True"/></label>
            <label>No<input @LcHelpers.IsChecked(useCalendarProgram, false) type="radio" name="use-program" value="False"/></label>
        </div>
        <ul>
            <li class="positionavailability-program-type">
                <label for="@idprefix-program-type">Which type?</label>
                <select name="program-type" id="@idprefix-program-type">
                    <option @LcHelpers.IsSelected(programType, "gmail") value="gmail">Gmail</option>
                </select>
            </li>
            <li class="positionavailability-program-url">
                <label for="@idprefix-program-url">Public URL:</label>
                <input type="text" name="program-url" value="@programURL" id="@idprefix-program-url"/>
            </li>
        </ul>
    </fieldset>
    <fieldset class="positionavailability-booking">
        <legend>I require:</legend>
        <label>Time in advance of bookings:@printHoursTimeInAdvance(advanceTime.ToString("###0.##"))</label>
        <label>Minimum booking time:@printHoursMinBookingTime(minTime.ToString("###0.##"))</label>
        <label>Maximum booking time:@printHoursMaxBookingTime(maxTime.ToString("###0.##"))</label>
        <label>Minimum time between bookings:@printHoursBetweenBookingTime(betweenTime.ToString("###0.##"))</label>
    </fieldset>
    <fieldset class="actions">
        <button class="save main-action" type="submit">Save</button>
    </fieldset>
</form>
<script type="text/javascript">
    $(function () {
        $('.positionavailability-hours select').change(function () {
            var day = parseInt($(this).data('day-index'));
            if (!isNaN(day)) {
                $(this).closest('form')
                .find('.positionavailability-days input[value=True][name=availday-' + day + ']')
                .prop('checked', true);
            }
        });
        $('.positionavailability .all-days-times input').change(function () {
            if (this.checked) {
                var $f = $(this).closest('.positionavailability');
                // Set days as 'yes'
                $f.find('.positionavailability-days input[value=True]').prop('checked', true);
                // Set hours as 'all day - 12AM-12AM' (selecting the same option on both selects is fine)
                $f.closest('.positionavailability')
                .find('.positionavailability-hours select option:first-child')
                .prop('selected', true);
            }
        });
        $('.positionavailability-hours :input, .positionavailability-days ul :input').change(function () {
            $(this).closest('form').find('.all-days-times input').prop('checked', false);
        });
    });
</script>
</div>