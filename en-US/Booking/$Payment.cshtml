@using Braintree;
@using System.Configuration;
@using WebMatrix.Data;
@{
    // true to testing, false to production/use braintree
    var TESTING_EMULATEBRAINTREE = false;
    if (!LcHelpers.InProduction) {
        TESTING_EMULATEBRAINTREE = Request.Params["TESTING_EMULATEBRAINTREE"].AsBool();
    }
    
    var p = PageData["providerrow"] ?? LcData.UserInfo.GetUserRow(Request["providerid"].AsInt());
    var c = PageData["customerrow"] ?? LcData.UserInfo.GetUserRow();
    var pos = PageData["positionrow"] ?? LcData.UserInfo.GetUserPos(Request["providerid"].AsInt(),
        Request["positionid"].AsInt());
    DateTime? dt1Start, dt1End, dt2Start, dt2End, dt3Start, dt3End;
    dt1Start = dt1End = dt2Start = dt2End = dt3Start = dt3End = null;

    bool priceIsEstimated = Session["PriceIsEstimated"] is bool ? (bool)Session["PriceIsEstimated"] : true;
    
    // Check if is a valid booking process (session not expired or error at first step)
    var bookingRequestID = Session["BookingRequestID"] is int ? (int)Session["BookingRequestID"] : 0;
    bool validBookingSession = false;
    if (p != null && c != null && pos != null && bookingRequestID > 0) {
        try{
            var brdates = ((Dictionary<int, Dictionary<string, DateTime?>>)Session["BookingRequests"])[bookingRequestID];
            dt1Start = brdates["dt1Start"];
            dt1End = brdates["dt1End"];
            dt2Start = brdates["dt2Start"];
            dt2End = brdates["dt2End"];
            dt3Start = brdates["dt3Start"];
            dt3End = brdates["dt3End"];
            
            validBookingSession = true;
        } catch {}
    }
    if (!validBookingSession) {
        /* Several options to do here
            * - Show error (strange message for user, need restart again introducing first his login)
            * X Silently redirect to start booking again
            * - Request login via ajax, re-send form data, looking in the database for a 'timeouted'
            *   bookingrequest for this customer at this provider and position, recover it to continue
            *   processing the form (if there is no bookingrequestid again, do second option).
            */
        //ModelState.AddFormError("Booking request is not valid, maybe the session time expired");
        LcHelpers.ReturnJsonResult(1, 
            UrlUtil.LangPath + "Booking/?ProviderID=" + p.UserID.ToString() +
            "&PositionID=" + pos.PositionID.ToString());
    }

    /*
     * Validation
     */
    Validation.RequireField("name-on-card", "'Name as on card' is required");
    Validation.RequireField("street-address-line-1", "Street address is required");
    Validation.RequireField("city", "City is required");
    Validation.RequireField("state", "State is required");
    Validation.RequireField("zip", "Zip Postal Code is required");
    Validation.RequireField("card-number", "Card number is required");
    Validation.RequireField("cvv", "CVV code is required");
    Validation.RequireField("card-exp-month", "Card expiration month is required");
    Validation.RequireField("card-exp-year", "Card expiration year is required");
    Validation.Add("zip", Validator.Integer("Zip postal code must be a valid number"));
    
    if (priceIsEstimated) {
        Validation.RequireField("agree-estimate", "You must agree the pricing estimate");
    }
    Validation.RequireField("agree-cancellation-policy", "You must agree the cancellation policy");
    
    if (IsPost && Validation.IsValid()){
        /*
         * Complext validations
         */
        if (Request["save-payment"] == "true" && Request["save-payment-as"].IsEmpty()){
            ModelState.AddError("save-payment-as", "To save the payment is required a name");
        }
        using (var db = Database.Open("sqlloco")) {

            // Validate that Zip Postal Code is valid, and get the matching ID to be used later
            var postalCodeID = LcData.GetPostalCodeID(Request["zip"], Request["state"].AsInt());
            if (postalCodeID == 0) {
                ModelState.AddError("zip", "Zip Postal Code is not valid");
            }
        
            if (ModelState.IsValid){
                try {
                    /*
                     * Get data from our database about BookingRequest in order to
                     * do further operations -braintree, timezones-
                     */
                    // Get data from the BookingRequest
                    var sqlGetBookingPrice = @"
                        SELECT  TOP 1
                                P.TotalPrice
                        FROM    BookingRequest As B
                                 INNER JOIN
                                PricingEstimate As P
                                  ON P.PricingEstimateID = B.PricingEstimateID
                        WHERE   B.CustomerUserID = @0 AND B.ProviderUserID = @1
                                 AND B.PositionID = @2 AND B.BookingRequestID = @3
                    ";
                    var TotalPrice = db.QueryValue(sqlGetBookingPrice, c.UserID, p.UserID, pos.PositionID, bookingRequestID);
                    

                    /*
                     * User wants to save as 'my location'?
                     */
                    string paymentNickName = null;
                    if (Request["save-payment"] == "true" &&
                        !String.IsNullOrWhiteSpace(Request["save-payment-as"])) {
                        paymentNickName = Request["save-payment-as"];
                    }
                    if (paymentNickName != null) {
                        // Check if there is already a 'billing' address (only can exists one) and get its AddressID
                        // to update it with the new data - or inserts one new if AddressID=0
                        int billingAddressID = db.QueryValue(@"
                            SELECT  AddressID
                            FROM    Address
                            WHERE   AddressTypeID = 13 -- 'billing' type
                                     AND
                                    UserID = @0
                        ", c.UserID) ?? 0;
                        
                        // Save location as service location
                        db.Execute(LcData.sqlSetAddress,
                            billingAddressID,
                            c.UserID,
                            Request["street-address-line-1"],
                            Request["street-address-line-2"],
                            Request["city"],
                            Request["state"],
                            postalCodeID,
                            LcData.GetCurrentCountryID(),
                            paymentNickName,
                            13 /*AddressType: Billing*/,
                            null, // special instructions
                            null, null, null /* coordinates and googlemaps */);
                    }
                    
                    /*
                     * Saving booking data from form and previous lookups.
                     * State will still be '1:created' and not '2:complete' because
                     * payment transaction need be done still, but to ensure avoid
                     * problems with most saving errors, save some data now and let
                     * to after payment only transaction data and state changes, minifying
                     * possible errors after payment that can break the booking request:
                     */
                    if (ModelState.IsValid) {
                        
                        /*
                         * Check if there are not events on the booking request, because this is
                         * the first attempt and not a save-after-error 
                         */
                        if (0 == (int)db.QueryValue(@"
                                SELECT  count(*)
                                FROM    BookingRequest
                                WHERE   BookingRequestID = @0
                                        AND PreferredDateID is not null
                            ", bookingRequestID)) {
                        
                            /*
                             * Creating events with the passed data by the user for this Booking setting the Time Zone we found 
                             * looking in our Postal Codes table.
                             */
                            var sqlGetTimeZone = @"
                                SELECT  TimeZone
                                FROM    PostalCode
                                WHERE   PostalCodeID = @0
                            ";
                            var sqlInsCalendarEvent = @"
                                INSERT INTO [CalendarEvents]
                                           ([UserId]
                                           ,[CalendarAvailabilityTypeID]
                                           ,[StartTime]
                                           ,[EndTime]
                                           ,[TimeZone])
                                     VALUES (@0, @1, @2, @3, @4)
                                SELECT Cast(@@Identity As int) As CalendarEventID
                            ";
                            var timeZone = db.QueryValue(sqlGetTimeZone, postalCodeID);
                            // Save date-times as 'tentative' provider Events
                            int? dt1ID, dt2ID, dt3ID;
                            dt1ID = dt2ID = dt3ID = null;
                            if (dt1Start.HasValue && dt1End.HasValue) {
                                dt1ID = db.QueryValue(sqlInsCalendarEvent, p.UserID,
                                    3, // Availability is 'Tentative'
                                    dt1Start, dt1End, timeZone);
                            }
                            if (dt2Start.HasValue && dt2End.HasValue) {
                                dt2ID = db.QueryValue(sqlInsCalendarEvent, p.UserID,
                                    3, // Availability is 'Tentative'
                                    dt2Start, dt2End, timeZone);
                            }
                            if (dt3Start.HasValue && dt3End.HasValue) {
                                dt3ID = db.QueryValue(sqlInsCalendarEvent, p.UserID,
                                    3, // Availability is 'Tentative'
                                    dt3Start, dt3End, timeZone);
                            }

                            /*
                             * Save event IDs and preferences
                             * State is still 1:created
                             */
                            db.Execute(@"
                                UPDATE  BookingRequest
                                SET     
                                        PreferredDateID = @1
                                        ,AlternativeDate1ID = @2
                                        ,AlternativeDate2ID = @3
                                        ,SendReminder = @4
                                        ,SendPromotional = @5
                                WHERE   BookingRequestID = @0
                            ", bookingRequestID, 
                             dt1ID, dt2ID, dt3ID,
                             Request["send-reminder"].AsBool(),
                             Request["send-promotional"].AsBool());
                        }
                        
                        /*
                         * Save last card number digits encrypted
                         * State is still 1:created
                         */
                        db.Execute(@"
                            UPDATE  BookingRequest
                            SET     
                                    PaymentLastFourCardNumberDigits = @1
                            WHERE   BookingRequestID = @0
                        ", bookingRequestID, 
                            LcEncryptor.Encrypt(LcHelpers.GetLastStringChars(Request["card-number"], 4)));
                    }


                    /*
                     * Payment transaction
                     */                    
                    var transactionID = "";
                    if (TESTING_EMULATEBRAINTREE) {
                        // TESTING, emulate Braintree generating false transactionID,
                        // avoiding comunicate with them.
                        transactionID = "TEST:" + Guid.NewGuid().ToString();
                    } else {
                        // REAL Braintree Code
                        BraintreeGateway gateway = LcPayment.NewBraintreeGateway();
                        
                        //string credidtCardToken = c.UserID.ToString() + ":creditcard:" + LcHelpers.ConvertToBraintreeToken(paymentNickName);
                        
                        /*
                         * Send customer payment data to Braintree, 
                         * using our UserID as identifier.
                         */
                        
                        // Find or create Customer on Braintree
                        Customer gc = gateway.Customer.Find(c.UserID.ToString());
                        if (gc == null) {
                            var gcr = new CustomerRequest{
                                Id = c.UserID.ToString()
                            };
                            var r = gateway.Customer.Create(gcr);
                            if (!r.IsSuccess()) {
                                ModelState.AddFormError(r.Message);
                                foreach (var error in r.Errors.All()) {
                                    ModelState.AddFormError(error.Message);
                                }
                            }
                        }
                        
                        if (ModelState.IsValid) {
                            TransactionRequest request = new TransactionRequest
                            {
                                Amount = TotalPrice,
                                CustomerId = c.UserID.ToString(),
                                CreditCard = new TransactionCreditCardRequest
                                {
                                    //Token = credidtCardToken,
                                    CardholderName = Request["name-on-card"],
                                    Number = Request["card-number"],
                                    ExpirationDate = Request["card-exp-month"] + "/" + Request["card-exp-year"],
                                    CVV = Request["cvv"]
                                },
                                BillingAddress = new AddressRequest
                                {
                                    StreetAddress = Request["street-address-line-1"],
                                    ExtendedAddress = Request["street-address-line-2"],
                                    Locality = Request["city"],
                                    Region = Request["state"],
                                    PostalCode = Request["zip"],
                                    CountryCodeAlpha2 = "US"
                                },
                                Options = new TransactionOptionsRequest
                                {
                                    StoreInVaultOnSuccess = true,
                                    AddBillingAddressToPaymentMethod = true
                                }
                            };
                    
                            Result<Transaction> result = null;
                            try{
                                result = gateway.Transaction.Sale(request);
                            } catch{}
                    
                            // Checking results:
                            if (result == null) {
                                ModelState.AddFormError("Unexpected error during credit card verification");
                            } else if (result.IsSuccess()
                                && result.Target != null
                                && !String.IsNullOrEmpty(result.Target.Id)) {
                                transactionID = result.Target.Id;
                            } else {
                                if (result.IsSuccess()) {
                                    ModelState.AddFormError("Impossible to know transaction details, please contact support");
                                } else {
                                    ModelState.AddFormError(result.Message);
                                    foreach (var error in result.Errors.All()) {
                                        ModelState.AddFormError(error.Message);
                                    }
                                }
                            }
                        }
                    }
                    
                    
                    /*
                     * Save Braintree Transaction ID in the Booking Request and card digits
                     * and updating State to 'Booking Request Completed' (2:completed)
                     */
                    db.Execute(@"
                        UPDATE  BookingRequest
                        SET     PaymentTransactionID = @1
                                ,BookingRequestStatusID = 2 -- Completed
                        WHERE   BookingRequestID = @0
                    ", bookingRequestID, transactionID);
                    
                    
                } catch (Exception ex) {
                    if (Context.IsDebuggingEnabled) {
                        throw ex;
                    }
                    LcHelpers.ReturnJsonError(-1, ex.Message);
                }
            }
            if (ModelState.IsValid) {
                /*
                * Create, save and send Message
                */
                LcMessaging.SendBookingRequest(c.UserID, p.UserID, pos.PositionID, bookingRequestID);
                
                // Return OK result
                LcHelpers.ReturnJsonResult(0, null);
            }
        }
    }
    
    /*
     * Get Data
     */
    dynamic summary = LcData.Booking.GetBookingRequestForUser(bookingRequestID, c.UserID, c.IsAdmin);
    var pricingSummary = LcData.Booking.GetPricingSummary(summary);
    var pricingSummaryGroups = LcData.Booking.GetPricingSummaryGroups(summary.PricingEstimateID, summary);
    dynamic billingAddress = null;
    dynamic cancellationPolicy = null;
    using (var db = Database.Open("sqlloco")) {
        billingAddress = db.QuerySingle(LcData.sqlGetAddresses + " AND L.AddressTypeID = 13 -- Billing address", c.UserID);
        cancellationPolicy = LcData.Booking.GetProviderCancellationPolicy(
            p.UserID,
            pos.PositionID,
            db);
    }
}

@helper printDate(DateTime? date, DateTime? end) {
    if (date.HasValue) {
        <span class="date">
        @(date.Value.ToString("dddd, MMM d"))
        </span>
        <span class="hours">
        @(date.Value.ToShortTimeString()) - 
        @(end.Value.ToShortTimeString())
        </span>
    }
}

<h2>Payment</h2>
<p class="info">
    <srong>Visa, Mastercard, or American Express will do nicely, thank you</srong>
</p>
<form action="@(UrlUtil.LangPath)Booking/$Payment/@Request.Url.Query" method="post" class="payment" id="booking-payment">
    <input type="hidden" name="providerid" value="@p.UserID"/>
    <input type="hidden" name="positionid" value="@pos.PositionID"/>
    @LcHelpers.GetValidationScripts()
    @*LcHelpers.SetupStarRatingPlugin()*@
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="billing-info step-block">
        <ul>
            <li class="name-on-card">
                <label>Name as on card:<input type="text" name="name-on-card" value="@Request["name-on-card"]" @Validation.GetHtml("name-on-card")/></label>
            </li>
            <li class="street-address-line-1">
                <label>Street address line 1:<input type="text" name="street-address-line-1" value="@(Request["street-address-line-1"] ?? (billingAddress == null ? null : billingAddress.AddressLine1) )" @Validation.GetHtml("street-address-line-1")/></label>
            </li>
            <li class="street-address-line-2">
                <label>Street address line 2:<input type="text" name="street-address-line-2" value="@(Request["street-address-line-2"] ?? (billingAddress == null ? null : billingAddress.AddressLine2) ) " @Validation.GetHtml("street-address-line-2")/></label>
            </li>
            <li class="city">
                <label>City:<input type="text" name="city" value="@(Request["city"] ?? (billingAddress == null ? null : billingAddress.City) )" @Validation.GetHtml("city")/></label>
            </li>
            <!-- Collapsed next elements code to avoid white spaces that create excesive width on IE -->
            <li class="state"><label>State:<select name="state" @Validation.GetHtml("state")>
                        @LcHelpers.StateProvinceOptions(Request["state"] ?? (billingAddress == null ? null : billingAddress.StateProvinceID) )
                    </select></label></li>
            <li class="zip">
                <label>Zip Code:<input type="text" name="zip" data-val-postalcode="Postal Code is not valid" value="@(Request["zip"] ?? (billingAddress == null ? null : billingAddress.PostalCode) )" @Validation.GetHtml("zip")/></label>
            </li>
            <li class="card-number">
                <label>Card number:<input type="text" name="card-number" value="@Request["card-number"]" @Validation.GetHtml("card-number")/></label>
            </li>
            <!-- Collapsed next elements code to avoid white spaces that create excesive width on IE -->
            <li class="card-exp"><label>Expiration Date<select name="card-exp-month" @Validation.GetHtml("card-exp-month")>
                        @LcHelpers.MonthOptions(Request["card-exp-month"])
                    </select></label><select name="card-exp-year">
                        @LcHelpers.CardYearOptions(Request["card-exp-year"])
                    </select></li>
            <li class="card-cvv">
                <label>Security Code:<input type="text" name="cvv" value="@Request["cvv"]" @Validation.GetHtml("cvv")/></label>
            </li>
            <li class="save-to-my-payments">
                <label class="save"><input type="checkbox" @LcHelpers.IsChecked("true", Request["save-payment"] ?? (billingAddress != null ? "true" : "false")) name="save-payment" value="true" />Save</label>
                <label class="save-as">payment details as:<input type="text" value="@(Request["save-payment-as"] ?? (billingAddress == null ? null : billingAddress.AddressName))" name="save-payment-as" @Validation.GetHtml("save-payment-as")/></label>
            </li>
        </ul>
    </fieldset>


    <fieldset class="order-summary">
        <h3>Order Summary</h3>
        <div class="provider">
            <h4>Your provider is</h4>
            <strong>@LcHelpers.GetUserDisplayName(p) (@pos.PositionSingular)</strong>
        </div>
        <div class="schedule">
            <h4>Time Preferences are</h4>
            <ol>
                @if (dt1Start.HasValue)
                {
                <li class="preferred-option">
                    @printDate(dt1Start, dt1End)
                </li>
                }
                @if (dt2Start.HasValue)
                {
                <li class="alternative-option-1">
                    @printDate(dt2Start, dt2End)
                </li>
                }
                @if (dt3Start.HasValue)
                {
                <li class="alternative-option-2">
                    @printDate(dt3Start, dt3End)
                </li>
                }
            </ol>
        </div>
        <h4>Services Requested</h4>
        @LcPricingView.CustomerPricingSummary(null, pricingSummary, pricingSummaryGroups, 0)
        <div class="payment-info">Your card will be authorized immediately and charged when your provider accepts the booking, typically within 18 hr.</div>
    </fieldset>
    <fieldset class="agreement">
        <ul>
            @if (priceIsEstimated)
            {
            <li><input id="agree-estimate" type="checkbox" name="agree-estimate" @LcHelpers.IsChecked("true", Request["agree-estimate"]) value="true" /><label for="agree-estimate"> I understand this pricing is only an estimate and will be confirmed within 18 hrs</label></li>
            }
            <li><input id="agree-cancellation-policy" type="checkbox" name="agree-cancellation-policy" @LcHelpers.IsChecked("true", Request["agree-cancellation-policy"]) value="true" /><label for="agree-cancellation-policy"> I have read and agree to @(p.FirstName)’s <a href="#cancellation-policy" class="popup-action">cancellation policy</a></label></li>
            <li><input id="send-reminder" type="checkbox" name="send-reminder" @LcHelpers.IsChecked("true", Request["send-reminder"]) value="true" /><label for="send-reminder"> Send an SMS appointment reminder</label></li>
            <li><input id="send-promotionals" type="checkbox" name="send-promotionals" @LcHelpers.IsChecked("true", Request["send-promotionals"]) value="true" /><label for="send-promotionals"> Send me promotional emails</label></li>
        </ul>
        <div class="popups">
            <div id="cancellation-policy" class="popup">
                @RenderPage("$CancellationPolicyInfoWidget.cshtml", new { 
                    CancellationPolicyID = (cancellationPolicy == null ? LcData.Booking.DefaultCancellationPolicyID : cancellationPolicy.CancellationPolicyID),
                    DisplayForUserType = "customer" })
            </div>
        </div>
    </fieldset>
    <fieldset class="actions">
        <button data-wizard-next-step="@Href(UrlUtil.LangPath + "Booking/Confirmation/")" class="complete-booking next finish main-action">book it!</button>
    </fieldset>
</form>
