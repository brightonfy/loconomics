@using WebMatrix.Data;
@{
    LcMessaging.SecureTemplate();
    
    Layout = LcUrl.RenderLangPath + "_EmailLayout.cshtml";
    Page.Title = "Loconomics.com - Booking";
    
    var thisUserID = Request["UserID"].AsInt();
    var thisUser = LcData.UserInfo.GetUserRow(thisUserID);
    var brID = Request["BookingRequestID"].AsInt();
    var bID = Request["BookingID"].AsInt();
    
    // Data for the EmailLayout:
    // This will be changed on body by more specific texts:
    PageData["messageTitle"] = "Booking";
    PageData["messageSubtitle"] = "";
    // Create URL:
    PageData["viewOnSiteUrl"] = LcUrl.LangUrl + "Dashboard/Bookings/#!BookingRequest-" + brID.ToString() + "_Booking-" + bID.ToString();

    // TODO: Calculate location distance from provider to customer
    
    var booking = LcData.Booking.GetBookingForUser(bID, thisUserID, true);
}
@helper printAddress(IDictionary<string, object> addressDetails){
        <div>
            @if (!String.IsNullOrEmpty((string)addressDetails["name"])) {
            <div>@addressDetails["name"]</div>
            }
            <span>@addressDetails["location"]</span>
            <span>@addressDetails["city"]</span>
            <span>@addressDetails["state"]</span>
            <span>@addressDetails["zipcode"]</span>
        </div>
}
@functions{
    string getTitleStatus(dynamic booking, dynamic itsUserData, string itsUserType){
        var statusTitle = "Booking involving {0}. Unknown status";
        switch (itsUserType) {
			case "customer":
				statusTitle = "Booking from {0}. Unknown status";
				switch ((int)booking.BookingStatusID) {
					case 1: // confirmed
						statusTitle = "Confirmed booking from {0}";
						break;
					case 2: // service performed no pricing adjustment
						statusTitle = "Service performed by {0}";
						break;
					case 3: // service performed pricing adjustment
						statusTitle = "Service performed by {0} with pricing adjustment";
						break;
					case 4: // service performed and paid full
						statusTitle = "Service completed by {0}";
						break;
					case 5: // service dispute
						statusTitle = "Service dispute with {0}";
						break;
					case 6: // cancelled by customer
						statusTitle = "Booking cancelled by {0}";
						break;
				}
				break;
			case "provider":
				statusTitle = "Booking to {0}. Unknown status";
				switch ((int)booking.BookingStatusID) {
					case 1: // confirmed
						statusTitle = "Confirmed booking for {0}";
						break;
					case 2: // service performed no pricing adjustment
						statusTitle = "Service performed by {0}";
						break;
					case 3: // service performed pricing adjustment
						statusTitle = "Service performed by {0} with pricing adjustment";
						break;
					case 4: // service performed and paid full
						statusTitle = "Service completed by {0}";
						break;
					case 5: // service dispute
						statusTitle = "Service dispute with {0}";
						break;
					case 6: // cancelled by customer
						statusTitle = "Booking with {0} cancelled by me";
						break;
				}
                break;
        }
        return String.Format(statusTitle, LcHelpers.GetUserDisplayName(itsUserData));
    }
    string getLocationName(dynamic data){
        if (String.IsNullOrWhiteSpace(data.LocationName)) {
            return "";
        } else {
            return data.LocationUserFirstName + "'s " + data.LocationName;
        }
    }
    string getLocationForGoogleMaps(dynamic data){
        return LcHelpers.JoinNotEmptyStrings(", ", data.AddressLine1, data.City, data.StateProvinceCode, "United States");
    }
}

@if (booking == null)
{
    <div>
        You have no bookings. Book one today!
    </div>
}
else
{
    // Checking item: user type of the other user, not current user
    int itsUserID = booking.ProviderUserID;
    string itsUserType = "provider";
    string itsUserLabel = "Provider";
    string myUserType = "customer";
    //string myUserPrefix = "Customer";
    if (thisUserID == booking.ProviderUserID) {
        itsUserType = "customer";
        itsUserLabel = "Customer";
        myUserType = "provider";
        itsUserID = booking.CustomerUserID;
    } // we don't check 'else' nelse 'else if (item.CustoerUserID..) because are just the default values
    var itsUserData = LcData.UserInfo.GetUserRowWithContactData(itsUserID);

<div>
    @{
        PageData["messageTitle"] = getTitleStatus(booking, itsUserData, itsUserType);
        PageData["messageSubtitle"] = "last updated: " + booking.UpdatedDate.ToLongDateString() + " at " + booking.UpdatedDate.ToLongTimeString();
    }
    @*<h3 @LcEmailTemplateHelper.StyleH3()>@getTitleStatus(booking, itsUserData, itsUserType)</h3>
    <span>last updated: @booking.UpdatedDate.ToLongDateString() at @booking.UpdatedDate.ToLongTimeString()</span>*@

    @* When booking is not cancelled and service date is passed, show Review options:
     *@
    @if (booking.BookingStatusID < 6 && DateTime.Now > booking.ConfirmedDateEnd)
    {
    <div style="float: right;">
        @if (myUserType == "customer") {
            <a class="respond" style="@LcEmailTemplateHelper.StyleRespondButton()" href="@PageData["viewOnSiteUrl"]" target="_blank">
                @(booking.ReviewedByCustomer == true ? "View my review" : "Review provider")
            </a>
            if (booking.ReviewedByProvider == true) {
            <a class="respond" style="@LcEmailTemplateHelper.StyleRespondButton()" href="@PageData["viewOnSiteUrl"]" target="_blank">
                View provider review
            </a>
            }
        } else if (myUserType == "provider") {
            <a class="respond" style="@LcEmailTemplateHelper.StyleRespondButton()" href="@PageData["viewOnSiteUrl"]" target="_blank">
                @(booking.ReviewedByProvider == true ? "View my review" : "Review customer")
            </a>
            if (booking.ReviewedByCustomer == true) {
            <a class="respond" style="@LcEmailTemplateHelper.StyleRespondButton()" href="@PageData["viewOnSiteUrl"]" target="_blank">
                View customer review
            </a>
            }
        }
    </div>
    }

    <h4 @LcEmailTemplateHelper.StyleH4("color: #8B2143;")>@itsUserLabel information</h4>
    @RenderPage(LcUrl.RenderLangPath + "Email/$EmailUserInfoWidget.cshtml", new Dictionary<string, object>{ 
        {"AddContainerStyle", LcEmailTemplateHelper.StyleMessageSection()},        
        {"Data", itsUserData},
        {"DataPrefix", ""},
        {"Size", "medium"},
        {"UserType", itsUserType},
        {"WithContactData", true},
        {"WithGoogleMap", false}
    })

    <h4 @LcEmailTemplateHelper.StyleH4("color: #8B2143;")>Booking time and location</h4>
    <div style="@LcEmailTemplateHelper.StyleMessageSection()">
        <h5 @LcEmailTemplateHelper.StyleH5("font-size: 1.1em;margin: 8px 0 0;color: #6c6c6c;")>Position: </h5>
        <span>@booking.PositionSingular</span>

        <h5 @LcEmailTemplateHelper.StyleH5("font-size: 1.1em;margin: 8px 0 0;color: #6c6c6c;")>Scheduled time: </h5>
        @if (booking.ConfirmedDateStart is DateTime && booking.ConfirmedDateEnd is DateTime)
        {
        <span>@LcHelpers.DateTimeRangeToString(booking.ConfirmedDateStart, booking.ConfirmedDateEnd)</span>
        }
        else
        {
            // Null values:
            <span>Date not available</span>
        }

        <h5 @LcEmailTemplateHelper.StyleH5("font-size: 1.1em;margin: 8px 0 0;color: #6c6c6c;")>Location: </h5>
        @if (booking.StateProvinceCode != null)
        {
        <div>
            @printAddress(new Dictionary<string, object>() {
                {"name", getLocationName(booking)}, 
                {"location", booking.AddressLine1 + " " + booking.AddressLine2},
                {"city", booking.City}, 
                {"state", booking.StateProvinceCode},
                {"zipcode", booking.PostalCode}
            })

            <a target="_blank" href="http://maps.google.com/?q=@getLocationForGoogleMaps(booking)">View direction</a>
        </div>
        }
        else
        {
            // Null, no location
            <div>Address not available</div>
        }
    </div>

    <h4 @LcEmailTemplateHelper.StyleH4("color: #8B2143;")>Requested services and pricing estimate</h4>
    @RenderPage("$EmailRequestedBookingServicesWidget.cshtml", booking, myUserType)

    <h4 @LcEmailTemplateHelper.StyleH4("color: #8B2143;")>Reminders</h4>
    @RenderPage("$EmailBookingRemindersWidget.cshtml", myUserType)
</div>
}