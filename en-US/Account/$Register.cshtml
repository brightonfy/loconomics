@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    // Initialize general page variables
    var email = "";
    var password = "";
    var confirmPassword = "";
    //var captchaMessage = "";
    
    // Set if the system must wait for the confirmation code (sent on email) before allow user to login
    // By default is true, the standard behavior, but with false the user will be logged automatically
    // on registering, with 'partially confirmed', but an email will sent will the link to confirm its address still.
    bool waitConfirmation = PageData["WaitConfirmation"] ?? Session["RegisterWaitConfirmation"] ?? true;
    string redirect = N.W(Request.QueryString["Redirect"]) ?? LcUrl.LangPath + "Dashboard/Alerts/";
    
    // Setup Validation
	// Validate the user's email address
    Validation.RequireField("email", "You must specify an email address.");
    // Validate the user's password and password confirmation
    Validation.Add("email",
        Validator.Regex(@"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*","The email is not valid."));

	Validation.RequireField("password", "The password cannot be blank.");
    Validation.Add("confirmPassword", 
        Validator.EqualsTo("password", "The new password and confirmation password do not match."));
        
	Validation.RequireField("iagree", "You must agree to the Terms of Use.");

    // Validate the user's captcha answer
    // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
    //     ModelState.AddError("recaptcha", "Captcha response was not correct");
    // }
    
    // If this is a POST request, validate and process data
    if (IsPost && Validation.IsValid()) {
        email = Request.Form["email"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];
            
        // Insert a new user into the database
        var db = Database.Open("sqlloco");
            
        // Check if user already exists
        var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
        if (user == null) {
            // Insert email into the profile table
            db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);

            // Create and associate a new entry in the membership database.
            // If successful, continue processing the request
            try {
                bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    
                // Create Loconomics Customer user
                int userid = WebSecurity.GetUserId(email);
                //string firstname = email.Substring(0, email.IndexOf('@'));
                db.Execute("exec CreateCustomer @0,@1,@2,@3,@4",
                    userid, "", "", LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
                
                string confirmationUrl = null;

                if (requireEmailConfirmation) {
                    confirmationUrl = LcUrl.LangUrl + "Account/Confirm/?confirmationCode=" + HttpUtility.UrlEncode(token);
                }
                
                // Sent welcome email (if there is a confirmationUrl and token values, the email will contain it to perform the required confirmation)
                LcMessaging.SendWelcomeCustomer(userid, email, confirmationUrl, token);

                if (requireEmailConfirmation) {
                    // For for info about next lines, see the comment "IMPORTANT: 2012-07-17" on Provider-sign-up/$create-a-login.cshtml file
                    db.Execute(@"
                        UPDATE webpages_Membership SET
                            IsConfirmed = 1
                        WHERE UserId = @0
                    ", userid);
                }
                
                if (requireEmailConfirmation && waitConfirmation) {
                    Session["RegisteredUserID"] = userid;
                    // Thank the user for registering and let them know an email is on its way
                    // We return a json with result OK and redirect link (Code=1),
                    // and response end just after this:
                    LcHelpers.ReturnJsonResult(1, LcUrl.LangPath + "Account/Thanks/");
                } else {
                    // Navigate back to the homepage and exit
                    WebSecurity.Login(email, password);

                    // mark the user as logged in via a normal account,
                    // as opposed to via an OAuth or OpenID provider.
                    Session["OAuthLoggedIn"] = false;

                    // We return a json with result OK and redirect link (Code=1),
                    // and response end just after this:
                    LcHelpers.ReturnJsonResult(1, redirect);
                }
            } catch (System.Web.Security.MembershipCreateUserException e) {
                ModelState.AddFormError(e.Message);
            }
        } else {
            // User already exists
            ModelState.AddFormError("Email address is already in use.");
        }
    }
}
@LcHelpers.GetValidationScripts()
<article id="registerBox" class="ajax-box account-popup">
    <hgroup class="title">
        <h1>Create a free account</h1>
        <div class="subh1">Do you want to provide services? <a href="@(LcUrl.LangPath)ProviderSignUp/">Click here</a></div>
    </hgroup>
    <section>
        <form method="post" action="@(LcUrl.LangPath)Account/$Register/@(Request.Url.Query)" class="choice-option ajax changes-notification-disabled" data-success-post-message="Register successfully!">
            @* If at least one validation error exists, notify the user *@
            @Html.ValidationSummary("Please correct the errors and try again.")

            <fieldset>
                <legend>Registration Form</legend>
                <ul>
                    <li class="email username">
                        <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}>Email address:</label>
                        <input type="text" id="email" name="email" title="Email address" value="@email" @Validation.GetHtml("email") />
                        @* Write any email validation errors to the page *@
                        @Html.ValidationMessage("email")
                    </li>
                    <li class="password">
                        <label for="password" @if(!ModelState.IsValidField("password")) {<text>class="error-label"</text>}>Password:</label>
                        <input type="password" id="password" name="password" title="Password" @Validation.GetHtml("password") />
                        @* Write any password validation errors to the page *@
                        @Html.ValidationMessage("password")
                    </li>
                    <li class="confirm-password password">
                        <label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>} >Re-enter Password:</label>
                        <input type="password" id="confirmPassword" name="confirmPassword" title="Confirm password" @Validation.GetHtml("confirmPassword") />
                        @* Write any password validation errors to the page *@
                        @Html.ValidationMessage("confirmPassword")
                    </li>
                     @*<li class="recaptcha">
             
                       @ReCaptcha.GetHtml("PUBLIC_KEY", theme: "white")
                          @Html.ValidationMessage("recaptcha")
                        }
                    </li>*@
                    <li class="remember-me">
                        <input type="checkbox" id="register-iagree" name="iagree" value="true" title="I agree the Terms of Use" />
                        <label class="checkbox" for="register-iagree">I agree to the <a target="_blank" href="@(LcUrl.LangPath)About/TermsOfUse/">Terms of Use</a></label>
                    </li>
                    <li class="actions">
                        <button type="submit" class="main-action">Sign up</button>
                    </li>
                </ul>
            </fieldset>
        </form>
        <p class="choice-or">or</p>
        <div class="social choice-option">
             @RenderPage("_FacebookConnectButton.cshtml", new { Redirect = redirect } )
            <p class="footnote">*we don't post anything without your permission</p>
            <p class="info">By clicking "Connect with Facebook" you confirm that you accept the <a target="_blank" href="@(LcUrl.LangPath)About/TermsOfUse/">Terms of Use</a></p>
        </div>
    </section>
</article>