@{
    var redirect = LcUrl.LangPath + "HelpCenter/HowItWorks/#howitworks-";
    
    Validation.RequireField("profile-type", "Please, select one from Provider or Customer");
    Validation.RequireField("firstname", LcRessources.RequiredField("First name"));
    Validation.RequireField("email", LcRessources.RequiredField("Email"));
    Validation.RequireField("password", LcRessources.RequiredField("Password"));
    Validation.Add("email",
        Validator.Regex(LcValidators.EmailAddressRegexPattern, "The email is not valid."));

    if (IsPost && Validation.IsValid()) {
        // Validations depending on the profile-type selected
        if (Request["profile-type"] == "provider") {
            if (!Request["positionid"].IsInt()) {
                ModelState.AddError("jobtitle", LcRessources.RequiredField("Job title"));
            }
            redirect += "providers";
        } else {
            if (Request["lastname"].IsEmpty()) {
                ModelState.AddError("lastname", LcRessources.RequiredField("Last name"));
            }
            redirect += "customers";
        }

        if (ModelState.IsValid) {
        
            // Create account:
            if (LcAuth.ExistsEmail(Request["email"])) {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            } else {
                try {
                    // Check user type to be created
                    bool asProvider = Request["profile-type"] == "provider";
                    var user = 
                    LcAuth.RegisterUser(
                        Request["email"],
                        Request["firstname"],
                        Request["lastname"],
                        Request["password"],
                        asProvider
                    );
                    LcAuth.SendRegisterUserEmail(user);
                    // Auto-login:
                    LcAuth.Login(user.Email, Request["password"]);
                    try{
                        if (asProvider) {
                            // Add position
                            LcData.UserInfo.InsProviderPosition(user.UserID, Request["positionid"].AsInt());
                        }
                    } catch {
                        // If there is an error ONLY with the position creation, still continue as
                        // successfully because the account was created, after the redirect
                        // the form will be showed again to fullfill position information
                    }
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
                
                if (ModelState.IsValid) {
                    // We return a json with result OK and redirect link (Code=1),
                    // and response end just after this:
                    LcHelpers.ReturnJsonResult(1, redirect);
                }
            }
        }
    }
}
<div id="welcomepopup">
    <header>
        <h1>Welcome to Loconomics</h1>
        <div class="presentation">
            Whether you're providing or purchasing local services, we've designed a marketplace with you in mind.
            We're a <a href="#bcorp" class="has-tooltip" title="Benefit Corporations are a new class of corporation that are required to create a material positive impact on society and the environment.">California Benefit Corporation</a>
            dedicated to the self-employed movement.
            We invite you to create a <strong>free</strong> profile!
        </div>
    </header>

    <div class="register">
        <div id="welcomepopupLoading"><img alt="Loading" src="@(LcUrl.AppPath)img/theme/loading.gif" /></div>
        <form action="@(LcUrl.LangPath)Account/$WelcomePopup/@(Request.Url.Query)" method="post" class="ajax ajax-box lightform">
            @if (IsPost)
            {
                // Only showed on post for back-end errors, avoiding show it for first-time front-end errors:
                @Html.ValidationSummary("")
            }
            <div class="profile-choice">
                <h2>Join our San Francisco community as a:</h2>
                <label><input type="radio" name="profile-type" value="provider" @Validation.GetHtml("profile-type") @LcHelpers.IsChecked("provider", Request["profile-type"]) /> Provider</label>
                <label><input type="radio" name="profile-type" value="customer" @Validation.GetHtml("profile-type") @LcHelpers.IsChecked("customer", Request["profile-type"]) /> Customer</label>
            </div>
            <div class="profile-data">
                
                <div class="social choice-option">
                    @RenderPage("_FacebookConnectButton.cshtml", new { Redirect = redirect, Size = "large" } )
                </div>
                
                <p class="choice-or">or</p>

                <div class="choice-option">
                    <ul>
                        <li class="provider customer"><input type="text" placeholder="First name" name="firstname" @Validation.GetHtml("firstname") value="@Request["firstname"]" /></li>
                        <li class="customer"><input type="text" placeholder="Last name" name="lastname" @Validation.GetHtml("lastname") value="@Request["lastname"]" /></li>
                        <li class="provider customer"><input type="text" placeholder="E-mail address" name="email"  @Validation.GetHtml("email") value="@Request["email"]" /></li>
                        <li class="provider customer"><input type="password" placeholder="Create password" name="password" @Validation.GetHtml("password")/></li>
                        <li class="provider"><input type="text" placeholder="Job title (you can add more later)" name="jobtitle"  @Validation.GetHtml("jobtitle") value="@Request["jobtitle"]" /></li>
                        <li class="position-description provider"><textarea rows="5" name="jobdescription" readonly>@Request["jobdescription"]</textarea><input type="hidden" name="positionid" value="@Request["positionid"]" /></li>
                    </ul>
                    <div class="actions">
                        <button type="submit" class="main-action action">Sign up - It's free!</button>
                    </div>
                </div>

            </div>
        </form>
    </div>

    <footer>
        <div class="terms">
            By clicking Sign up, you confirm that you accept the <a class="terms-of-use" target="_blank" href="@(LcUrl.LangPath)About/TermsOfUse/" data-tooltip-url="#terms-tooltip">Terms of Use.</a>
            We won't share you email address or post anything to your Facebook profile without permission.
            <div class="popups"><div id="terms-tooltip">
                <ul>
                    <li>I am at least 18 years old and will personally provide the services listed on my profile.</li>
                    <li>I am not acting on behalf of an agency or employer for services booked using my profile.</li>
                    <li>I am legally authorized to perform the services listed on my profile and possess any licenses required to perform those services.</li>
                    <li>I will not engage in any unlawful or innapropriate activity while performing services for Customers.</li>
                    <li>I will take the necessary safety precautions when meeting Customers to assure both their and my own safety.</li>
                </ul>
                @*<p>View full <a target="_blank" href="@(LcUrl.LangPath)About/TermsOfUse/">Terms of Use</a></p>*@
            </div></div>
        </div>
        <div class="login">
            Already have an account? <a target="_blank" href="@(LcUrl.LangPath)Account/Login/" class="login action">Login</a>
        </div>
    </footer>
</div>