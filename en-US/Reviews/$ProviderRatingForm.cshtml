@* Form to review a provider by a customer based on a performed Booking
*@
@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    LcHelpers.SecurePage();
    var customerUserID = WebSecurity.CurrentUserId;
    var customer = LcData.UserInfo.GetUserRow();
    int bookingID = PageData["BookingID"] ?? Request["BookingID"].AsInt();
    int providerUserID = 0, positionID = 0;
    decimal serviceHours = 0M;
    bool pastReference = false;
    dynamic provider = null, position = null;
    
    if (bookingID == 0) {
        // Past review (from ProviderReferenceForm)
        providerUserID = Request["ProviderUserID"].AsInt();
        positionID = Request["PositionID"].AsInt();
        pastReference = true;
    } else if (bookingID > 0) {
        dynamic booking = PageData["booking"] ?? LcData.Booking.GetBooking(bookingID);
        
        // Check booking is valid and current user is the customer (only he can rate provider at this bookingid)
        if (booking == null || booking.CustomerUserID != customerUserID) {
            ModelState.AddFormError("Not valid booking to review");
        } else {
            providerUserID = booking.ProviderUserID;
            positionID = booking.PositionID;
            serviceHours = booking.ServiceDuration;
        }
    }
    
    provider = LcData.UserInfo.GetUserRow(providerUserID);
    position = LcData.UserInfo.GetUserPos(providerUserID, positionID);
    
    if (provider == null || position == null) {
        ModelState.AddFormError("No valid provider or position to review");
    }

    if (ModelState.IsValid) {
        if (!pastReference){
            Validation.RequireField("question1", "Please respond to all questions in Section 1");
            Validation.RequireField("private-review", "Please write a private review");
        }
        Validation.RequireField("question2", "Please respond to all questions in Section 2");
        Validation.RequireField("rating1", "Please complete all star ratings");
        Validation.RequireField("rating2", "Please complete all star ratings");
        Validation.RequireField("rating3", "Please complete all star ratings");
        Validation.RequireField("public-review", "Please write a public review");
        if (pastReference) {
            Validation.Add("serviceHours", Validator.Decimal("The number of hours worked must be a valid number"));
        }
        /* Validating texts length */
        Validation.Add("public-review", Validator.StringLength(500, 20, "Your public review must be between 20 and 500 characters"));
        Validation.Add("private-review", Validator.StringLength(1000, 0, "Your public review must be fewer than 1,000 characters"));
        Validation.Add("question1", Validator.StringLength(1000, 0, "Please answer question 1 in fewer than 1,000 characters"));
        Validation.Add("question2", Validator.StringLength(1000, 0, "Please answer question 1 in fewer than 1,000 characters"));

        if(IsPost && Validation.IsValid()){

            var answer1 = Request["question1"].AsBool();
            var answer2 = Request["question2"].AsBool();
            var answer1Comment = Request["question1-comment"];
            var rating1 = Request["rating1"].AsInt();
            var rating2 = Request["rating2"].AsInt();
            var rating3 = Request["rating3"].AsInt();
            var publicreview = Request["public-review"];
            var privatereview = Request["private-review"];
            if (pastReference) {
                serviceHours = Request["serviceHours"].AsDecimal();
                // there is no question1 showed to a past customer, but if he/she is here rating is because is happy with the provider, not? We set 'true'
                answer1 = true;
                answer1Comment = "";
            }
        
            if (answer1 == false && answer1Comment.IsEmpty()) {
                ModelState.AddError("question1-comment", "Please, tell us what was not performed");
            }

            if(ModelState.IsValid){
                using (var db = Database.Open("sqlloco")) {
                    var hasreview = db.QueryValue(LcData.sqlCheckUserReview, positionID, bookingID, providerUserID, customerUserID);
                    if(hasreview > 0){
                        ModelState.AddFormError("The review for this service already exist");
                    } else {
                        //Look for existing scores
                        var scores = db.QuerySingle(LcData.sqlGetUserReviewScores, providerUserID, positionID);
                        if (scores == null) {
                            //First scores for the provider and positionID
                            db.Execute(LcData.sqlInsertUserReviewScores, 
                                providerUserID, positionID,
                                1,
                                rating1, rating2, rating3, null,
                                (answer1 ? 1 : 0), (answer2 ? 1 : 0),
                                serviceHours, DateTime.Now);  
                        } else {
                            // Recalculate and Save the updated scores
                            var tr = scores.TotalRatings;
                            var ntr = tr + 1;
                            db.Execute(LcData.sqlUpdateUserReviewScores,
                                providerUserID, positionID,
                                ntr,
                                ((scores.Rating1 ?? 0) * tr + rating1) / ntr,
                                ((scores.Rating2 ?? 0) * tr + rating2) / ntr,
                                ((scores.Rating3 ?? 0) * tr + rating3) / ntr,
                                // No usamos el rating4, mantenemos el valor que hubiese -que será null-
                                scores.Rating4,
                                (answer1 ? scores.Answer1 + 1 : scores.Answer1),
                                (answer2 ? scores.Answer2 + 1 : scores.Answer2),
                                scores.ServiceHours + serviceHours,
                                DateTime.Now);
                        };
                        //Store Review
                        db.Execute(LcData.sqlInsertUserReview, 
                            bookingID, customerUserID, providerUserID, positionID,
                            rating1, rating2, rating3, null,
                            answer1, answer2, answer1Comment, null,
                            privatereview, publicreview,
                            serviceHours, 0);
                        
                        // Set VerificationID:11 for reviewed user as confirmed just with only receive a review(see issue #8 comment https://github.com/djorgensen/Loconomics/issues/8#issuecomment-6807651)
                        db.Execute(@"EXEC SetUserVerification @0,@1,@2,@3", providerUserID, 11, DateTime.Now, 1);
                        // If is an old client, bookingID=0, set VerificationID:12 for 'references from former clients' as status 'confirmed', and test again related alert
                        // See previuos github link, complemented with next and followings: https://github.com/djorgensen/Loconomics/issues/92#issuecomment-8167333
                        if (bookingID == 0) {
                            db.Execute(@"EXEC SetUserVerification @0,@1,@2,@3", providerUserID, 12, DateTime.Now, 1);
                        }
                    }
                }
                if(ModelState.IsValid){
                    if (pastReference) {
                        LcHelpers.ReturnJsonResult(0, "Thanks for your review!", false);
                    } else {
                        LcHelpers.ReturnJsonResult(3, LcUrl.LangPath + "Reviews/$BookingRatingDetails/?BookingID=" + bookingID, false);
                    }

                    // Send emails recommending this provider to comma-sepparated 'share-email-addresses'
                    var emails = Request["share-email-addresses"];
                    string subject = "{0} {1} recommends you book {2} as a {3}";
                    if (!string.IsNullOrWhiteSpace(emails)) {
                        var add = emails.Split(',', ';', '\n');
                        string newemails = "";
                        List<string> emailslist = new List<string>();
                        foreach (string ad in add) {
                            if (LcValidators.IsEmailAdress(ad)) {
                                emailslist.Add(ad);
                            }
                        }
                        newemails = LcHelpers.JoinNotEmptyStrings(",", emailslist.ToArray<string>());
                        if (!string.IsNullOrEmpty(newemails)) {
                            LcMessaging.SendMail(newemails, String.Format(subject, customer.FirstName, customer.LastName,
                                provider.FirstName, position.PositionSingular),
                                LcMessaging.ApplyTemplate(LcUrl.LangPath + "Profile/EmailRecommendation/",
                                new Dictionary<string,object>{ 
                                    { "CustomerUserID", customerUserID },
                                    { "ProviderUserID", provider.UserID },
                                    { "PositionID", position.PositionID }
                                }));
                        }
                    }
                    Response.End();
                }
            }
        }
    }
    
    var rateTexts = LcData.GetPositionRatings(positionID);
}
@helper printProviderRating3(dynamic provider, dynamic rateTexts){
            <li class="rating3">
                <span>@(rateTexts.Rating3)@(String.IsNullOrEmpty(rateTexts.Rating3FormDescription) ? "" : " - " + rateTexts.Rating3FormDescription): @*Rate @(provider.FirstName)'s professionalism*@</span>
                <div class="user-rating">
                    @RenderPage(LcUrl.RenderLangPath + "Reviews/_StarRating.cshtml", new String[] { "rating3", Request["rating3"], "false" })
                </div>
            </li>
}
<form class="provider-rating-form ajax ajax-box" method="post" action="@(LcUrl.LangPath)Reviews/$ProviderRatingForm/@(Request.Url.Query)">
    @LcHelpers.SetupStarRatingPlugin()
    @LcHelpers.GetValidationScripts()
    @Html.ValidationSummary()
    @if (provider != null && position != null)
    {
    <input type="hidden" name="BookingID" value="@bookingID" />
    <fieldset class="section-1">
        <legend>Section 1: @(pastReference ? "Review " + provider.FirstName + "’s past work for you as a " + position.PositionSingular : "Review the work done")</legend>
        <ul>
            @if (!pastReference)
            {
            <li class="question1">
                <span>Did @provider.FirstName perform all the services you requested?</span>
                <label>Yes<input type="radio" @LcHelpers.IsChecked("true", Request["question1"]) name="question1" value="true" /></label>
                <label>No<input type="radio" @LcHelpers.IsChecked("false", Request["question1"]) name="question1" value="false" /></label>
            </li>
            <li class="question1-comment">
                <textarea rows="3" name="question1-comment" placeholder="Tell use what work was not performed." @Validation.GetHtml("question1-comment")>@Request["question1-comment"]</textarea>
            </li>
            }
            <li class="rating1">
                <span>@(rateTexts.Rating1)@(String.IsNullOrEmpty(rateTexts.Rating1FormDescription) ? "" : " - " + rateTexts.Rating1FormDescription): @*Rate the quality of work @provider.FirstName performed:*@</span>
                <div class="user-rating">
                    @RenderPage(LcUrl.RenderLangPath + "Reviews/_StarRating.cshtml", new String[] { "rating1", Request["rating1"], "false" })
                </div>
            </li>
            <li class="rating2">
                <span>@(rateTexts.Rating2)@(String.IsNullOrEmpty(rateTexts.Rating2FormDescription) ? "" : " - " + rateTexts.Rating2FormDescription): @*Rate the efficience in which @provider.FirstName performed the work:*@</span>
                <div class="user-rating">
                    @RenderPage(LcUrl.RenderLangPath + "Reviews/_StarRating.cshtml", new String[] { "rating2", Request["rating2"], "false" })
                </div>
            </li>
            @if (pastReference)
            {
                @printProviderRating3(provider, rateTexts)
            <li class="serviceHours">
                <label>Please let us know approximately how many hours @provider.FirstName has worked for you:
                    <input type="text" name="serviceHours" @Validation.GetHtml("serviceHours") value="@(Request["serviceHours"])" />
                </label>
            </li>
            }
            <li class="publicreview">
                <label for="public-review">Write a brief review for other Loconomics members to see: 
                (please be respectful and constructive)</label>
                <textarea rows="4" id="public-review" name="public-review" placeholder="(250 or fewer characters)">@Request["public-review"]</textarea>
            </li>
        </ul>
    </fieldset>
    if (!pastReference)
    {
    <fieldset class="section-2">
        <legend>Section 2: Help @provider.FirstName grow professionally</legend>
        <ul>
            @printProviderRating3(provider, rateTexts)
            <li class="private-review">
                <label for="private-review">Please give @provider.FirstName any constructive criticism to help
                    @provider.FirstName do a better job (only @provider.FirstName will see this):</label>
                <textarea rows="10" id="private-review" name="private-review" placeholder="(1000 or fewer characters)">@Request["private-review"]</textarea>
            </li>               
        </ul>
    </fieldset>
    }
    <fieldset class="section-3">
        <legend>Section @(pastReference ? "2" : "3"): Recommend @provider.FirstName</legend>
        <ul>
            <li class="question2">
                <span>Would you hire @provider.FirstName as a @position.PositionSingular again?</span>
                <label>Yes<input type="radio" name="question2" @LcHelpers.IsChecked("true", Request["question2"]) value="true" /></label>
                <label>No<input type="radio" name="question2" @LcHelpers.IsChecked("false", Request["question2"]) value="false" /></label>
            </li>
            <li class="share-social">
                Please share @(provider.FirstName)'s profile with your family and friends: 
                @RenderPage(LcUrl.RenderLangPath + "Social/_SocialNetworkingWidget.cshtml",
                    new
                    {
                        URL = LcData.UserInfo.GetUserPublicURL(provider.UserID, position.PositionID),
                        Title = "An amazing " + position.PositionSingular + ": " + LcHelpers.GetUserDisplayName(provider)
                    })
            </li>
            <li class="share-email">
                <label for="share-email-addresses">Enter e-mail addresses, separated by commas:</label>
                <textarea rows="4" id="share-email-addresses" name="share-email-addresses">@Request["share-email-addresses"]</textarea>
            </li>
        </ul>
    </fieldset>
    <fieldset class="actions">
        <button class="button main-action" type="submit">Submit feedback</button>
    </fieldset>
    }
</form>