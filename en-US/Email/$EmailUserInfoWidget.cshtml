@{
    var size = PageData["Size"] ?? "mini"; // medium, large
    var withContactData = PageData["WithContactData"] ?? false;
    var userID = PageData["UserID"] ?? 0;
    var data = PageData["Data"];
    var dataPrefix = PageData["DataPrefix"] ?? "";
    var userType = PageData["UserType"] ?? "user"; // customer, provider
    var addContainerStyle = PageData["AddContainerStyle"] ?? "";
    var extraInfo = PageData["ExtraInfo"];
    var withGoogleMap = PageData["WithGoogleMap"] ?? true;
    var positionID = (int)(PageData["PositionID"] ?? -1);
    var urlBase = LcUrl.SiteUrl;

    if (data == null) {
        if (withContactData) {
            data = LcData.UserInfo.GetUserRowWithContactData(userID);
        } else {
            data = LcData.UserInfo.GetUserRow(userID);
        }
        dataPrefix = "";
    }
    
    if (Array.IndexOf<string>(new string[] { "mini", "medium", "large" }, size) == -1) {
        throw new Exception("Size is not valid: " + size);
    }
    if (Array.IndexOf<string>(new string[] { "user", "customer", "provider" }, userType) == -1) {
        throw new Exception("UserType is not valid: " + userType);
    }
}
@helper printGoogleMap(string location){
    <iframe class="google-map" width="120" height="120" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="http://maps.google.com/?q=@(location);z=16&amp;output=embed"></iframe>
}
@functions{
    string getLocationForGoogleMaps(dynamic data){
        return LcHelpers.JoinNotEmptyStrings(", ", data.AddressLine1, data.City, data.StateProvinceCode, "United States");
    }
}
@helper printProfileLinkUrl(dynamic data, string dataPrefix, string urlBase) {
    @(urlBase + LcData.UserInfo.GetUserPublicURL(data[dataPrefix + "UserID"]))
}
@if (size == "medium")
{
    <div style="font-size: .9em;@addContainerStyle">
        <div>
            <h5 @LcEmailTemplateHelper.StyleH5("margin: 0;font-size: 1em;line-height: 1em;display: inline;color: #6C6C6C;")>@LcHelpers.GetUserDisplayName(data, dataPrefix)</h5>
            <span>Member since @data[dataPrefix + "MemberSinceDate"].ToString("MMMM yyyy")</span>
        </div>
        
        <img style="@LcEmailTemplateHelper.StyleMiniAvatar()" alt="@data[dataPrefix + "FirstName"]'s Photo" src="@printProfileLinkUrl(data, dataPrefix, urlBase)" width="55" height="55" />
        
        @if (withContactData) {
            <div style="display: inline-block;line-height: normal;overflow: hidden;width: 400px;">
                <div>Name: <span>@data[dataPrefix + "FirstName"] @data[dataPrefix + "MiddleIn"] @data[dataPrefix + "LastName"]</span></div>
                <div>Address: <span>@LcHelpers.JoinNotEmptyStrings(", ", data[dataPrefix + "City"], @data[dataPrefix + "StateProvinceCode"], @data[dataPrefix + "PostalCode"])</span></div>
                <div>Mobile phone: <span>@data[dataPrefix + "MobilePhone"]</span></div>
                <div>Email address: <span>@data[dataPrefix + "Email"]</span></div>
            </div>
            if (withGoogleMap) {
                @printGoogleMap(getLocationForGoogleMaps(data))
            }
        }
        else {
        <p style="display: inline-block;line-height: normal;overflow: hidden;width: 400px;height: 50px;margin:0;padding:0">
            @if (!String.IsNullOrWhiteSpace(data[dataPrefix + "PublicBio"])) {
                @data[dataPrefix + "PublicBio"]
            } else {
                <text></text>
              
            }
        </p>
        }

        <div style="display: inline-block;">
        @if (userType == "customer")
        {
            @RenderPage(LcUrl.RenderLangPath + "Email/$EmailUserRatingSummaryWidget.cshtml", new { 
                ReviewedID = data[dataPrefix + "UserID"],
                PositionID = 0,
                ReviewedData = data,
                ReviewedDataPrefix = dataPrefix,
                RatingSummaryMode = "summary"
            })
        }
        else if (userType == "provider")
        {
            @RenderPage(LcUrl.RenderLangPath + "Email/$EmailUserRatingSummaryWidget.cshtml", new { 
                ReviewedID = data[dataPrefix + "UserID"],
                PositionID = positionID,
                ReviewedData = data,
                ReviewedDataPrefix = dataPrefix,
                RatingSummaryMode = "summary"
            })
        }
        </div>

        <a style="text-transform: lowercase;width: 100px;display: inline;margin-left: 10px;" href="@printProfileLinkUrl(data, dataPrefix, urlBase)">View full profile</a>
    </div>
}
@* Mini size is the same for all userType's *@
else if (size == "mini") {
    <div style="@addContainerStyle">
        <img style="@LcEmailTemplateHelper.StyleMiniAvatar()" alt="@data[dataPrefix + "FirstName"]'s Photo" src="@(urlBase + LcUrl.LangPath)Profile/Photo/@data[dataPrefix + "UserID"]" width="55" height="55" />
        <h5 style="@LcEmailTemplateHelper.StyleUserPublicName()">@data[dataPrefix + "FirstName"] @(LcHelpers.GetInitialLetter(data[dataPrefix + "LastName"])).</h5>
        @if (!String.IsNullOrWhiteSpace(extraInfo)) {
            <div>@extraInfo</div>
        } else {
            <a href="@printProfileLinkUrl(data, dataPrefix, urlBase)">View profile</a>
        }
    </div>
} else {
    <strong> </strong>
}