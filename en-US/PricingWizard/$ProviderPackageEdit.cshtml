@using WebMatrix.Data;
@{
    LcHelpers.SecurePage();
    var p = LcData.UserInfo.GetUserRow();
    var packageID = Request["ProviderPackageID"].AsInt();
    var positionID = PageData["PositionID"] ?? Request["PositionID"].AsInt();
    var attributesInPackage = new List<int>();
    var action = Request["action"] ?? "edit"; // Possible values: delete, edit (by default, no checked)
    string type = PageData["Type"] ?? Request["Type"] ?? "package"; // values: package, addon
    
    var isAddon = type == "addon";
    
    if (action == "delete") {
        var sqlDelPackage = @"
            DELETE ProviderPackage
            WHERE ProviderPackageID = @0
                    AND ProviderUserID = @1
                    AND PositionID = @2

            -- Test Alert
            EXEC TestAlertPricingDetails @1, @2
        ";
        using (var db = Database.Open("sqlloco")) {
            db.Execute(sqlDelPackage, packageID, p.UserID, positionID);
            
            LcHelpers.ReturnJsonResult(0, "Package removed succesfully");
        }
    }
    
    Validation.RequireField("package-name", LcRessources.RequiredField("Package name"));
    Validation.RequireField("package-description", LcRessources.RequiredField("Description"));
    Validation.RequireField("price", LcRessources.RequiredField("Price"));
    Validation.RequireField("minutes", LcRessources.RequiredField("Session duration in minutes"));
    Validation.Add("package-name", Validator.StringLength(50, 0, "Package/product/service name must be fewer than 50 characters."));
    Validation.Add("package-description", Validator.StringLength(1000, 0, "Package/product/service description must be fewer than 1000 characters."));
    Validation.Add("price", Validator.Decimal("Price must be a number"));
    Validation.Add("minutes", Validator.Integer("Session duration in minutes must be a number without decimals"));
    if (!isAddon) {
        Validation.RequireField("sessions-number", LcRessources.RequiredField("Number of sessions"));
        Validation.Add("sessions-number", Validator.Integer("Number of sessions must be a number without decimals"));
    }

    if (IsPost) {
        var checkedAtts = Request.Form.GetValues("package-service-attribute");
        if (checkedAtts != null && checkedAtts.Length > 0) {
            foreach (var att in checkedAtts) {
                int attId = att.AsInt();
                if (attId > 0) {
                    attributesInPackage.Add(attId);
                }
            }
        }
        
        if (Validation.IsValid()) {
            var sqlSetPackage = @"
                DECLARE @PackageID int
                SET @PackageID = @0
            
                IF @PackageID = 0 BEGIN
                    INSERT INTO ProviderPackage (
                        ProviderUserID
                        ,PositionID
                        ,LanguageID
                        ,CountryID
                        ,ProviderPackageName
                        ,ProviderPackageDescription
                        ,ProviderPackagePrice
                        ,ProviderPackageServiceDuration
                        ,FirstTimeClientsOnly
                        ,NumberOfSessions
                        ,IsAddOn
                        ,CreatedDate
                        ,UpdatedDate
                        ,ModifiedBy
                        ,Active
                        ,PricingTypeID
                    ) VALUES (
                        @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, getdate(), getdate(), 'sys', 1, @12
                    )
                    SET @PackageID = @@Identity
                END ELSE
                    UPDATE ProviderPackage SET
                        ProviderPackageName = @5
                        ,ProviderPackageDescription = @6
                        ,ProviderPackagePrice = @7
                        ,ProviderPackageServiceDuration = @8
                        ,FirstTimeClientsOnly = @9
                        ,NumberOfSessions = @10
                        --,IsAddOn = @11
                        ,UpdatedDate = getdate()
                        ,ModifiedBy = 'sys'
                        ,Active = 1
                    WHERE ProviderPackageID = @PackageID

                -- Test Alert
                EXEC TestAlertPricingDetails @1, @2

                SELECT @PackageID As ProviderPackageID
            ";
            var sqlDelDetails = @"
                DELETE FROM ProviderPackageDetail
                WHERE ProviderPackageID = @0
            ";
            var sqlSetDetail = @"
                BEGIN TRAN
                    UPDATE  ProviderPackageDetail WITH (serializable)
                    SET     Active = 1,
                            UpdatedDate = getdate(),
                            ModifiedBy = 'sys'
                    WHERE   ProviderPackageID = @0 AND ServiceAttributeID = @1

                    IF @@rowcount = 0
                    BEGIN
                        INSERT INTO ProviderPackageDetail (
                            ProviderPackageID, ServiceAttributeID, 
                            CreatedDate, UpdatedDate, 
                            ModifiedBy, Active)
                        VALUES (@0, @1, getdate(), getdate(), 'sys', 1)
                    END
                COMMIT TRAN
            ";
            var sqlSetServiceAttribute = @"
                /* Difference of this SQL to the used in 'Services' tab is that there a specific
                   categoryID is passed, here we don't know that category, we assign the first
                   found (enough to show attribute in services tab as checked) in a EligibleForPackages
                   category in that the attribute is */
                BEGIN TRAN
                    UPDATE  userprofileserviceattributes WITH (serializable)
                    SET     Active = 1,
                            UpdatedDate = getdate(),
                            ModifiedBy = 'sys'
                    WHERE   UserId = @0 AND PositionID = @1
                             -- NO filter by category on update here: AND ServiceAttributeCategoryID = @--2
                             AND ServiceAttributeID = @2
                             AND LanguageID = @3 AND CountryID = @4

                    IF @@rowcount = 0
                    BEGIN
                        INSERT INTO userprofileserviceattributes (UserID,
                            PositionID, ServiceAttributeCategoryID, ServiceAttributeID, LanguageID, CountryID, CreateDate, UpdatedDate, 
                            ModifiedBy, Active)
                        VALUES (@0, @1, 
                            /* category select first for attribute */
                            (SELECT TOP 1 a.ServiceAttributeCategoryID FROM 
                                servicecategorypositionattribute as a
                                 INNER JOIN
                                serviceattributecategory As sc
                                  ON a.ServiceAttributeCategoryID = sc.ServiceAttributeCategoryID
                                    AND a.LanguageID = sc.LanguageID AND a.CountryID = sc.CountryID
                             WHERE a.PositionID = @1
                                AND sc.EligibleForPackages = 1
                                AND a.Active = 1
                                AND sc.Active = 1
                                AND a.LanguageID = @3
                                AND a.CountryID = @3
                                -- THIS ATTRIBUTE IS IN!
                                AND a.ServiceAttributeID = @2),
                            @2, @3, @4, getdate(), getdate(), 'sys', 1)
                    END
                COMMIT TRAN
            ";
            
            var beforePositionStatuses = LcData.UserInfo.GetUserPositionsStatuses((int)p.UserID);
            
            using (var db = Database.Open("sqlloco")) {
                packageID = db.QueryValue(sqlSetPackage, packageID,
                    p.UserID, positionID, 
                    LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID(),
                    Request["package-name"],
                    Request["package-description"],
                    Request["price"].AsDecimal(),
                    Request["minutes"].AsDecimal(),
                    isAddon ? false : Request["first-time-clients-only"].AsBool(),
                    isAddon ? 1 : Request["sessions-number"].AsInt(),
                    isAddon,
                    isAddon ? 6 : 3 // PricingTypeID -- code for the mid-step before completely update pricing with multiple pricingtypes-position and package as base
                );
                db.Execute(sqlDelDetails, packageID);
                foreach(var att in attributesInPackage) {
                    // Add to the package
                    db.Execute(sqlSetDetail,
                        packageID,
                        att
                    );
                    // Add to the list of 'service tab' selected attributes (on one of the categories in that the attribute is)
                    db.Execute(sqlSetServiceAttribute,
                        p.UserID, positionID,
                        att,
                        LcData.GetCurrentLanguageID(),
                        LcData.GetCurrentCountryID()
                    );
                }
            }
        
            // Show the profile activation popup with 'next-step' buttons and progress information when need,
            // if not the short message is showed:
            if (!LcHelpers.UseProfileActivationPopup(beforePositionStatuses,
                p.UserID,
                LcRessources.DataSaved,
                "Add/Edit packages"))
            {
                LcHelpers.ReturnJsonResult(5, LcRessources.ShortDataSaved);
            }
        }
    }
    
    dynamic package = null, attributes = null;
    using (var db = Database.Open("sqlloco")) {
        if (!IsPost && packageID > 0) {
            package = db.QuerySingle(@"
                SELECT  p.ProviderPackageID
                        ,p.ProviderPackageName As Name
                        ,p.ProviderPackageDescription As Description
                        ,p.ProviderPackagePrice As Price
                        ,p.ProviderPackageServiceDuration As ServiceDuration
                        ,p.FirstTimeClientsOnly
                        ,p.NumberOfSessions
                        ,p.IsAddOn
                        ,p.ProviderUserID
                        ,p.PositionID
                FROM    providerpackage As p
                WHERE   p.ProviderPackageID = @0
                         AND 
                        p.LanguageID = @1 AND p.CountryID = @2
                         AND 
                        p.Active = 1
            ", packageID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
            // If there is a package to be edited (packageID different from 0 and exists and we will edit it)
            // we overwrite the positionID field with that from database (package var) to avoid some 'hacks' with
            // data corruption
            if (package != null) {
                positionID = package.PositionID;
            }
            // getting attributes included in this package
            var packagesdetails = db.Query(@"
                SELECT  PD.ServiceAttributeID
                FROM    ProviderPackageDetail As PD
                WHERE   PD.ProviderPackageID = @0
                         AND PD.Active = 1
            ", packageID);
            if (packagesdetails != null) {
                foreach(var pakatt in packagesdetails) {
                    attributesInPackage.Add(pakatt.ServiceAttributeID);
                }
            }
        }
        // Getting full attributes for the position (all categories)
        attributes = db.Query(@"EXEC GetServiceAttributes @0,@1,@2,@3,@4",
            positionID, 0, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID(), p.UserID);
    }
}
<form method="post" class="ajax ajax-box provider-package" action="@(LcUrl.LangPath)PricingWizard/$ProviderPackageEdit/?ProviderPackageID=@(packageID)&PositionID=@(positionID)&Type=@(type)">
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="package-data">
        @{
            var nameHolder = "Type the name of the package/product/service; e.g., Introductory Special";
            if (isAddon) {
                nameHolder = "Type the name of the add-on";
            }
        }
        <input class="package-name" type="text" name="package-name" placeholder="@nameHolder" value="@(Request["package-name"] ?? (package == null ? "" : package.Name))" />
        @if (!isAddon)
        {
        <label class="package-sessions">Number of appointments/sessions in this package/product/service: 
            <input type="text" name="sessions-number" value="@(Request["sessions-number"] ?? (package == null ? "1" : package.NumberOfSessions))" /></label>
        }
        <label class="package-price">Total price for @(!isAddon ? "package/product/service" : "add-on"): 
            <input type="text" name="price" value="@(Request["price"] ?? (package == null ? "" : package.Price))" /></label>
        <label class="package-duration">@(!isAddon ? "Length of each appointment/session:" : "Length of add-on service:")
            <input type="text" name="minutes" value="@(Request["minutes"] ?? (package == null ? "" : package.ServiceDuration))" /> minutes</label>
        @if (!isAddon)
        {
        <label class="only-first-time-clients">
            <input type="checkbox" name="first-time-clients-only" value="True" @LcHelpers.IsChecked(true, Request["first-time-clients-only"] ?? (package == null ? false : package.FirstTimeClientsOnly)) />
            This package/product/service is only available to first-time clients
        </label>
        }
        <label class="package-description">
            <textarea name="package-description" placeholder="Describe in detail what the client will receive by purchasing this package/product/service.">@(Request["package-description"] ?? (package == null ? "" : package.Description))</textarea>
        </label>
    </fieldset>

    @{
        // Splitting attributes in two blocks, checking if there are something
        var preCheckedAttributes = new List<dynamic>();
        var notCheckedAttributes = new List<dynamic>();
        
        if (attributes != null) {
            foreach(var att in attributes) {
                if (att.EligibleForPackages) {
                    if (att.UserChecked) {
                        preCheckedAttributes.Add(att);
                    } else {
                        notCheckedAttributes.Add(att);
                    }
                }
            }
        }
    }
    @if (preCheckedAttributes.Count > 0 || notCheckedAttributes.Count > 0)
    {
        <fieldset class="package-details">
            <h5>Services included in this package/product/service:</h5>
            <ul class="provider-package-services">
            @foreach (var att in (preCheckedAttributes.Count > 0 ? preCheckedAttributes : notCheckedAttributes))
            {
                <li title="@att.ServiceAttribute" data-description="@att.ServiceAttributeDescription">
                    <label><input name="package-service-attribute" type="checkbox" @LcHelpers.IsChecked(true, attributesInPackage.Contains(att.ServiceAttributeID)) value="@att.ServiceAttributeID" /> @att.ServiceAttribute</label>
                </li>
            }
            </ul>
            @if (preCheckedAttributes.Count > 0 && notCheckedAttributes.Count > 0)
            {
                <a href="#show-more-attributes" class="show-more-attributes" data-hide-text="Show fewer service options">Show more service options</a>
                <ul class="provider-package-services services-not-checked">

                @foreach (var att in notCheckedAttributes)
                {
                    <li title="@att.ServiceAttribute" data-description="@att.ServiceAttributeDescription">
                        <label><input name="package-service-attribute" type="checkbox" @LcHelpers.IsChecked(true, attributesInPackage.Contains(att.ServiceAttributeID)) value="@att.ServiceAttributeID" /> @att.ServiceAttribute</label>
                    </li>
                }
                </ul>
            }
        </fieldset>
    }
    <fieldset class="actions">
        <button type="button" class="button cancel-action">Cancel</button>
        <button class="button main-action">Save</button>
    </fieldset>
</form>