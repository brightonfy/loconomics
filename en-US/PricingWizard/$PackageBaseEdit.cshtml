@*
    Form to allow provider at dashboard to edit a package with a pricing type specific configuration (PricingTypeID; for all that are package based),
    knowing the position (PositionID) and the package (ProviderPackageID) or 0 for new package.
*@
@using WebMatrix.Data;
@{
    LcHelpers.ProviderPage();
    
    // Main data setup:
    var p = LcData.UserInfo.GetUserRow();
    var data = new LcPricingModel.PackageBaseData {
        ID = Request["ProviderPackageID"].AsInt(),
        PositionID = Request["PositionID"].AsInt(),
        PricingTypeID = Request["PricingTypeID"].AsInt(),
        ProviderUserID = p.UserID,
        // some defaults for get
        NumberOfSessions = 1,
        PriceRateUnit = "hour",
        IsPhone = false
    };
    var config = LcPricingModel.PackageBasePricingTypeConfigs[data.PricingTypeID];
    
    // Delete?
    if (Request["action"] == "delete") {
        var sqlDelPackage = @"
            DELETE  ProviderPackage
            WHERE   ProviderPackageID = @0
                    AND ProviderUserID = @1
                    AND PositionID = @2

            -- Test Alert
            EXEC TestAlertPricingDetails @1, @2
        ";
        using (var db = Database.Open("sqlloco")) {
            db.Execute(sqlDelPackage, data.ID, data.ProviderUserID, data.PositionID);

            LcHelpers.ReturnJsonResult(0, config.SuccessOnDelete);
        }
    }
    
    // Common validation rules
    Validation.RequireField("package-name", LcRessources.RequiredField("Package name"));
    Validation.RequireField("package-description", LcRessources.RequiredField("Description"));
    Validation.Add("package-name", Validator.StringLength(50, 0, "Package/product/service name must be fewer than 50 characters."));
    Validation.Add("package-description", Validator.StringLength(1000, 0, "Package/product/service description must be fewer than 1000 characters."));
    // Depending on config validation rules
    if (config.PriceLabel != null) {
        Validation.RequireField("price", LcRessources.RequiredField("Price"));
        Validation.Add("price", Validator.Decimal("Price must be a number not contain the $ symbol."));
    }
    if (config.DurationLabel != null) {
        Validation.RequireField("minutes", LcRessources.RequiredField("Session duration in minutes"));
        Validation.Add("minutes", Validator.Integer("Session duration in minutes must be a number without decimals"));
    }   
    if (config.NumberOfSessionsLabel != null) {
        Validation.RequireField("sessions-number", LcRessources.RequiredField("Number of sessions"));
        Validation.Add("sessions-number", Validator.Integer("Number of sessions must be a number without decimals"));
    }

    // Saving:
    if (IsPost) {
        
        // Setting up data (will be used to be saved or to display form errors)
        data.LanguageID = LcData.GetCurrentLanguageID();
        data.CountryID = LcData.GetCurrentCountryID();
        data.Name = Request["package-name"];
        data.Description = Request["package-description"];
        data.Price = Request["price"].AsDecimal();
        data.Duration = TimeSpan.FromMinutes(Request["minutes"].AsInt());
        data.FirstTimeClientsOnly = Request["first-time-clients-only"].AsBool();
        {
            var nses = Request["sessions-number"].AsInt(1);
            if (nses < 1) { nses = 1; }
            data.NumberOfSessions = nses;
        }
        data.PriceRate = (config.PriceRateQuantityLabel == null || Request["no-price-rate"].AsBool()) ? null : (decimal?)Request["price-rate"].AsDecimal();
        data.PriceRateUnit = (config.PriceRateQuantityLabel == null || Request["no-price-rate"].AsBool()) ? null : Request["price-rate-unit"];
        data.IsPhone = (Request["inpersonphone"] == "phone");
        var checkedAtts = Request.Form.GetValues("package-service-attribute");
        if (config.IncludeServiceAttributes &&
            checkedAtts != null && 
            checkedAtts.Length > 0) {
            foreach (var att in checkedAtts) {
                int attId = att.AsInt();
                if (attId > 0) {
                    data.ServiceAttributes.Add(attId);
                }
            }
        }
        // Some manual validations
        // Require price-rate and unit if is in config and not checked 'no-price-rate'
        if (config.PriceRateQuantityLabel != null && !Request["no-price-rate"].AsBool() && data.PriceRate <= 0) {
            ModelState.AddError("price-rate", config.PriceRateIsRequiredValidationError);
        }
        if (config.PriceRateUnitLabel != null && !Request["no-price-rate"].AsBool() && String.IsNullOrWhiteSpace(data.PriceRateUnit)) {
            ModelState.AddError("price-rate-unit", config.PriceRateUnitIsRequiredValidationError);
        }
        
        if (Validation.IsValid() && ModelState.IsValid) {
            var sqlSetPackage = @"
                DECLARE @PackageID int
                SET @PackageID = @0

                IF @PackageID = 0 BEGIN
                    INSERT INTO ProviderPackage (
                        PricingTypeID
                        ,ProviderUserID
                        ,PositionID
                        ,LanguageID
                        ,CountryID
                        ,ProviderPackageName
                        ,ProviderPackageDescription
                        ,ProviderPackagePrice
                        ,ProviderPackageServiceDuration
                        ,FirstTimeClientsOnly
                        ,NumberOfSessions
                        ,PriceRate
                        ,PriceRateUnit
                        ,IsPhone
                        ,CreatedDate
                        ,UpdatedDate
                        ,ModifiedBy
                        ,Active
                        ,IsAddon
                    ) VALUES (
                        @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, getdate(), getdate(), 'sys', @15, @16
                    )
                    SET @PackageID = @@Identity
                END ELSE
                    UPDATE ProviderPackage SET
                        ProviderPackageName = @6
                        ,ProviderPackageDescription = @7
                        ,ProviderPackagePrice = @8
                        ,ProviderPackageServiceDuration = @9
                        ,FirstTimeClientsOnly = @10
                        ,NumberOfSessions = @11
                        ,PriceRate = @12
                        ,PriceRateUnit = @13
                        ,IsPhone=@14
                        ,UpdatedDate = getdate()
                        ,ModifiedBy = 'sys'
                        ,Active = @15
                        ,IsAddon = @16
                    WHERE ProviderPackageID = @PackageID

                -- Test Alert
                EXEC TestAlertPricingDetails @2, @3

                SELECT @PackageID As ProviderPackageID
            ";
            var sqlDelDetails = @"
                DELETE FROM ProviderPackageDetail
                WHERE ProviderPackageID = @0
            ";
            var sqlSetDetail = @"
                BEGIN TRAN
                    UPDATE  ProviderPackageDetail WITH (serializable)
                    SET     Active = 1,
                            UpdatedDate = getdate(),
                            ModifiedBy = 'sys'
                    WHERE   ProviderPackageID = @0 AND ServiceAttributeID = @1

                    IF @@rowcount = 0
                    BEGIN
                        INSERT INTO ProviderPackageDetail (
                            ProviderPackageID, ServiceAttributeID, 
                            CreatedDate, UpdatedDate, 
                            ModifiedBy, Active)
                        VALUES (@0, @1, getdate(), getdate(), 'sys', 1)
                    END
                COMMIT TRAN
            ";
            var sqlSetServiceAttribute = @"
                /* Difference of this SQL to the used in 'Services' tab is that there a specific
                   categoryID is passed, here we don't know that category, we assign the first
                   found (enough to show attribute in services tab as checked) in a EligibleForPackages
                   category in that the attribute is */
                BEGIN TRAN
                    UPDATE  userprofileserviceattributes WITH (serializable)
                    SET     Active = 1,
                            UpdatedDate = getdate(),
                            ModifiedBy = 'sys'
                    WHERE   UserId = @0 AND PositionID = @1
                             -- NO filter by category on update here: AND ServiceAttributeCategoryID = @--2
                             AND ServiceAttributeID = @2
                             AND LanguageID = @3 AND CountryID = @4

                    IF @@rowcount = 0
                    BEGIN
                        INSERT INTO userprofileserviceattributes (UserID,
                            PositionID, ServiceAttributeCategoryID, ServiceAttributeID, LanguageID, CountryID, CreateDate, UpdatedDate, 
                            ModifiedBy, Active)
                        VALUES (@0, @1, 
                            /* category select first for attribute */
                            (SELECT TOP 1 a.ServiceAttributeCategoryID FROM 
                                servicecategorypositionattribute as a
                                 INNER JOIN
                                serviceattributecategory As sc
                                  ON a.ServiceAttributeCategoryID = sc.ServiceAttributeCategoryID
                                    AND a.LanguageID = sc.LanguageID AND a.CountryID = sc.CountryID
                             WHERE a.PositionID = @1
                                AND sc.EligibleForPackages = 1
                                AND a.Active = 1
                                AND sc.Active = 1
                                AND a.LanguageID = @3
                                AND a.CountryID = @3
                                -- THIS ATTRIBUTE IS IN!
                                AND a.ServiceAttributeID = @2),
                            @2, @3, @4, getdate(), getdate(), 'sys', 1)
                    END
                COMMIT TRAN
            ";
            
            var beforePositionStatuses = LcData.UserInfo.GetUserPositionsStatuses((int)p.UserID);
            
            using (var db = Database.Open("sqlloco")) {
                data.ID = db.QueryValue(sqlSetPackage,
                    data.ID,
                    data.PricingTypeID,
                    data.ProviderUserID,
                    data.PositionID, 
                    data.LanguageID,
                    data.CountryID,
                    data.Name,
                    data.Description,
                    data.Price,
                    data.Duration.TotalMinutes,
                    data.FirstTimeClientsOnly,
                    data.NumberOfSessions,
                    data.PriceRate,
                    data.PriceRateUnit,
                    data.IsPhone,
                    1, // Active
                    config.IsAddon
                );
                if (config.IncludeServiceAttributes) {
                    db.Execute(sqlDelDetails, data.ID);
                    foreach(var att in data.ServiceAttributes) {
                        // Add to the package
                        db.Execute(sqlSetDetail,
                            data.ID,
                            att
                        );
                        // Add to the list of 'service tab' selected attributes (on one of the categories in that the attribute is)
                        db.Execute(sqlSetServiceAttribute,
                            data.ProviderUserID,
                            data.PositionID,
                            att,
                            data.LanguageID,
                            data.CountryID
                        );
                    }
                }
            }
        
            // Show the profile activation popup with 'next-step' buttons and progress information when need,
            // if not the short message is showed:
            if (!LcHelpers.UseProfileActivationPopup(beforePositionStatuses,
                p.UserID,
                LcRessources.DataSaved,
                config.SuccessOnSave))
            {
                LcHelpers.ReturnJsonResult(5, LcRessources.ShortDataSaved);
            }
        }
    }
    
    // GET:: Load data for the given parameters
    dynamic attributes = null;
    using (var db = Database.Open("sqlloco")) {
        if (!IsPost && data.ID > 0) {
            var package = db.QuerySingle(@"
                SELECT  p.ProviderPackageID As ID
                        ,p.PricingTypeID
                        ,p.ProviderPackageName As Name
                        ,p.ProviderPackageDescription As Description
                        ,p.ProviderPackagePrice As Price
                        ,p.ProviderPackageServiceDuration As ServiceDuration
                        ,p.FirstTimeClientsOnly
                        ,p.NumberOfSessions
                        ,p.ProviderUserID
                        ,p.PositionID
                        ,p.PriceRate
                        ,p.PriceRateUnit
                        ,p.IsPhone
                FROM    providerpackage As p
                WHERE   p.ProviderPackageID = @0
                         AND
                        p.PricingTypeID = @1
                         AND
                        p.LanguageID = @2 AND p.CountryID = @3
                         AND 
                        p.Active = 1
            ", data.ID, data.PricingTypeID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
            // Load package data into data, including preset fields as PositionID or PricingTypeID
            if (package != null) {
                data.ID = package.ID;
                data.PricingTypeID = package.PricingTypeID;
                data.ProviderUserID = package.ProviderUserID;
                data.PositionID = package.PositionID;
                data.Name = package.Name;
                data.Description = package.Description;
                data.Price = package.Price;
                data.Duration = TimeSpan.FromMinutes(package.ServiceDuration);
                data.FirstTimeClientsOnly = package.FirstTimeClientsOnly;
                data.NumberOfSessions = package.NumberOfSessions;
                data.PriceRate = package.PriceRate;
                data.PriceRateUnit = package.PriceRateUnit;
                data.IsPhone = package.IsPhone;
            }
            // getting attributes included in this package
            var packagesdetails = db.Query(@"
                SELECT  PD.ServiceAttributeID
                FROM    ProviderPackageDetail As PD
                WHERE   PD.ProviderPackageID = @0
                         AND PD.Active = 1
            ", data.ID);
            if (packagesdetails != null) {
                foreach(var pakatt in packagesdetails) {
                    data.ServiceAttributes.Add(pakatt.ServiceAttributeID);
                }
            }
        }
        // Getting full attributes for the position (all categories)
        attributes = db.Query(@"EXEC GetServiceAttributes @0,@1,@2,@3,@4",
            data.PositionID, 0, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID(), p.UserID);
    }
}
<form method="post" class="ajax ajax-box provider-package crudl-form" action="@(LcUrl.LangPath)PricingWizard/$PackageBaseEdit/?ProviderPackageID=@(data.ID)&PositionID=@(data.PositionID)&PricingTypeID=@(data.PricingTypeID)">
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="package-data">
        <label>
            <span class="label-text">@config.NamePlaceHolder</span>
            <input class="package-name" type="text" name="package-name" placeholder="@config.NamePlaceHolder" value="@(Request["package-name"] ?? data.Name)" />
        </label>
        @if (config.NumberOfSessionsLabel != null)
        {
            <label class="package-sessions">@(config.NumberOfSessionsLabel)
                <input type="text" name="sessions-number" value="@(Request["sessions-number"] ?? data.NumberOfSessions.ToString())" />
            </label>
        }
        <label class="package-price">@config.PriceLabel 
            <input type="text" name="price" value="@(Request["price"] ?? data.Price.ToString())" />
            @if (config.PriceNote != null) {
                <span class="price-note">@config.PriceNote</span>
            }
        </label>
        @if (config.DurationLabel != null)
        {
            <label class="package-duration">@config.DurationLabel
                <input type="text" name="minutes" value="@(Request["minutes"] ?? data.Duration.TotalMinutes.ToString())" /> minutes
            </label>
        }
        @if (config.InPersonPhoneLabel != null){
            <div class="inperson-phone">
                @config.InPersonPhoneLabel
                <label><input type="radio" name="inpersonphone" value="inperson" @LcHelpers.IsChecked("inperson", Request["inpersonphone"] ?? (data.IsPhone ? "phone" : "inperson")) /> in-person</label>
                <label><input type="radio" name="inpersonphone" value="phone" @LcHelpers.IsChecked("phone", Request["inpersonphone"] ?? (data.IsPhone ? "phone" : "inperson")) /> phone</label>
            </div>
        }
        @if (config.FirstTimeClientsOnlyLabel != null)
        {
            <label class="only-first-time-clients">
                <input type="checkbox" name="first-time-clients-only" value="True" @LcHelpers.IsChecked(true, Request["first-time-clients-only"] ?? data.FirstTimeClientsOnly.ToString()) />
                @config.FirstTimeClientsOnlyLabel
            </label>
        }
        <label class="package-description">
            <span class="label-text">@(config.DescriptionPlaceHolder)</span>
            <textarea name="package-description" placeholder="@config.DescriptionPlaceHolder">@(Request["package-description"] ?? data.Description)</textarea>
        </label>
    </fieldset>
    @if (config.IncludeServiceAttributes)
    {
        // Splitting attributes in two blocks, checking if there are something
        var preCheckedAttributes = new List<dynamic>();
        var notCheckedAttributes = new List<dynamic>();

        if (attributes != null)
        {
            foreach (var att in attributes)
            {
                if (att.EligibleForPackages)
                {
                    if (att.UserChecked)
                    {
                        preCheckedAttributes.Add(att);
                    }
                    else
                    {
                        notCheckedAttributes.Add(att);
                    }
                }
            }
        }
        if (preCheckedAttributes.Count > 0 || notCheckedAttributes.Count > 0)
        {
            <fieldset class="package-details">
                <h5>Included services (you can add these if you think it will add clarity for the client):</h5>
                <ul class="provider-package-services">
                @foreach (var att in (preCheckedAttributes.Count > 0 ? preCheckedAttributes : notCheckedAttributes))
                {
                    <li title="@att.ServiceAttribute" data-description="@att.ServiceAttributeDescription">
                        <label><input name="package-service-attribute" type="checkbox" @LcHelpers.IsChecked(true, data.ServiceAttributes.Contains(att.ServiceAttributeID)) value="@att.ServiceAttributeID" /> @att.ServiceAttribute</label>
                    </li>
                }
                </ul>
                @if (preCheckedAttributes.Count > 0 && notCheckedAttributes.Count > 0)
                {
                    <a href="#show-more-attributes" class="show-more-attributes" data-hide-text="Show fewer service options">Show more service options</a>
                    <ul class="provider-package-services services-not-checked">

                    @foreach (var att in notCheckedAttributes)
                    {
                        <li title="@att.ServiceAttribute" data-description="@att.ServiceAttributeDescription">
                            <label><input name="package-service-attribute" type="checkbox" @LcHelpers.IsChecked(true, data.ServiceAttributes.Contains(att.ServiceAttributeID)) value="@att.ServiceAttributeID" /> @att.ServiceAttribute</label>
                        </li>
                    }
                    </ul>
                }
            </fieldset>
        }
    }
    @if(config.PriceRateQuantityLabel != null)
    {
        <fieldset class="fs-price-rate">
            <label class="price-rate">@config.PriceRateQuantityLabel @LcRessources.MoneySymbolPrefix <input type="text" name="price-rate" value="@(Request["price-rate"] ?? (dynamic)data.PriceRate)" /> @LcRessources.MoneySymbolSufix</label>
            @if(config.PriceRateUnitLabel != null)
            {
                <label class="price-rate-unit">@config.PriceRateUnitLabel <input type="text" name="price-rate-unit" value="@(Request["price-rate-unit"] ?? data.PriceRateUnit)" /></label>
            }
            @if (config.PriceRateLearnMoreLabel != null && config.PriceRateLearnMoreText != null)
            {
                <div class="price-rate-learn-more learn-more">
                    <span data-tooltip-url="#price-rate-learn-more-@config.SlugName">(@config.PriceRateLearnMoreLabel)</span>
                    <div class="popups"><div id="price-rate-learn-more-@config.SlugName">
                        @config.PriceRateLearnMoreText
                    </div></div>
                </div>
            }
            @if(config.NoPriceRateLabel != null) {
                <div class="no-price-rate">
                    <label>@config.NoPriceRateLabel <input type="checkbox" name="no-price-rate" value="True" @LcHelpers.IsChecked(true, new object[]{Request["no-price-rate"], !(data == null || data.ID == 0 || data.PriceRate != null)}) /></label>
                    @if (config.NoPriceRateLearnMoreLabel != null && config.NoPriceRateLearnMoreText != null)
                    {
                        <div class="no-price-rate-learn-more learn-more">
                            <span data-tooltip-url="#no-price-rate-learn-more-@config.SlugName">(@config.NoPriceRateLearnMoreLabel)</span>
                            <div class="popups"><div id="no-price-rate-learn-more-@config.SlugName">
                                @config.NoPriceRateLearnMoreText
                            </div></div>
                        </div>
                    }
                </div>
            }
        </fieldset>
    }
    @if(config.LearnMoreLabel != null && config.LearnMoreText != null)
    {
        <div class="learn-more">
            <span data-tooltip-url="#learn-more-@config.SlugName">@config.LearnMoreLabel</span>
            <div class="popups"><div id="learn-more-@config.SlugName">
                @config.LearnMoreText
            </div></div>
        </div>
    }
    <fieldset class="actions">
        <button type="button" class="button cancel-action crudl-cancel">Cancel</button>
        <button class="button main-action crudl-save">Save</button>
    </fieldset>
    <script type="text/javascript">
        // Update state of price-rate fields
        $('.dashboard [name=no-price-rate]').change();
    </script>
</form>