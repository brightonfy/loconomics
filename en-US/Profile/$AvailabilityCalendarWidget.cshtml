@using WebMatrix.Data;
@* Widget with the User (normally providers) Availability Calendar, showing the calendar itself, 
    the calendar legend and optionally a div wrapper around the elements 
    (by default true; if false, this widget must be placed inside an element with the 
    required css class 'availability-calendar', to allo css styles work fine).
*@
@{
    bool hasWrapper = true, hasLegend = true, hasControls = true, onlyData = false, hasZoom;
    int userID = 0;
    
    userID = PageData["AvailabilityCalendar.UserID"] ?? Request["UserID"].AsInt();
    hasWrapper = PageData["AvailabilityCalendar.HasWrapper"] ?? (N.W(Request["HasWrapper"]) ?? "true").AsBool();
    hasLegend = PageData["AvailabilityCalendar.HasLegend"] ?? (N.W(Request["HasLegend"]) ?? "true").AsBool();
    hasControls = PageData["AvailabilityCalendar.HasControls"] ?? (N.W(Request["HasControls"]) ?? "true").AsBool();
    hasZoom = PageData["AvailabilityCalendar.HasZoom"] ?? (N.W(Request["HasZoom"]) ?? "false").AsBool();
   
    DateTime date = DateTime.Today;
    
    if (UrlData.Count > 1 && UrlData[0] == "Week") {
        var sd = UrlData[1];
        if (!string.IsNullOrWhiteSpace(sd)) {
            var sparts = sd.Split('-');
            if (sparts.Length == 3) {
                date = new DateTime(sparts[0].AsInt(), sparts[1].AsInt(), sparts[2].AsInt());
            }
        }
        onlyData = true;
    }
    
    // We want show the week, start with the first date
    date = LcHelpers.GetFirstWeekDay(date);
    
    /*// If onlyData is true let us know that 'date' is a date specified by user; if not, is current
    // day automatically, let us try to discover when is the first available date to show that week:
    if (!onlyData) {
        using (var db = Database.Open("sqlloco")) {
            // we limit the loops to avoid never ending code and excesive load time.
            int loopsLimit = 4, iLoop = 1;
            bool available = false;
            DateTime endWeek = date;
            while (!available) {
                // endWeek is just the next first week day at 00:00 hours to just get the last week day full hours.
                endWeek = date.AddDays(7);
                available = (bool)db.QueryValue(@"
                    -- Look for almost one timeblock available on the date-range (as opposite to CheckProviderAvailability):
                    IF EXISTS (SELECT	*
	                    FROM	dbo.GetProviderAvailabilityByDateRange( @0, Cast(@1 As date), Cast(@2 As date) ) As A
	                    WHERE	
			                    CalendarAvailabilityTypeID IN (1, 3) AND -- Is available for booking (free or tentative)
			                    (   (DateSet + cast(TimeBlock as datetime)) >= @1
			                    AND (DateSet + cast(TimeBlock as datetime)) < @2
			                    )
                    )
	                    SELECT CAST(1 As bit)
                    ELSE
	                    SELECT CAST(0 As bit)
                    ",
                    userID, date, endWeek);
                if (!available) {
                    date = endWeek;
                }
                if (iLoop++ >= loopsLimit){
                    break;
                }
            }
        }
    }*/

    var availData = PageData["availData"] = new Dictionary<string,int>();
    foreach (var ev in LcCalendar.GetUserAvailability(userID, date, LcHelpers.GetLastWeekDay(date))) {
        availData[ev.DayOfWeek.ToString() + ":" + ev.TimeBlock.ToString()] = ev.CalendarAvailabilityTypeID;
    }

    // Classes for differents calendar availability states
    var stateClasses = new List<string>(){"unavailable", "free", "busy", "tentative"};
    // states order/id's changed because the new sql-proc 'availabilityfullset', unavailable now is zero.
    //var stateClasses = new List<string>(){"free", "busy", "tentative", "unavailable"};
    Random r = new Random();
    
    var wrapperStart = hasWrapper ? "<div class='availability-calendar'>" : "";
    var wrapperEnd = hasWrapper ? "</div>" : "";
}
@functions{
    int GetAvailDataIn(int dayOfWeek, TimeSpan timeblock){
        var availData = (Dictionary<string,int>)PageData["availData"];
        string key = dayOfWeek.ToString() + ":" + timeblock.ToString();
        if (availData.ContainsKey(key) ) {
            return availData[key]; // - 1;
        } else {
            return 3; //unavailable index
        }
    }
}
@if (!onlyData) {
    @Html.Raw(wrapperStart)
}
    @if (!onlyData) { @Html.Raw("<div class='calendar-container'>") }
    <div class="calendar" data-showed-date="@date.ToString("R")" data-user-id="@userID" data-showed-week="@LcHelpers.GetWeekOfTheYear(date)" data-showed-first-day="@date.ToShortDateString()" data-showed-last-day="@LcHelpers.GetLastWeekDay(date).ToShortDateString()">
        <ol class="days"><li><h5>S</h5></li><li><h5>M</h5></li><li><h5>T</h5></li><li><h5>W</h5></li><li><h5>T</h5></li><li><h5>F</h5></li><li><h5>S</h5></li></ol>
        <ol class="hours">@for(var h = 7; h < 23; h++)
                {<li><h5>@((new DateTime(2000, 1, 1, h, 0, 0)).ToString("ht"))</h5></li>}</ol>
        <ol class="datetimes">@for(var h = 7; h < 23; h++){
            for(var b = 0; b < 2; b++){
                var half = b == 0 ? "" : "half ";
                for(var d = 1; d < 8; d++)
                {<li class="@half@stateClasses[GetAvailDataIn(d, new TimeSpan(h, (b==0?0:30), 0))]"></li>}
            }}</ol>
    </div>
    @if (!onlyData) { @Html.Raw("</div>") }
    @if (!onlyData && hasLegend) {
    <ul class="calendar-legend">
        <li class="free"><span class="color">Green</span>Free</li>
        <li class="busy"><span class="color">Purple</span>Busy</li>
        <li class="tentative"><span class="color">Yellow</span>Tentative</li>
        <li class="unavailable"><span class="color">White</span>Unavailable</li>
    </ul>
    }
    @if (!onlyData)
    {
        <div class="calendar-info">
            @*<span class="year-week-label">Showing week <span class="year-week">@(LcHelpers.GetWeekOfTheYear(date))</span></span>*@
            <div class="week-days-label">
                Showing week from day <span class="first-week-day">@LcHelpers.GetFirstWeekDay(date).ToShortDateString()</span> to <span class="last-week-day">@LcHelpers.GetLastWeekDay(date).ToShortDateString()</span>
            </div>
            @if (hasControls) {
            <div class="calendar-controls">
                <a href="#" class="action previous-week-action">previous week</a>
                <a href="#" class="action next-week-action">next week</a>
                @if (hasZoom)
                {<a href="#" class="action zoom-action">Enlarge</a>}
            </div>
            }
        </div>
    }
@if (!onlyData)
{
    @Html.Raw(wrapperEnd)
}