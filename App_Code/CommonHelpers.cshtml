@{/**
  * Set of common, general helpers
  * used around all the site
  */
}
@helper CountryOptions(){
    <option value="ca">California</option>
}
@helper SetupStarRatingPlugin(){
    <script type="text/javascript">
        Modernizr.load([
            "http://jquery-star-rating-plugin.googlecode.com/svn/trunk/jquery.MetaData.js",
            "http://jquery-star-rating-plugin.googlecode.com/svn/trunk/jquery.rating.js",
            "http://jquery-star-rating-plugin.googlecode.com/svn/trunk/jquery.rating.css"
        ]);
    </script>
}
@helper GetValidationScripts(){
    <script type="text/javascript">
        if (!jqueryValidateUnobtrusiveLoaded) var jqueryValidateUnobtrusiveLoaded = false;
        if (!jqueryValidateUnobtrusiveLoaded) {
            jqueryValidateUnobtrusiveLoaded = true;
            Modernizr.load([
            { load: UrlUtil.AppPath + "Scripts/jquery.validate.min.js" },
            { load: UrlUtil.AppPath + "Scripts/jquery.validate.unobtrusive.min.js" }
            ]);
        } else {
            // Apply the validation rules to the new elements
            $(document).removeData('validator');
            $(document).removeData('unobtrusiveValidation');
            $.validator.unobtrusive.parse(document);
        }
    </script>
}
@functions{
    /*========= JSON =============*/
    
    public static void ReturnJson(object jsondata){
        Response.ContentType = "application/json";
        Json.Write(jsondata, Response.Output);
        Response.End();
    }
    public static void ReturnJsonError(int code, string errorMessage)
    {
        if (code >= 0)
            ReturnJsonResult(code, errorMessage);
        else
            ReturnJsonResult(code, new Dictionary<string, string>(){ { "ErrorMessage", errorMessage } });
    }
    public static void ReturnJsonResult(int code, object result)
    {
        ReturnJson(new Dictionary<string, object>(){
            { "Code", code }, { "Result", result } 
        });
    }
    
    /*========= SECURITY ==========*/
    /* Ensure that only register users enter here, redirecting to login page when appropiated.
    */
    public static void SecurePage() {
        if (!WebSecurity.IsAuthenticated)
            Response.Redirect(UrlUtil.LangPath + "Account/Login/?Redirect=" + Context.Server.UrlEncode(System.Web.HttpContext.Current.Request.Url.PathAndQuery));
    }
    
    
    
    
    
}