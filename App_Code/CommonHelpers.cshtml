@{/**
  * Set of common, general helpers
  * used around all the site
  */
}
@using WebMatrix.WebData;
@using WebMatrix.Data;
@helper CountryOptions(){
    <option value="ca">California</option>
}
@helper StateProvinceOptions(int selectedStateID){
    var sql = @"
        SELECT StateProvinceID, StateProvinceName
        FROM    StateProvince
        WHERE   CountryID=@0
    ";
    using (var db = Database.Open("sqlloco")){
        foreach (var state in db.Query(sql, 1)){
            <option value="@state.StateProvinceID" @IsSelected(selectedStateID.ToString(), state.StateProvinceID.ToString())>@state.StateProvinceName</option>
        }
    }
}
@helper IsChecked(string value1, string value2){
    @Html.Raw(value1 == value2 ? "checked='checked'" : "")
}
@helper IsSelected(string value1, string value2){
    @Html.Raw(value1 == value2 ? "selected='selected'" : "")
}
@helper SetupStarRatingPlugin(){
    <script type="text/javascript">
        if (!jqueryStarRatingPluginLoaded) var jqueryStarRatingPluginLoaded = false;
        if (!jqueryStarRatingPluginLoaded) {
            jqueryStarRatingPluginLoaded = true;
            Modernizr.load([
                UrlUtil.AppPath + "Scripts/star-rating/jquery.MetaData.js",
                UrlUtil.AppPath + "Scripts/star-rating/jquery.rating.pack.js",
                UrlUtil.AppPath + "Scripts/star-rating/jquery.rating.css"
            ]);
        } else {
            if ($ && $().rating)
                // Re-apply plugin (to new added elements without the plugin loaded):
                $('input[type=radio].star').rating();
        }
    </script>
}
@helper GetValidationScripts(){
    <script type="text/javascript">
        if (!jqueryValidateUnobtrusiveLoaded) var jqueryValidateUnobtrusiveLoaded = false;
        if (!jqueryValidateUnobtrusiveLoaded) {
            jqueryValidateUnobtrusiveLoaded = true;
            Modernizr.load([
            { load: UrlUtil.AppPath + "Scripts/jquery.validate.min.js" },
            { load: UrlUtil.AppPath + "Scripts/jquery.validate.unobtrusive.min.js" }
            ]);
        } else {
            // Check first if validation is enabled (can happen that twice includes of
            // this code happen at same page, being executed this code after first appearance
            // with the switch jqueryValidateUnobtrusiveLoaded changed
            // but without validation being already loaded and enabled)
            if ($ && $.validator && $.validator.unobtrusive) {
                // Apply the validation rules to the new elements
                $(document).removeData('validator');
                $(document).removeData('unobtrusiveValidation');
                $.validator.unobtrusive.parse(document);
            }
        }
    </script>
}
@functions{
    /*========= JSON =============*/
    
    public static void ReturnJson(object jsondata){
        Response.ContentType = "application/json";
        Json.Write(jsondata, Response.Output);
        Response.End();
    }
    public static void ReturnJsonError(int code, string errorMessage)
    {
        if (code >= 0)
            ReturnJsonResult(code, errorMessage);
        else
            ReturnJsonResult(code, new Dictionary<string, string>(){ { "ErrorMessage", errorMessage } });
    }
    public static void ReturnJsonResult(int code, object result)
    {
        ReturnJson(new Dictionary<string, object>(){
            { "Code", code }, { "Result", result } 
        });
    }
    
    /*========= SECURITY ==========*/
    /* Ensure that only register users enter here, redirecting to login page when appropiated.
     * If request is an ajax request, a json object will be return in the response with code=2
     * that means un-authenticated and a Result string with the ajax login url.
    */
    public static void SecurePage() {
        if (!WebSecurity.IsAuthenticated)
            if (Request.IsAjaxRequest())
                ReturnJsonResult(2, UrlUtil.LangPath + "Account/$Login/?ajax=1&Redirect=" + Server.UrlEncode(Request.UrlReferrer.PathAndQuery));
            else
                Response.Redirect(UrlUtil.LangPath + "Account/Login/?Redirect=" + Server.UrlEncode(Request.Url.PathAndQuery));
    }
}