
@* 
 * View Helpers
 *@
@helper getChecked(string name, string value, dynamic poptvar){
    if (IsPost) {
        @Html.Raw(Request[name] == value ? "checked='checked'" : "")
    } else {
        @Html.Raw(poptvar.CustomerDataInputValue != null ? "checked='checked'" : "")
    }
}
@helper getSelected(string name, string value, dynamic poptvar){
    if (IsPost) {
        @Html.Raw(Request[name] == value ? "selected='selected'" : "")
    } else {
        @Html.Raw(poptvar.CustomerDataInputValue == value ? "selected='selected'" : "")
    }
}

@*
 * VIEWS, implemented as helpers
 *@

@helper Services(dynamic viewData, dynamic services) {
    var attributes = Request.Form.GetValues("positionservices-attributes");
    
    foreach (var cat in services)
    {
        <ul>
            @foreach(var att in cat.Value["ServiceAttributes"]){
                if(att.UserChecked) {
                    <li>
                        <label title="@att["ServiceAttribute"]" data-description="@att["ServiceAttributeDescription"]"><input type="checkbox" @LcHelpers.IsChecked(true, (attributes == null ? false : attributes.Contains(((int)att["ServiceAttributeID"]).ToString()))) value="@att["ServiceAttributeID"]" name="positionservices-attributes"/>@att["ServiceAttribute"]</label>
                    </li>
                }
            }
        </ul>
    }
}

@helper Variables(dynamic viewData, dynamic pvars) {
    var idprefix = "pricingwizard";

    <ul class="pricing-vars">
    @foreach (var pvar in pvars)
    {
        <li class="@pvar.PricingVariableName data-type-@pvar.CustomerDataInputType">
            <label for="@idprefix-@pvar.PricingVariableName">@pvar.CustomerPricingVariableDisplayText</label>
            @switch ((string)@pvar.CustomerDataInputType)
            {
                case "dropdown":
                    <select id="@idprefix-@pvar.PricingVariableName" name="@pvar.PricingVariableName">
                        @{
                            var optvalues = LcHelpers.GetValuesFromCSVLine(pvar.CustomerDataValues);
                            foreach (string optv in optvalues)
                            {
                                var v = optv.Trim();
                                <option value="@v" @getSelected(pvar.PricingVariableName, v, pvar)>@v</option>
                            }
                        }
                    </select>
                    break;
                case "number":
                case "text":
                    <input type="text" id="@idprefix-@pvar.PricingVariableName" name="@pvar.PricingVariableName" value="@(Request[pvar.PricingVariableName] ?? pvar.CustomerDataInputValue)"/>
                    break;
                case "":
                    break;
                default:
                    <text>Unknowed CustomerDataInputType: @pvar.CustomerDataInputType</text>
                    break;
            }
        </li>
    }
    </ul>
}

@helper Options(dynamic viewData, dynamic poptions, LcPricingModel.PricingModelData modelData) {
    var idprefix = "pricingwizard";
    Dictionary<int, decimal> optionalServicesPrices = null;
    if (modelData != null) {
        optionalServicesPrices = modelData.Data["OptionalServicesPrices"];
    }
    if (optionalServicesPrices ==  null) {
        // Create empty dictionary to avoid additional checks in the view
        optionalServicesPrices = new Dictionary<int, decimal>();
    }

    <table class="pricing-options calculate-items-totals calculate-summary-group" data-calculation-summary-group="options">
        <thead>
            <tr>
                <th></th>
                <th class="name">Name</th>
                <th class="duration number">Duration</th>
                <th class="number">Item Price</th>
                <th class="number">Quantity</th>
                <th class="number">Total Price</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var popt in poptions)
        {
            <tr class="@popt.PricingOptionName data-type-@popt.CustomerDataInputType">
                <td><input type="checkbox" class="calculate-item-checked" name="@popt.PricingOptionName-check" id="@idprefix-@popt.PricingOptionName-check" @getChecked(popt.PricingOptionName + "-check", "true", popt) value="true" /></td>
                <td class="pricing-option-check name">
                    <label for="@idprefix-@popt.PricingOptionName-check">@popt.CustomerPricingOptionDisplayText</label>
                </td>
                <td class="pricint-option-duration duration">@popt.ProviderTimeRequired minutes</td>
                <td class="pricing-option-item-price number money calculate-item-price">@popt.ProviderDataInputValue</td>
                <td class="pricing-option-quantity number">
                @switch ((string)@popt.CustomerDataInputType)
                {
                    case "dropdown":
                        <select id="@idprefix-@popt.PricingOptionName" name="@popt.PricingOptionName" class="calculate-item-quantity">
                            @{
                                var optvalues = LcHelpers.GetValuesFromCSVLine(popt.CustomerDataValues);
                                foreach (string optv in optvalues)
                                {
                                    var v = optv.Trim();
                                    <option value="@v" @getSelected(popt.PricingOptionName, v, popt)>@v</option>
                                }
                                }
                        </select>
                        break;
                    case "number":
                    case "text":
                        <input type="text" class="calculate-item-quantity" id="@idprefix-@popt.PricingOptionName" name="@popt.PricingOptionName" value="@(Request[popt.PricingOptionName] ?? popt.CustomerDataInputValue)"/>
                        break;
                    case "":
                        <text>N/A</text>
                        break;
                    default:
                        <text>Unknown CustomerDataInputType: @popt.CustomerDataInputType</text>
                        break;
                }
                </td>
                <td class="pricing-option-total-price calculated number money">
                    <span class="calculate-item-total">@((optionalServicesPrices.ContainsKey(popt.PricingOptionID) ? optionalServicesPrices[popt.PricingOptionID] : 0).ToString("c"))</span>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@helper PricingSummary(dynamic viewData, LcPricingModel.PricingModelData summary, decimal hourPrice) {
    // TODO: re-do with summary-groups on rows instead current timerequired and optionalservices, groups
    // per variables, options, packages, addons like in current packages summary

    <div class="calculate-price-button actions">
        <button class="button action calculate-price-button ajax-fieldset-submit">Calculate</button>
    </div>
    <div class="calculation">
        <table class="calculation">
            <tr><th>Time required:</th><td class="time-required">@(summary.ServiceDuration.ToString("c")) hour(s)</td></tr>
            <tr>
                <th><span class="time-required">@summary.ServiceDuration.ToString("c") hour(s)</span> @@ <span class="hour-price">@hourPrice.ToString("c")</span></th>
                <td class="subtotal-price">@summary.SubtotalPrice.ToString("c")</td>
            </tr>
            @*<tr>
                <th>Optional Services</th>
                <td class="optional-services">@summary.optionalServicesTotalPrice.ToString("c")</td>
            </tr>*@
            <tr>
                <th>Loconomics service fee:</th>
                <td class="fee-price">@summary.FeePrice.ToString("c")</td>
            </tr>
            <tr>
                <th>Total price:</th>
                <td class="total-price">@summary.TotalPrice.ToString("c")</td>
            </tr>
        </table>
    </div>
}
