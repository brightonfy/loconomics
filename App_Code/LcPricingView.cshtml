
@* 
 * View Helpers
 *@
@helper getChecked(string name, string value, dynamic poptvar){
    if (IsPost) {
        @Html.Raw(Request[name] == value ? "checked='checked'" : "")
    } else {
        @Html.Raw(poptvar.CustomerDataInputValue != null ? "checked='checked'" : "")
    }
}
@helper getSelected(string name, string value, dynamic poptvar){
    if (IsPost) {
        @Html.Raw(Request[name] == value ? "selected='selected'" : "")
    } else {
        @Html.Raw(poptvar.CustomerDataInputValue == value ? "selected='selected'" : "")
    }
}

@*
 * VIEWS, implemented as helpers
 *@

@helper Services(dynamic viewData, dynamic services) {
    var attributes = Request.Form.GetValues("positionservices-attributes");
    
    foreach (var cat in services)
    {
        <ul class="pricing-services">
            @foreach(var att in cat.Value["ServiceAttributes"]){
                if(att.UserChecked) {
                    <li>
                        <label title="@att["ServiceAttribute"]" data-description="@att["ServiceAttributeDescription"]"><input type="checkbox" @LcHelpers.IsChecked(true, (attributes == null ? false : attributes.Contains(((int)att["ServiceAttributeID"]).ToString()))) value="@att["ServiceAttributeID"]" name="positionservices-attributes"/>@att["ServiceAttribute"]</label>
                    </li>
                }
            }
        </ul>
    }
}

@helper Variables(dynamic viewData, dynamic pvars, decimal hourPrice, dynamic fee) {
    var idprefix = "pricingwizard";

    <table class="pricing-vars calculate-items-totals calculate-all-items calculate-summary-group" data-calculation-summary-group="variables">
    @foreach (var pvar in pvars)
    {
        var itemNumbers = LcPricingModel.GetVariableItemNumbers(pvar, hourPrice, fee);
        
        <tr class="@pvar.PricingVariableName data-type-@pvar.CustomerDataInputType">
            <td class="row-selection"></td>
            <td class="name"><label for="@idprefix-@pvar.PricingVariableName">@pvar.CustomerPricingVariableDisplayText</label></td>
            <td class="var-values">
                <span class="calculate-item-fee">@(String.Format("{0:c}", itemNumbers.FeePrice))</span>
                <span class="calculate-item-price">@((itemNumbers.TotalPrice).ToString("c"))</span>
                <span class="calculate-item-duration">@((itemNumbers.ServiceDuration).ToString("#.##"))</span>
                <span class="calculate-item-total">@((itemNumbers.TotalPrice).ToString("c"))</span>

                @switch ((string)@pvar.CustomerDataInputType)
                {
                    case "dropdown":
                        <select id="@idprefix-@pvar.PricingVariableName" class="calculate-item-quantity" name="@pvar.PricingVariableName">
                            @{
                                var optvalues = LcHelpers.GetValuesFromCSVLine(pvar.CustomerDataValues);
                                foreach (string optv in optvalues)
                                {
                                    var v = optv.Trim();
                                    <option value="@v" @getSelected(pvar.PricingVariableName, v, pvar)>@v</option>
                                }
                            }
                        </select>
                        break;
                    case "number":
                    case "text":
                        <input type="text" class="calculate-item-quantity" id="@idprefix-@pvar.PricingVariableName" name="@pvar.PricingVariableName" value="@(Request[pvar.PricingVariableName] ?? pvar.CustomerDataInputValue)"/>
                        break;
                    case "":
                        break;
                    default:
                        <text>Unknowed CustomerDataInputType: @pvar.CustomerDataInputType</text>
                        break;
                }
            </td>
        </tr>
    }
    </table>
    <div class="group-summary">
        Your total <span class="has-tooltip" title="What is an estimated cost?" data-description="Your housekeeper has an estimate for each of the variables listed above. We work to create a final cost and time estimate from the services you want performed. Of course, it’s an estimate. You and your provider will review the price before the work begins.">estimated cost</span>
         is <strong class="group-total-price">$0.00</strong> and the service will take approximately <strong class="group-total-duration">0.0</strong> hrs.
    </div>
}

@helper Options(dynamic viewData, dynamic poptions, LcPricingModel.PricingModelData modelData, dynamic fee) {
    var idprefix = "pricingwizard";
    Dictionary<int, LcPricingModel.PricingSummaryData> pricingOptionsNumbers = null;
    if (modelData != null) {
        pricingOptionsNumbers = modelData.Data["PricingOptionsNumbers"];
    }
    if (pricingOptionsNumbers ==  null) {
        // Create empty dictionary to avoid additional checks in the view
        pricingOptionsNumbers = new Dictionary<int, LcPricingModel.PricingSummaryData>();
    }

    <table class="pricing-options calculate-items-totals calculate-summary-group" data-calculation-summary-group="options">
        <thead>
            <tr>
                <th class="row-selection"></th>
                <th class="name">Name</th>
                <th class="duration number">Duration</th>
                <th class="number">Item Price</th>
                <th class="number">Quantity</th>
                <th class="number">Total Price</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var popt in poptions)
        {
            LcPricingModel.PricingSummaryData prices = null, unitPrices = null;
            unitPrices = LcPricingModel.GetOptionItemNumbers(popt, fee);
            if (pricingOptionsNumbers.ContainsKey(popt.PricingOptionID)) {
                prices = pricingOptionsNumbers[popt.PricingOptionID];
            } else {
                prices = unitPrices;
            }
            
            <tr class="@popt.PricingOptionName data-type-@popt.CustomerDataInputType">
                <td><input type="checkbox" class="calculate-item-checked" name="@popt.PricingOptionName-check" id="@idprefix-@popt.PricingOptionName-check" @getChecked(popt.PricingOptionName + "-check", "true", popt) value="true" /></td>
                <td class="pricing-option-check name">
                    <label for="@idprefix-@popt.PricingOptionName-check">@popt.CustomerPricingOptionDisplayText</label>
                </td>
                <td class="pricint-option-duration duration">@(prices.ServiceDuration == 0 ? "" : Math.Round(unitPrices.ServiceDuration * 60, 0).ToString() + " minutes")</td>
                <td class="pricing-option-item-price number money">
                    <span class="calculate-item-fee">@(String.Format("{0:c}", unitPrices.FeePrice))</span>
                    <span class="calculate-item-price">@(String.Format("{0:c}", unitPrices.TotalPrice))</span>
                </td>
                <td class="pricing-option-quantity number">
                @switch ((string)@popt.CustomerDataInputType)
                {
                    case "dropdown":
                        <select id="@idprefix-@popt.PricingOptionName" name="@popt.PricingOptionName" class="calculate-item-quantity">
                            @{
                                var optvalues = LcHelpers.GetValuesFromCSVLine(popt.CustomerDataValues);
                                foreach (string optv in optvalues)
                                {
                                    var v = optv.Trim();
                                    <option value="@v" @getSelected(popt.PricingOptionName, v, popt)>@v</option>
                                }
                                }
                        </select>
                        break;
                    case "number":
                    case "text":
                        <input type="text" class="calculate-item-quantity" id="@idprefix-@popt.PricingOptionName" name="@popt.PricingOptionName" value="@(Request[popt.PricingOptionName] ?? popt.CustomerDataInputValue)"/>
                        break;
                    case "":
                        <span class="calculate-item-quantity">N/A</span>
                        break;
                    default:
                        <text>Unknown CustomerDataInputType: @popt.CustomerDataInputType</text>
                        break;
                }
                </td>
                <td class="pricing-option-total-price calculated number money">
                    <span class="calculate-item-total">@(prices.TotalPrice.ToString("c"))</span>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@helper Packages(dynamic viewData, LcData.ProviderPackagesView packages, dynamic fee) {
    var idprefix = "pricingwizard";
    var preSelectedPackage = Request["PackageID"];
    var selectedPackage = Request["provider-package"] ?? preSelectedPackage;

    <table class="packages-list calculate-summary-group" data-calculation-summary-group="packages">
        <tr>
            <th class="row-selection"></th>
            <th class="package-name name">Name</th>
            <th class="package-sessions number">Included sessions</th>
            <th class="package-duration number">Duration</th>
            <th class="package-total-price number">Price</th>
        </tr>
        @foreach (var pak in packages.Packages)
        {
            var feePrice = LcPricingModel.ApplyFeeAndRound(fee, pak.Price);
            <tr>
                <td>
                    <input id="@(idprefix)-package-@(pak.ProviderPackageID)" class="calculate-item-checked" type="radio" @LcHelpers.IsChecked(pak.ProviderPackageID, selectedPackage) name="provider-package" value="@pak.ProviderPackageID" />
                </td>
                <td class="package-name name">
                    <label for="@(idprefix)-package-@(pak.ProviderPackageID)">@pak.Name</label>
                </td>
                <td class="package-sessions number">@pak.NumberOfSessions</td>
                <td class="package-duration number">@pak.ServiceDuration minutes</td>
                <td class="package-total-price number">
                    <span class="calculate-item-fee">@(String.Format("{0:c}", feePrice))</span>
                    <span class="calculate-item-quantity">1</span>
                    <span class="calculate-item-price">@(String.Format("{0:c}", pak.Price + feePrice))</span>
                    <span class="calculate-item-total">@(String.Format("{0:c}", pak.Price + feePrice))</span>
                </td>
            </tr>
        }
    </table>
}

@helper Addons(dynamic viewData, LcData.ProviderPackagesView addons, dynamic fee) {
    var idprefix = "pricingwizard";
    var selectedAddons = Request.Form.GetValues("provider-package-addons");
    if (selectedAddons == null) {
        selectedAddons = new string[0];
    }

    <table class="packages-list calculate-summary-group" data-calculation-summary-group="addons">
        <tr>
            <th class="row-selection"></th>
            <th class="package-name name">Name</th>
            <th class="package-duration number">Duration</th>
            <th class="package-total-price number">Price</th>
        </tr>
        @foreach (var pak in addons.Packages)
        {
            var feePrice = LcPricingModel.ApplyFeeAndRound(fee, pak.Price);
            <tr>
                <td>
                    <input id="@(idprefix)-package-@(pak.ProviderPackageID)" class="calculate-item-checked" type="checkbox" @LcHelpers.IsChecked(selectedAddons.Contains(((int)pak.ProviderPackageID).ToString()), true) name="provider-package-addons" value="@pak.ProviderPackageID" />
                </td>
                <td class="package-name name">
                    <label for="@(idprefix)-package-@(pak.ProviderPackageID)">@pak.Name</label>
                </td>
                <td class="package-duration number">@pak.ServiceDuration minutes</td>
                <td class="package-total-price number">
                    <span class="calculate-item-fee">@(String.Format("{0:c}", feePrice))</span>
                    <span class="calculate-item-quantity">1</span>
                    <span class="calculate-item-price">@(String.Format("{0:c}", pak.Price + feePrice))</span>
                    <span class="calculate-item-total">@(String.Format("{0:c}", pak.Price + feePrice))</span>
                </td>
            </tr>
        }
    </table>
}

@helper PricingSummary(dynamic viewData, LcPricingModel.PricingSummaryData summary, Dictionary<string, LcPricingModel.PricingSummaryData> summaryLines, decimal hourPrice) {
 
    <div class="calculate-price-button actions">
        <button class="button action calculate-price-button ajax-fieldset-submit">Calculate</button>
    </div>
    <div class="calculation">
        <table class="calculation calculation-summary">

            @foreach(var line in summaryLines) {
                <tr>
                    <td></td><th>@Html.Raw(line.Value.Concept)</th>
                    <td class="subtotal-price calculation-summary-group-@(line.Key.ToLower())">@line.Value.TotalPrice.ToString("c")</td>
                </tr>
            }

            <tr class="separator">
                <td></td><td class="separator" colspan="2"></td>
            </tr>
            <tr class="total">
                <td class="row-selection"></td><th class="name">Total price*</th>
                <td class="calculation-summary-total total-price">@summary.TotalPrice.ToString("c")</td>
            </tr>
            <tr class="fees">
                <td></td>
                <th colspan="2">*includes a <span class="calculation-summary-fee">@summary.FeePrice.ToString("c")</span> Loconomics service fee</th>
            </tr>
        </table>
    </div>
}
