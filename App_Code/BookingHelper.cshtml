@using WebMatrix.Data;
@functions{
    /// <summary>
    /// Get a dynamic record with the most basic info from 
    /// a Booking: CustomerUserID, ProviderUserID, PositionID,
    /// BookingID, BookingStatusID, BookingRequestID
    /// </summary>
    /// <param name="BookingID"></param>
    /// <returns></returns>
    public static dynamic GetBookingBasicInfo(int BookingID){
        var sqlGetBooking = @"
            SELECT  R.CustomerUserID, R.ProviderUserID,
                    R.PositionID, B.BookingID, B.BookingStatusID,
                    R.BookingRequestID
            FROM    Booking As B
                     INNER JOIN
                    BookingRequest As R
                      ON R.BookingRequestID = B.BookingRequestID
            WHERE   BookingID = @0
        ";
        using (var db = Database.Open("sqlloco")) {
            return db.QuerySingle(sqlGetBooking, BookingID);
        }
    }
    public static dynamic GetBooking(int BookingID) {
        var sqlGetBooking = @"
            SELECT  R.BookingRequestID,
                    B.BookingID,
                    R.ProviderUserID,
                    R.CustomerUserID,
                    R.PositionID,
                    R.PricingEstimateID,
                    R.BookingRequestStatusID,
                    B.BookingStatusID,

                    UC.FirstName As CustomerFirstName,
                    UC.LastName As CustomerLastName,

                    UP.FirstName As ProviderFirstName,
                    UP.LastName As ProviderLastName,

                    E.StartTime,
                    E.EndTime,
                    E.TimeZone,
                    Pos.PositionSingular,
                    Pr.TotalPrice,
                    Pr.ServiceDuration,
                    
                    CAST(CASE WHEN (SELECT count(*) FROM UserReviews As URP
                     WHERE URP.BookingID = B.BookingID
                            AND
                           URP.ProviderUserID = R.ProviderUserID
                            AND 
                           URP.PositionID = 0
                    ) = 0 THEN 0 ELSE 1 END As bit) As ReviewedByProvider,
                    CAST(CASE WHEN (SELECT count(*) FROM UserReviews As URC
                     WHERE URC.BookingID = B.BookingID
                            AND
                           URC.CustomerUserID = R.CustomerUserID
                            AND 
                           URC.PositionID = R.PositionID
                    ) = 0 THEN 0 ELSE 1 END As bit) As ReviewedByCustomer
            FROM    Booking As B
                     INNER JOIN
                    BookingRequest As R
                      ON B.BookingRequestID = R.BookingRequestID
                     INNER JOIN
                    PricingEstimate As Pr
                      ON Pr.PricingEstimateID = R.PricingEstimateID
                     INNER JOIN
                    Users As UC
                      ON UC.UserID = R.CustomerUserID
                     INNER JOIN
                    Users As UP
                      ON UP.UserID = R.ProviderUserID
                     LEFT JOIN
                    CalendarEvents As E
                      ON E.Id = B.ConfirmedDateID
                     INNER JOIN
                    Positions As Pos
                      ON Pos.PositionID = R.PositionID
					    AND Pos.CountryID = @1 AND Pos.LanguageID = @2
            WHERE   B.BookingID = @0
        ";
        using (var db = Database.Open("sqlloco")) {
            return db.QuerySingle(sqlGetBooking, BookingID, 1, 1);
        }
    }
    public static string GetBookingRequestDetails(int BookingRequestID){
        var getBookingRequestPricingEstimate = @"
            SELECT  PricingEstimateID
            FROM    BookingRequest
            WHERE   BookingRequestID = @0
        ";
        var getPricingVars = @"
            SELECT  V.CustomerPricingVariableDisplayText As Name, P.CustomerPricingDataInput As Quantity
            FROM    PricingEstimateDetail As P
                     INNER JOIN
                    PricingVariable As V
                      ON V.PricingVariableID = P.PricingVariableID
            WHERE   P.PricingEstimateID = @0
                     AND V.CountryId = @1 AND V.LanguageID = @2
        ";
        var getPricingOptions = @"
            SELECT  V.CustomerPricingOptionDisplayText As Name, P.CustomerPricingDataInput As Quantity
            FROM    PricingEstimateDetail As P
                     INNER JOIN
                    PricingOption As V
                      ON V.PricingOptionID = P.PricingOptionID
            WHERE   P.PricingEstimateID = @0
                     AND V.CountryId = @1 AND V.LanguageID = @2
        ";
        dynamic pvars, poptions;
        using (var db = Database.Open("sqlloco")) {
            int pricingEstimateID = db.QueryValue(getBookingRequestPricingEstimate, BookingRequestID);
            pvars       = db.Query(getPricingVars, pricingEstimateID, 1, 1);
            poptions    = db.Query(getPricingOptions, pricingEstimateID, 1, 1);
        }
        
        int i = 0;
        string iprint = "";
        string result = "";
        foreach (var pitem in pvars) {
            if (i > 0) {
                iprint = "; ";
            }
            i++;
            result += iprint + pitem.Name + " " + pitem.Quantity;
        }
        iprint = "";
        if (pvars.Count > 0) {
            iprint = "; ";
        }
        i = 0;
        foreach (var pitem in poptions) {
            if (i > 0) {
                iprint = "; ";
            }
            i++;
            result += iprint + pitem.Name + "" + pitem.Quantity;
        }
        
        return result;
    }
    public static string GetBookingRequestSubject(int BookingRequestID){
        var getBookingRequest = @"
            SELECT  TOP 1
                    P.PositionSingular,
                    E1.StartTime As PreferredDateStart, E1.EndTime As PreferredDateEnd
            FROM    BookingRequest As B
                     INNER JOIN
                    CalendarEvents As E1
                      ON E1.ID = B.PreferredDateID
                     INNER JOIN
                    Positions As P
                      ON P.PositionID = B.PositionID
            WHERE   B.BookingRequestID = @0
        ";
        dynamic summary = null;
        using (var db = Database.Open("sqlloco")){
            summary = db.QuerySingle(getBookingRequest, BookingRequestID);
        }
        string result = "";
        if (summary != null) {
            result = summary.PositionSingular + " " +
                summary.PreferredDateStart.ToLongDateString() + ", " +
                summary.PreferredDateStart.ToShortTimeString() + " to " +
                summary.PreferredDateEnd.ToShortTimeString();
        }
        return result;
    }
    public static string GetBookingSubject(int BookingRequestID){
        var getBookingRequest = @"
            SELECT  TOP 1
                    P.PositionSingular,
                    E1.StartTime As ConfirmedDateStart, E1.EndTime As ConfirmedDateEnd
            FROM    Booking As B
                     INNER JOIN
                    CalendarEvents As E1
                      ON E1.ID = B.ConfirmedDateID
                     INNER JOIN
                    BookingRequest As R
                      ON R.BookingRequestID = B.BookingRequestID
                     INNER JOIN
                    Positions As P
                      ON P.PositionID = R.PositionID
            WHERE   B.BookingID = @0
        ";
        dynamic summary = null;
        using (var db = Database.Open("sqlloco")){
            summary = db.QuerySingle(getBookingRequest, BookingRequestID);
        }
        string result = "";
        if (summary != null) {
            result = summary.PositionSingular + " " +
                summary.ConfirmedDateStart.ToLongDateString() + ", " +
                summary.ConfirmedDateStart.ToShortTimeString() + " to " +
                summary.ConfirmedDateEnd.ToShortTimeString();
        }
        return result;
    }
}
