@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    CommonHelpers.SecurePage();
    // var u = DashboardFunctions.GetUserRow();
    int userID = WebSecurity.CurrentUserId;
    
    var threadID = Request["MessageThreadID"].AsInt();
    
    var sqlGetMessageThread = @"
        SELECT  T.ThreadID,
                T.CustomerUserID,
                T.ProviderUserID,
                T.PositionID,
                T.MessageThreadStatusID,
                T.UpdatedDate As LastMessageDate,
                T.Subject,

                UC.FirstName As CustomerFirstName,
                UC.LastName As CustomerLastName,
                UC.MiddleIn As CustomerMiddleIn,
                UC.CreatedDate As CustomerMemberSinceDate,
                UC.PublicBio As CustomerPublicBio,

                UP.FirstName As ProviderFirstName,
                UP.LastName As ProviderLastName,

                Pos.PositionSingular
        FROM    MessagingThreads As T
                 INNER JOIN
                Users As UC
                  ON UC.UserID = T.CustomerUserID
                 INNER JOIN
                Users As UP
                  ON UP.UserID = T.ProviderUserID
                 INNER JOIN
                Positions As Pos
                  ON Pos.PositionID = T.PositionID
					AND Pos.CountryID = @2 AND Pos.LanguageID = @3
        WHERE   ThreadID = @0
                 AND
                (T.CustomerUserID = @1 OR T.ProviderUserID = @1)
    ";
    var sqlListMessagesInThread = @"
        SELECT  M.BodyText,
                M.MessageTypeID,
                M.UpdatedDate As MessageDate
        FROM    Messages As M
        WHERE   M.ThreadID = @0
        ORDER BY M.CreatedDate ASC
    ";
    var sqlCheckUserInThread = @"
        SELECT  ThreadID, ProviderUserID, CustomerUserID
        FROM    MessagingThreads As T
        WHERE   ThreadID = @0
                 AND
                (T.CustomerUserID = @1 OR T.ProviderUserID = @1)
    ";

    Validation.RequireField("newmessage", "Cannot send an empty message");
    Validation.Add("newmessage", Validator.StringLength(2500, 1, "Message is too big!"));
     
    if (IsPost && Validation.IsValid()) {
        // Validate if user is on this Thread
        using (var db = Database.Open("sqlloco")) {
            
            var check = db.QuerySingle(sqlCheckUserInThread, threadID, userID);
            if (check != null && check.ThreadID == threadID) {
                if (userID == check.ProviderUserID) {
                    LcMessaging.SendProviderInquiryAnswer(threadID, Request["newmessage"]);
                } else {
                    LcMessaging.SendCustomerInquiryAnswer(threadID, Request["newmessage"]);
                }
            }
        }
    }
     
    dynamic messages = null, thread = null;
    using (var db = Database.Open("sqlloco")){
        thread = db.QuerySingle(sqlGetMessageThread, threadID, userID, 1, 1);
        messages = db.Query(sqlListMessagesInThread, threadID);
    }
}
@helper printMessageBodyAsHtml(string messageBody){
    @Html.Raw(messageBody.Replace("\n", "<br/>"))
}
@helper printItemCustomer(dynamic thread, dynamic message){
    <li class="customer">
        @RenderPage(UrlUtil.LangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
            {"Data", thread},
            {"DataPrefix", "Customer"},
            {"Size", "mini"},
            {"UserType", "customer"},
            {"ExtraInfo", message.MessageDate.ToShortDateString()}
        })
        <div class="message-section">@printMessageBodyAsHtml(message.BodyText)</div>
    </li>
}
@helper printItemProvider(dynamic thread, dynamic message){
    <li class="provider">
        @RenderPage(UrlUtil.LangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
            {"Data", thread},
            {"DataPrefix", "Provider"},
            {"Size", "mini"},
            {"UserType", "provider"},
            {"ExtraInfo", message.MessageDate.ToShortDateString()}
        })
        <div class="message-section">@printMessageBodyAsHtml(message.BodyText)</div>
    </li>
}
@if (thread == null)
{
    <div class="empty">That message thread don't exist.</div>
}
else
{
    @CommonHelpers.SetupStarRatingPlugin()
    @CommonHelpers.GetValidationScripts()
    <div class="booking-request main-side ajax-box">
        <h3>Conversation with @CommonHelpers.GetUserDisplayName(thread, "Customer")</h3>
        <span class="updateddate">last updated: @thread.LastMessageDate.ToLongDateString() at @thread.LastMessageDate.ToLongTimeString()</span>

        <h4>Customer profile</h4>
        @RenderPage(UrlUtil.LangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
            {"AddCssClasses", "message-section" },
            {"Data", thread},
            {"DataPrefix", "Customer"},
            {"Size", "medium"},
            {"UserType", "customer"}
        })

        <h4>@(String.IsNullOrWhiteSpace(thread.Subject) ? "Message thread" : "Subject: " + thread.Subject)</h4>
        <ul class="conversation-messages clearfix">
        @foreach (var message in messages)
        {
            if (message.MessageTypeID == 1)
            {
                @printItemCustomer(thread, message)
            }
            else if (message.MessageTypeID == 3)
            {
                @printItemProvider(thread, message);
            }
        }
        @{
            string userType = "", userPrefix = "";
            if (thread.ProviderUserID == userID) {
                userType = "provider";
                userPrefix = "Provider";
            } else {
                userType = "customer";
                userPrefix = "Customer";
            }
            <li class="@userType new-message">
                @RenderPage(UrlUtil.LangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
                    {"AddCssClasses", "message-conversation" },
                    {"Data", thread},
                    {"DataPrefix", userPrefix},
                    {"Size", "mini"},
                    {"UserType", userType},
                    {"ExtraInfo", DateTime.Now.ToShortDateString()}
                })
                <div class="message-section @userType">
                    <form action="@(UrlUtil.LangPath)Messaging/$MessageThread/" class="ajax">
                        @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
                        <input type="hidden" name="MessageThreadID" value="@threadID" />
                        <textarea rows="4" name="newmessage" placeholder="Reply"></textarea>
                        <fieldset class="actions">
                            <button class="main-action" type="submit">Reply</button>
                        </fieldset>
                    </form>
                </div>
            </li>
        }
        </ul>

        <h4>Reminders</h4>
        @RenderPage(UrlUtil.LangPath + "Booking/$BookingRemindersWidget.cshtml")
    </div>
    @RenderPage(UrlUtil.LangPath + "HelpCenter/$FAQS.cshtml")
}