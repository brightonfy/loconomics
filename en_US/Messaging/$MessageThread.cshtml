@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    LcHelpers.SecurePage();
    // var u = LcData.UserInfo.GetUserRow();
    int userID = WebSecurity.CurrentUserId;
    
    var threadID = Request["MessageThreadID"].AsInt();

    var sqlGetMessageThread = @"
        SELECT  T.ThreadID,
                T.CustomerUserID,
                T.ProviderUserID,
                T.PositionID,
                T.MessageThreadStatusID,
                T.UpdatedDate As LastMessageDate,
                T.Subject,

                UC.FirstName As CustomerFirstName,
                UC.LastName As CustomerLastName,

                UP.FirstName As ProviderFirstName,
                UP.LastName As ProviderLastName,

                Pos.PositionSingular
        FROM    MessagingThreads As T
                 INNER JOIN
                Users As UC
                  ON UC.UserID = T.CustomerUserID
                 INNER JOIN
                Users As UP
                  ON UP.UserID = T.ProviderUserID
                 INNER JOIN
                Positions As Pos
                  ON Pos.PositionID = T.PositionID
					AND Pos.CountryID = @2 AND Pos.LanguageID = @3
        WHERE   ThreadID = @0
                 AND
                (T.CustomerUserID = @1 OR T.ProviderUserID = @1)
    ";
    var sqlListMessagesInThread = @"
        SELECT  M.MessageID,
                M.BodyText,
                M.MessageTypeID,
                M.UpdatedDate As MessageDate
        FROM    Messages As M
        WHERE   M.ThreadID = @0
        ORDER BY M.CreatedDate ASC
    ";
    var sqlCheckUserInThread = @"
        SELECT  ThreadID, ProviderUserID, CustomerUserID
        FROM    MessagingThreads As T
        WHERE   ThreadID = @0
                 AND
                (T.CustomerUserID = @1 OR T.ProviderUserID = @1)
    ";

    Validation.RequireField("newmessage", "Cannot send an empty message");
    Validation.Add("newmessage", Validator.StringLength(2500, 1, "Message is too big!"));
    
    bool refreshThreadList = false;
    
    if (IsPost && Validation.IsValid()) {
        // Validate if user is on this Thread
        using (var db = Database.Open("sqlloco")) {
            
            var check = db.QuerySingle(sqlCheckUserInThread, threadID, userID);
            if (check != null && check.ThreadID == threadID) {
                if (userID == check.ProviderUserID) {
                    LcMessaging.SendProviderInquiryAnswer(threadID, Request["newmessage"]);
                } else {
                    LcMessaging.SendCustomerInquiryAnswer(threadID, Request["newmessage"]);
                }
                refreshThreadList = true;
            }
        }
    }
     
    dynamic messages = null, thread = null;
    using (var db = Database.Open("sqlloco")){
        thread = db.QuerySingle(sqlGetMessageThread, threadID, userID, 1, 1);
        messages = db.Query(sqlListMessagesInThread, threadID);
    }
}
@helper printMessageBodyAsHtml(string messageBody){
    @Html.Raw(messageBody.Replace("\n", "<br/>"))
}
@helper printItem(dynamic thread, dynamic message, string userType, string userPrefix){
    <li class="@userType message-@message.MessageID">
        @RenderPage(UrlUtil.LangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
            {"Data", thread},
            {"DataPrefix", userPrefix},
            {"Size", "mini"},
            {"UserType", userType},
            {"ExtraInfo", message.MessageDate.ToShortDateString()}
        })
        <div class="message-section">@printMessageBodyAsHtml(message.BodyText)</div>
    </li>
}
@if (thread == null)
{
    <div class="empty">That message thread don't exist.</div>
}
else
{
    // Checking item: user type of the other user, not current user
    int itsUserID = thread.ProviderUserID;
    string itsUserType = "provider";
    string itsUserLabel = "Provider";
    string myUserType = "customer";
    string myUserPrefix = "Customer";
    if (WebSecurity.CurrentUserId == thread.ProviderUserID) {
        itsUserType = "customer";
        itsUserLabel = "Customer";
        myUserType = "provider";
        myUserPrefix = "Provider";
        itsUserID = thread.CustomerUserID;
    } // we don't check 'else' nelse 'else if (item.CustoerUserID..) because are just the default values
    var itsUserData = LcData.UserInfo.GetUserRowWithContactData(itsUserID);
    
    <div class="not-faqs-duplication">

    <div class="booking-request main-side ajax-box">
        @*LcHelpers.SetupStarRatingPlugin()*@
        @LcHelpers.GetValidationScripts()

        @if (refreshThreadList) {
            <script type="text/javascript">
                // After update conversation, state change, reload thread list to reflect new state
                $('#inbox').reload();
            </script>
        }
        <h3>Conversation with @LcHelpers.GetUserDisplayName(thread, "Customer")</h3>
        <span class="updateddate">last updated: @thread.LastMessageDate.ToLongDateString() at @thread.LastMessageDate.ToLongTimeString()</span>

        <h4>@itsUserLabel profile</h4>
        @RenderPage(UrlUtil.LangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
            {"AddCssClasses", "message-section" },
            {"Data", itsUserData},
            {"DataPrefix", ""},
            {"Size", "medium"},
            {"UserType", itsUserType}
        })

        <h4>@(String.IsNullOrWhiteSpace(thread.Subject) ? "Message thread" : "Subject: " + thread.Subject)</h4>
        <ul class="conversation-messages clearfix">
        @foreach (var message in messages)
        {
            if (message.MessageTypeID == 1)
            {
                @printItem(thread, message, "customer", "Customer")
            }
            else if (message.MessageTypeID == 3)
            {
                @printItem(thread, message, "provider", "Provider")
            }
        }
        @{
            <li class="@myUserType new-message">
                @RenderPage(UrlUtil.LangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
                    {"AddCssClasses", "message-conversation" },
                    {"Data", thread},
                    {"DataPrefix", myUserPrefix},
                    {"Size", "mini"},
                    {"UserType", myUserType},
                    {"ExtraInfo", DateTime.Now.ToShortDateString()}
                })
                <div class="message-section">
                    <form action="@(UrlUtil.LangPath)Messaging/$MessageThread/" class="ajax">
                        @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
                        <input type="hidden" name="MessageThreadID" value="@threadID" />
                        <textarea rows="4" name="newmessage" placeholder="Reply"></textarea>
                        <fieldset class="actions">
                            <button class="main-action" type="submit">Reply</button>
                        </fieldset>
                    </form>
                </div>
            </li>
        }
        </ul>

        <h4>Reminders</h4>
        @RenderPage(UrlUtil.LangPath + "Booking/$BookingRemindersWidget.cshtml", myUserType)
    </div>
    </div>
    @RenderPage(UrlUtil.LangPath + "HelpCenter/$FAQS.cshtml")
}