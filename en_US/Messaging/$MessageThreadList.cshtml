@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    CommonHelpers.SecurePage();
    // var u = DashboardFunctions.GetUserRow();
    int userID = WebSecurity.CurrentUserId;
    
    var sqlListMessageThread = @"
        SELECT  T.ThreadID,
                T.CustomerUserID,
                T.ProviderUserID,
                T.PositionID,
                T.MessageThreadStatusID,
                T.UpdatedDate As LastMessageDate,
                T.Subject,

                M.BodyText As LastMessageBodyText,
                M.MessageTypeID As LastMessageTypeID,

                UC.FirstName As CustomerFirstName,
                UC.LastName As CustomerLastName,

                UP.FirstName As ProviderFirstName,
                UP.LastName As ProviderLastName,

                Pos.PositionSingular
        FROM    MessagingThreads As T
                 INNER JOIN
                Messages As M
                  ON M.ThreadID = T.ThreadID
                      AND
                     M.MessageID = T.LastMessageID
                 INNER JOIN
                Users As UC
                  ON UC.UserID = T.CustomerUserID
                 INNER JOIN
                Users As UP
                  ON UP.UserID = T.ProviderUserID
                 INNER JOIN
                Positions As Pos
                  ON Pos.PositionID = T.PositionID
					AND Pos.CountryID = @1 AND Pos.LanguageID = @2
        WHERE   (T.CustomerUserID = @0 OR T.ProviderUserID = @0)
        ORDER BY T.UpdatedDate DESC
    ";
    
/*    var sqlListCustomerMessageThread = @"
        SELECT  T.ThreadID,
                T.CustomerUserID As ReceiverUserID,
                T.ProviderUserID As SenderUserID,
                T.PositionID,
                T.MessageThreadStatusID,
                T.UpdatedDate As LastMessageDate,
                T.Subject,

                (SELECT TOP 1 BodyText
                 FROM Messages As M
                 WHERE M.ThreadID = T.ThreadID
                 ORDER BY CreatedDate DESC
                ) As LastMessageBodyText,

                UR.FirstName As ReceiverFirstName,
                UR.LastName As ReceiverLastName,

                US.FirstName As SenderFirstName,
                US.LastName As SenderLastName,

                Pos.PositionSingular
        FROM    MessagingThreads As T
                 INNER JOIN
                Users As UR
                  ON UR.UserID = T.CustomerUserID
                 INNER JOIN
                Users As US
                  ON US.UserID = T.ProviderUserID
                 INNER JOIN
                Positions As Pos
                  ON Pos.PositionID = T.PositionID
					AND Pos.CountryID = @1 AND Pos.LanguageID = @2
        WHERE   T.CustomerUserID = @0
        ORDER BY T.UpdatedDate DESC
    ";
    var sqlListProviderMessageThread = @"
        SELECT  T.ThreadID,
                T.CustomerUserID As SenderUserID,
                T.ProviderUserID As ReceiverUserID,
                T.PositionID,
                T.MessageThreadStatusID,
                T.UpdatedDate As LastMessageDate,
                T.Subject,

                (SELECT TOP 1 BodyText
                 FROM Messages As M
                 WHERE M.ThreadID = T.ThreadID
                 ORDER BY CreatedDate DESC
                ) As LastMessageBodyText,

                UR.FirstName As ReceiverFirstName,
                UR.LastName As ReceiverLastName,

                US.FirstName As SenderFirstName,
                US.LastName As SenderLastName,

                Pos.PositionSingular
        FROM    MessagingThreads As T
                 INNER JOIN
                Users As UR
                  ON UR.UserID = T.ProviderUserID
                 INNER JOIN
                Users As US
                  ON US.UserID = T.CustomerUserID
                 INNER JOIN
                Positions As Pos
                  ON Pos.PositionID = T.PositionID
					AND Pos.CountryID = @1 AND Pos.LanguageID = @2
        WHERE   T.ProviderUserID = @0
        ORDER BY T.UpdatedDate DESC
    ";*/

    // All messages threads (as customer and as provider)
    dynamic messageThreads = null;
    using (var db = Database.Open("sqlloco")) {
        messageThreads = db.Query(sqlListMessageThread, userID, 1, 1);
    }
}
@helper printItem(dynamic item, string senderPrefix = "Sender", string receiverPrefix = "Receiver", string senderUserType = "user") {
  <li>
    @RenderPage(UrlUtil.LangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
        {"Data", item},
        {"DataPrefix", senderPrefix},
        {"Size", "mini"},
        {"UserType", senderUserType}
    })
    @{
        var itemType = "";
        if (item.LastMessageTypeID >= 1 && item.LastMessageTypeID <= 3) {
            itemType = "inquiry";
        } else if (item.LastMessageTypeID == 8) {
            itemType = "marketing";
        } else if (item.LastMessageTypeID == 9) {
            itemType = "booking-dispute";
        } else if (item.LastMessageTypeID == 10) {
            itemType = "booking-dispute-resolution";
        } else if (item.LastMessageTypeID >= 17 && item.LastMessageTypeID <= 18) {
            itemType = "booking-review";
        } else if (item.LastMessageTypeID >= 4 && item.LastMessageTypeID <= 5) {
            itemType = "bookingrequest";
        } else if (item.LastMessageTypeID >= 6 && item.LastMessageTypeID <= 7) {
            itemType = "bookingrequest-confirmation";
        } else if (item.LastMessageTypeID >= 13 && item.LastMessageTypeID <= 14) {
            itemType = "bookingrequest-denegation";
        } else if (item.LastMessageTypeID >= 15 && item.LastMessageTypeID <= 16) {
            itemType = "booking";
        }
    }
    <ul class="item-summary message-thread-summary @itemType">
        @* Inquiries messages (1 to 3) *@
        @switch(itemType) {
            case "inquiry":
                <li>
                    <h5>Inquiry:</h5> 
                    @item.PositionSingular
                </li>
                <li>
                    <h5>Subject:</h5> @item.Subject
                </li>
                <li>
                    <h5>Message:</h5> @item.LastMessageBodyText
                </li>
                break;
            case "bookingrequest":
                <li>
                    <h5>Booking Request:</h5> 
                    @item.Subject
                </li>
                <li>
                    <h5>Details:</h5> @item.LastMessageBodyText
                </li>
                break;
            case "booking":
                <li>
                    <h5>Booking:</h5> 
                    @item.Subject
                </li>
                <li>
                    <h5>Details:</h5> @item.LastMessageBodyText
                </li>
                break;
        }
    </ul>
    <div class="actions">
        @{
            string buttonAction = "view", buttonLabel = "View";
            if (senderUserType == "customer") {
                switch ((int)item.MessageThreadStatusID){
                    case 1:
                        buttonAction = "respond";
                        buttonLabel = "Respond";
                        break;
                    case 2:
                        buttonAction = "responded";
                        buttonLabel = "Responded";
                        break;
                }
            } else if (senderUserType == "provider") {
                switch ((int)item.MessageThreadStatusID){
                    case 1:
                        buttonAction = "waiting-respond";
                        buttonLabel = "Waiting";
                        break;
                    case 2:
                        buttonAction = "responded";
                        buttonLabel = "Responded";
                        break;
                }
            }
        }
        <button class="item-action @buttonAction" data-message-thread-id="@item.ThreadID">@buttonLabel</button>
        <div class="date item-extra-info">@item.LastMessageDate</div>
    </div>
  </li>
}
<ul class="message-thread-list items-list list-all">
    @if (messageThreads.Count > 0)
    {
        foreach (var item in messageThreads)
        {
            if (userID == item.ProviderUserID) {
                @printItem(item, "Customer", "Provider", "customer");
            } else {
                @printItem(item, "Provider", "Customer", "provider");
            }
        }
    } else {
        <li class="empty-list">There is no messages still!</li>
    }
</ul>