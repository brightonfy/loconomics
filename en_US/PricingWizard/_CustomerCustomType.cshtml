@* 
    Pricing Wizard, Customer View, PricingType 2:Custom
 *@
@using WebMatrix.Data;
@{
    var pricingtypeid = 2;
    var clienttypeid = PageData["ClientTypeID"];
    var c = PageData["customerrow"];
    var p = PageData["providerrow"];
    var pos = PageData["positionrow"];
    var idprefix = "pricingwizard";
    dynamic pvars;
    decimal timeRequired = 0, hourPrice = 0, feePrice = 0, subtotalPrice = 0, totalPrice = 0, optionalServicesTotalPrice = 0;
    // Collection to save time and price for each pricing variable item
    // Key will be VariableID, first decimal is time required for the item
    // and second is calculated price for this item
    var pricingVariablesNumbers = new Dictionary<int,decimal[]>();

    // Get the Pricing Variables and with the selected Provider Value; if provider didn't select
    // previously values for a variable, that variable will not be returned.
    pvars = LcData.GetPricingVariables(c.UserID, p.UserID, pos.PositionID, clienttypeid, pricingtypeid);

    // Get provider hour price
    hourPrice = LcData.GetProviderHourlyRate(p.UserID, pos.PositionID, clienttypeid);

    // Get the Pricing Options
    // TODO embed pricingotpions
    
    if (IsPost){
        /* DO CALCULATION: (not only on /calculate url, is need to save data too)
         */
        // Calculate time required per Pricing Variables
        foreach (var pvar in pvars){
            string customerValue = Request[pvar.PricingVariableName];
                
            // Get provider value for this pricing variable
            string providerValue = pvar.ProviderDataInputValue;
            decimal timeInHours = 0;
                
            // Analizing the provider value depending on the data-type ('unit' field in the database)
            decimal provValueAsDecimal = 0;
            switch ((string)pvar.ProviderDataInputUnit){
                case "minutes":
                    decimal.TryParse(providerValue, out provValueAsDecimal);
                    // Getting the provider Item Time in Hours
                    timeInHours = provValueAsDecimal / 60;
                    break;
                case "hours":
                    decimal.TryParse(providerValue, out provValueAsDecimal);
                    // Provider value are just in hours:
                    timeInHours = provValueAsDecimal;
                    break;
                default:
                    break;
            }
            // Analizing the customer value depending on the data-type ('unit' field in the database)
            decimal custValueAsDecimal = 0;
            switch ((string)pvar.CustomerDataInputUnit){
                case "number":
                case "times":
                case "quantity":
                    decimal.TryParse(customerValue, out custValueAsDecimal);
                    // Customer value is the quantity of items or times item value is repeated.
                    // To get the final time value, multiply by item time in hours
                    // (no on timeInHours, reusing this local var to save total time after this:)
                    timeInHours = timeInHours * custValueAsDecimal;
                    break;
                default:
                    break;
            }
            
            timeInHours = Math.Round(timeInHours, 2);
            timeRequired += timeInHours;
            pricingVariablesNumbers[pvar.PricingVariableID] = new decimal[]{timeInHours, Math.Round(hourPrice * timeInHours, 2)};
        }

        // Calculating the price for Pricing Options
        @RenderPage("$CustomerPricingOptions.cshtml", new { 
            EmbeddedMode = "calculate",
            PricingTypeID = pricingtypeid, ClientTypeID = clienttypeid
        } );
        var optionsCalculation = LcHelpers.RenderPageReturns["CalculatedData"];
        timeRequired += optionsCalculation["TimeRequired"];
        optionalServicesTotalPrice = optionsCalculation["OptionalServicesTotalPrice"];
        
        subtotalPrice = Math.Round(timeRequired * hourPrice + optionalServicesTotalPrice, 2);
        feePrice = Math.Round(.1M * subtotalPrice, 2);
        totalPrice = subtotalPrice + feePrice;

        /* SAVE DATA 
         */
        // If request post is not only for calculate, save data
        if (UrlData[0].ToLower() != "calculate"){
        
            using (var db = Database.Open("sqlloco")){
                
                /* Save data into pricingwizard tables to remember customer preferences
                */
                // Iterate all variables and save into customerpricingvariableinputs
                foreach (var pvar in pvars) {
                    db.Execute(LcData.sqlSetCustomerPricingVariable, Request[pvar.PricingVariableName], c.UserID, pvar.PricingVariableID);
                }
                
                /* Save data into the pricingestimate tables
                 */
                var revisionID = 1;
                var estimateID = 0;
                
                if (PageData["PricingEstimateData"] != null){
                    try{
                        estimateID = (int)PageData["PricingEstimateData"]["PricingEstimateID"];
                        revisionID = (int)PageData["PricingEstimateData"]["PricingEstimateRevision"];
                    }catch{}
                }

                // Inserting Estimate with calculated details
                var insreturned = LcData.Booking.CreatePricingEstimate(estimateID, revisionID,
                    pricingtypeid, timeRequired, hourPrice, subtotalPrice, feePrice, totalPrice);
                estimateID = insreturned.PricingEstimateID;
                revisionID = insreturned.PricingEstimateRevision;

                // Inserting details: every variable, option
                foreach (var pvar in pvars) {
                    // Get pair time and price
                    decimal[] timeprice = pricingVariablesNumbers[pvar.PricingVariableID];
                    // Insert data:
                    db.Execute(LcData.Booking.sqlInsEstimateDetails, estimateID, revisionID,
                        pvar.PricingVariableID,
                        0, 0, 0, 0,
                        pvar.ProviderDataInputValue,
                        Request[pvar.PricingVariableName],
                        0, // systemPricingDataInput
                        hourPrice,
                        timeprice[0], timeprice[1]);
                }

                // Execute 'save' code of Pricing Options page
                @RenderPage("$CustomerPricingOptions.cshtml", new { 
                    EmbeddedMode = "back-end", 
                    EstimateID = estimateID, RevisionID = revisionID,
                    PricingTypeID = pricingtypeid, ClientTypeID = clienttypeid
                } );
                if (LcHelpers.RenderPageReturns["SavedCode"] != 0) {
                    ModelState.AddFormError("Options not saved");
                }
                
                // If we have valid IDs, all is OK: instead of return a JSON, we left IDs in PageData
                /*PageData["PricingEstimateID"] = estimateID;
                PageData["PricingEstimateRevisionID"] = revisionID;*/
                if (PageData["PricingEstimateData"] == null){
                    PageData["PricingEstimateData"] = new Dictionary<string, object> { 
                        { "PricingEstimateID", estimateID }, 
                        { "PricingEstimateRevision", revisionID },
                        { "PricingEstimateErrorMessage", "" } };
                } else {
                    PageData["PricingEstimateData"]["PricingEstimateID"] = estimateID;
                    PageData["PricingEstimateData"]["PricingEstimateRevision"] = revisionID;
                }
                // We can return a negative data in PageData["PricingEstimateData"]["PricingEstimateID"] to set error code and add
                // a PageData["PricingEstimateData"]["PricingEstimateErrorMessage"] for details.
            }
        }
    }
}
@functions{
    string[] getValuesFromCSV(string line){
        return line.Split(',');
    }
}
@helper getChecked(string name, string value, dynamic poptvar){
    // Get checked if was setted by form of is was previously setted at database
    @Html.Raw((Request[name] == value || poptvar.CustomerDataInputValue != null) ? "checked='checked'" : "")
}
@helper getSelected(string name, string value, dynamic poptvar){
    @Html.Raw((Request[name] == value || poptvar.CustomerDataInputValue == value) ? "selected='selected'" : "")
}
@if (pvars.Count > 0)
{
    <ul class="pricing-vars">
    @foreach (var pvar in pvars)
    {
        <li class="@pvar.PricingVariableName data-type-@pvar.CustomerDataInputType">
            <label for="@idprefix-@pvar.PricingVariableName">@pvar.CustomerPricingVariableDisplayText</label>
            @switch ((string)@pvar.CustomerDataInputType)
            {
                case "dropdown":
                    <select id="@idprefix-@pvar.PricingVariableName" name="@pvar.PricingVariableName">
                        @{
                            var optvalues = getValuesFromCSV(pvar.CustomerDataValues);
                            foreach (string optv in optvalues)
                            {
                                var v = optv.Trim();
                                <option value="@v" @getSelected(pvar.PricingVariableName, v, pvar)>@v</option>
                            }
                        }
                    </select>
                    break;
                case "number":
                case "text":
                    <input type="text" id="@idprefix-@pvar.PricingVariableName" name="@pvar.PricingVariableName" value="@(Request[pvar.PricingVariableName] ?? pvar.CustomerDataInputValue)"/>
                    break;
                case "":
                    break;
                default:
                    <text>Unknowed CustomerDataInputType: @pvar.CustomerDataInputType</text>
                    break;
            }
        </li>
    }
    </ul>
}

@RenderPage("$CustomerPricingOptions.cshtml", new { EmbeddedMode = "front-end", idprefix = idprefix, PricingTypeID = pricingtypeid } )

@if (LcHelpers.RenderPageReturns["OptionsCount"] == 0 && pvars.Count == 0)
{
    <div class="no-pricing-wizard">
        Currently we're unable to provide a pricing estimate for this provider.  Please proceed to book a free estimate with the provider to determine a fair price together.
    </div>
}
else
{
    <div class="calculate-price-button actions">
        <button class="button action calculate-price-button ajax-fieldset-submit">Calculate</button>
    </div>
    <div class="calculation">
        <table class="calculation">
            <tr><th>Time required:</th><td class="time-required">@timeRequired.ToString("#,##0.00") hour(s)</td></tr>
            <tr>
                <th><span class="time-required">@timeRequired.ToString("#,##0.00") hour(s)</span> @@ <span class="hour-price">$@hourPrice.ToString("#,##0.00")</span></th>
                <td class="subtotal-price">$@subtotalPrice.ToString("#,##0.00")</td>
            </tr>
            <tr>
                <th>Optional Services</th>
                <td class="optional-services">$@optionalServicesTotalPrice.ToString("#,##0.00")</td>
            </tr>
            <tr>
                <th>Loconomics service fee:</th>
                <td class="fee-price">$@feePrice.ToString("#,##0.00")</td>
            </tr>
            <tr>
                <th>Total price:</th>
                <td class="total-price">$@totalPrice.ToString("#,##0.00")</td>
            </tr>
        </table>
    </div>    
}
@if (IsPost)
{
    <script type="text/javascript">lcSetupCalculateTableItemsTotals();</script>
}
