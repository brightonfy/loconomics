@* 
    Pricing Wizard, Customer View, PricingType 2:Custom
 *@
@using WebMatrix.Data;
@{
    var clienttypeid = PageData["ClientTypeID"];
    var c = PageData["customerrow"];
    var p = PageData["providerrow"];
    var pos = PageData["positionrow"];
    var idprefix = "pricingwizard";
    dynamic pvars;
    decimal timeRequired = 0, hourPrice = 0, feePrice = 0, subtotalPrice = 0, totalPrice = 0;

    using (var db = Database.Open("sqlloco")){
        // Get the Pricing Variables and with the selected Provider Value; if provider didn't select
        // previously values for a variable, that variable will not be returned.
        pvars = db.Query(@"
            SELECT  pv.PricingVariableID, pv.PricingVariableName, 
                    pv.CustomerInputDataRequired, pv.CustomerDataInputType,
                    pv.CustomerDataValues, pv.CustomerPricingVariableDisplayText,
                    pv.ProviderDataInputUnit, pv.CustomerDataInputUnit,
                    pi.PricingDataInput As ProviderDataInputValue
            FROM    pricingvariable As pv
                     INNER JOIN
                    providerpricingvariableinputs as pi
                      ON pv.PricingVariableID = pi.PricingVariableID
            WHERE   pv.CountryID=@0 AND pv.LanguageID=@1
                     AND 
                    pv.ClientTypeID=@2 AND pv.PositionID=@3
                     AND 
                    pv.Active = 1 AND pi.Active = 1
                     AND
                    pv.PricingTypeID = @4 AND pi.UserID = @5
        ", 1, 1, clienttypeid, pos.PositionID, 2, p.UserID);
        
        // Get provider hour price
        hourPrice = db.QueryValue(@"
            SELECT  TOP 1 HourlyRate
            FROM    providerhourlyrate
            WHERE   UserID = @0 AND PositionID = @1 AND ClientTypeID = @2 AND Active = 1
        ", p.UserID, pos.PositionID, clienttypeid) ?? 0;
    }
    
    if (IsPost){
        if (UrlData[0].ToLower() == "calculate"){
            // Do the calculation and return the result

            // Calculate time required
            timeRequired = 0;
            
            foreach (var pvar in pvars){
                string customerValue = Request[pvar.PricingVariableName];
                
                // Get provider value for this pricing variable
                string providerValue = pvar.ProviderDataInputValue;
                
                // Analizing the provider value depending on the data-type (unit just now)
                switch ((string)pvar.ProviderDataInputUnit){
                    case "minutes":
                        decimal provParsedValue = 0;
                        decimal.TryParse(providerValue, out provParsedValue);
                        
                        switch ((string)pvar.CustomerDataInputUnit){
                            case "number":
                            case "quantity":
                                decimal custParsedValue = 0;
                                decimal.TryParse(customerValue, out custParsedValue);
                                
                                // Calculation Formula:
                                //  (Provider.CostPerHour * (ProviderInputValue / 60) * CustomerInputValue)
                                //subtotalPrice += hourPrice * (provParsedValue / 60) * custParsedValue;
                                timeRequired += (provParsedValue / 60) * custParsedValue;
                                
                                break;
                            default:
                                break;
                        }
                        
                        break;
                    default:
                        break;
                }
            }
            
            subtotalPrice = timeRequired * hourPrice;
            feePrice = .1M * subtotalPrice;
            totalPrice = subtotalPrice + feePrice;
            
        }else{
            // TODO Save the data into the database
            
            // All OK:
            CommonHelpers.ReturnJsonResult(0, null);
        }
    }
}
@functions{
    string[] getValuesFromCSV(string line){
        return line.Split(',');
    }
}
@helper getChecked(string name, string value){
    @Html.Raw(Request[name] == value ? "selected='selected'" : "")
}
@if (pvars.Count > 0)
{
    <ul>
    @foreach (var pvar in pvars)
    {
        <li class="@pvar.PricingVariableName">
            <label for="@idprefix-@pvar.PricingVariableName">@pvar.CustomerPricingVariableDisplayText</label>
            @switch ((string)@pvar.CustomerDataInputType)
            {
                case "dropdown":
                    <select id="@idprefix-@pvar.PricingVariableName" name="@pvar.PricingVariableName" class="data-type-dropdown">
                        @{
                                                                      var optvalues = getValuesFromCSV(pvar.CustomerDataValues);
                                                                      foreach (string optv in optvalues)
                                                                      {
                                                                          var v = optv.Trim();
                                <option value="@v" @getChecked(pvar.PricingVariableName, v)>@v</option>
                                                                      }
                        }
                    </select>
                                                                      break;
                case "number":
                case "text":
                    <input type="text" id="@idprefix-@pvar.PricingVariableName" name="@pvar.PricingVariableName" value="@Request[pvar.PricingVariableName]" class="data-type-@pvar.CustomerDataInputType" />
                                                                                                                                                                        break;
                default:
                    <text>Unknowed CustomerDataInputType: @pvar.CustomerDataInputType</text>
                                                     break;
            }
        </li>
    }

    </ul>
    <div class="calculate-price-button actions">
        <button class="button calculate-price-button ajax-fieldset-submit">Calculate</button>
    </div>
    <div class="calculation">
        <table class="calculation">
            <tr><th>Time required:</th><td class="time-required">@timeRequired.ToString("#,##0.00") hour(s)</td></tr>
            <tr>
                <th><span class="time-required">@timeRequired.ToString("#,##0.00") hour(s)</span> @@ <span class="hour-price">$@hourPrice.ToString("#,##0.00")</span></th>
                <td class="subtotal-price">$@subtotalPrice.ToString("#,##0.00")</td>
            </tr>
            <tr>
                <th>Loconomics service fee:</th>
                <td class="fee-price">$@feePrice.ToString("#,##0.00")</td>
            </tr>
            <tr>
                <th>Total price:</th>
                <td class="total-price">$@totalPrice.ToString("#,##0.00")</td>
            </tr>
        </table>
    </div>
} else {
    <div class="no-pricing-wizard">
        It's not possible do a pricing estimate currently for this provider. Please, continue with the free quote waiting
        for a provider response with the price.
    </div>
}