@* 
    Pricing Wizard, Customer View, PricingType 2:Custom
 *@
@using WebMatrix.Data;
@{
    var pricingtypeid = 2;
    var clienttypeid = PageData["ClientTypeID"];
    var c = PageData["customerrow"];
    var p = PageData["providerrow"];
    var pos = PageData["positionrow"];
    var idprefix = "pricingwizard";
    dynamic pvars, poptions;
    decimal timeRequired = 0, hourPrice = 0, feePrice = 0, subtotalPrice = 0, totalPrice = 0, optionalServicesTotalPrice = 0;
    Dictionary<int, decimal> optionalServicesPrices = new Dictionary<int,decimal>();
    // Collection to save time and price for each pricing item (pricing variable, pricing options)
    // Key will be "1.VarID" or "2.OptID", first decimal is time required for the item
    // and second is calculated price for this item
    Dictionary<string, decimal[]> pricingItemsNumbers = new Dictionary<string,decimal[]>();

    using (var db = Database.Open("sqlloco")){
        // Get the Pricing Variables and with the selected Provider Value; if provider didn't select
        // previously values for a variable, that variable will not be returned.
        pvars = db.Query(@"
            SELECT  pv.PricingVariableID, pv.PricingVariableName, 
                    pv.CustomerInputDataRequired, pv.CustomerDataInputType,
                    pv.CustomerDataValues, pv.CustomerPricingVariableDisplayText,
                    pv.ProviderDataInputUnit, pv.CustomerDataInputUnit,
                    pi.PricingDataInput As ProviderDataInputValue,
                    pc.PricingDataInput As CustomerDataInputValue
            FROM    pricingvariable As pv
                     LEFT JOIN
                    providerpricingvariableinputs as pi
                      ON pv.PricingVariableID = pi.PricingVariableID
                     LEFT JOIN
                    customerpricingvariableinputs as pc
                      ON pv.PricingVariableID = pc.PricingVariableID
                        AND pc.Active = 1 AND pc.UserID = @6
            WHERE   pv.CountryID=@0 AND pv.LanguageID=@1
                     AND 
                    pv.ClientTypeID=@2 AND pv.PositionID=@3
                     AND 
                    pv.CustomerInputDataRequired = 1
                     AND
                    pv.Active = 1 AND pv.PricingTypeID = @4
                     AND
                    (
                     -- If Provider Input is not Required, it means is an informational variable -without calculation-,
                     --  no needs relationed record at providerpricingvariableinputs (pi) table
                     pv.ProviderInputDataRequired = 0
                      OR
                     -- Else, it means a Provider Input is Required in order to do calculations: because of this
                     --  the variable record is only showed/returned if there is a Provider Input Value, with the
                     --  relationship at providerpricingvariableinputs (pi) and proper conditional values
                     pi.PricingDataInput is not null
                      AND
                     pi.Active = 1 AND pi.UserID = @5
                    )
        ", 1, 1, clienttypeid, pos.PositionID, pricingtypeid, p.UserID, c.UserID);
        
        // Get provider hour price
        hourPrice = db.QueryValue(@"
            SELECT  TOP 1 HourlyRate
            FROM    providerhourlyrate
            WHERE   UserID = @0 AND PositionID = @1 AND ClientTypeID = @2 AND Active = 1
        ", p.UserID, pos.PositionID, clienttypeid) ?? 0;
        
        // The the Pricing Options
        poptions = db.Query(@"
            SELECT  pr.PricingOptionID, pr.PricingOptionName, 
                    pr.CustomerInputDataRequired, pr.CustomerDataInputType,
                    pr.CustomerDataValues, pr.CustomerPricingOptionDisplayText,
                    pr.ProviderDataInputUnit, pr.CustomerDataInputUnit,
                    pr.ServiceAttributeID,
                    pi.PricingDataInput As ProviderDataInputValue,
                    pi.ProviderTimeRequired,
                    pc.PricingDataInput As CustomerDataInputValue
            FROM    pricingoption As pr
                     LEFT JOIN
                    providerpricingoptioninputs as pi
                      ON pr.PricingOptionID = pi.PricingOptionID
                     LEFT JOIN
                    customerpricingoptioninputs as pc
                      ON pr.PricingOptionID = pc.PricingOptionID
                        AND pc.Active = 1 AND pc.UserID = @6
            WHERE   pr.CountryID=@0 AND pr.LanguageID=@1
                     AND 
                    pr.ClientTypeID=@2 AND pr.PositionID=@3
                     AND 
                    pr.CustomerInputDataRequired = 1
                     AND
                    pr.Active = 1 AND pr.PricingTypeID = @4
                     AND
                    (
                     -- If Provider Input is not Required, it means is an informational variable -without calculation-,
                     --  no needs relationed record at providerpricingvariableinputs (pi) table
                     pr.ProviderInputDataRequired = 0
                      OR
                     -- Else, it means a Provider Input is Required in order to do calculations: because of this
                     --  the variable record is only showed/returned if there is a Provider Input Value, with the
                     --  relationship at providerpricingvariableinputs (pi) and proper conditional values
                     pi.PricingDataInput is not null
                      AND
                     pi.Active = 1 AND pi.UserID = @5
                    )
        ", 1, 1, clienttypeid, pos.PositionID, pricingtypeid, p.UserID, c.UserID);
    }
    
    if (IsPost){
        /* DO CALCULATION: (not only on /calculate url, is neede to save data too)
         */
        // Calculate time required per Pricing Variables
        foreach (var pvar in pvars){
            string customerValue = Request[pvar.PricingVariableName];
                
            // Get provider value for this pricing variable
            string providerValue = pvar.ProviderDataInputValue;
            decimal timeInHours = 0;
                
            // Analizing the provider value depending on the data-type ('unit' field in the database)
            decimal provValueAsDecimal = 0;
            switch ((string)pvar.ProviderDataInputUnit){
                case "minutes":
                    decimal.TryParse(providerValue, out provValueAsDecimal);
                    // Getting the provider Item Time in Hours
                    timeInHours = provValueAsDecimal / 60;
                    break;
                case "hours":
                    decimal.TryParse(providerValue, out provValueAsDecimal);
                    // Provider value are just in hours:
                    timeInHours = provValueAsDecimal;
                    break;
                default:
                    break;
            }
            // Analizing the customer value depending on the data-type ('unit' field in the database)
            decimal custValueAsDecimal = 0;
            switch ((string)pvar.CustomerDataInputUnit){
                case "number":
                case "times":
                case "quantity":
                    decimal.TryParse(customerValue, out custValueAsDecimal);
                    // Customer value is the quantity of items or times item value is repeated.
                    // To get the final time value, multiply by item time in hours
                    // (no on timeInHours, reusing this local var to save total time after this:)
                    timeInHours = timeInHours * custValueAsDecimal;
                    break;
                default:
                    break;
            }
            
            timeRequired += timeInHours;
            pricingItemsNumbers["1." + pvar.PricingVariableID.ToString()] = new decimal[]{timeInHours, hourPrice * timeInHours};
        }
        // Calculating the price for Pricing Options
        foreach (var popt in poptions){               
            decimal optPrice = 0;
                
            if (Request[(string)popt.PricingOptionName + "-check"] == "true") {
                string strprice = popt.ProviderDataInputValue.Replace("$", "");
                decimal unitprice = 0;
                decimal.TryParse(strprice, out unitprice);
                decimal quantity = 0;
                switch ((string)popt.CustomerDataInputUnit) {
                    case "number":
                    case "times":
                    case "quantity":
                        quantity = Request[(string)popt.PricingOptionName].AsDecimal();
                        break;
                    case "":
                    default:
                        quantity = 1;
                        break;
                }
                optPrice = quantity * unitprice;
                // Get the equivalent time required from table
                decimal timeVar = 0;
                if (popt.ProviderTimeRequired is decimal) {
                    timeVar = (decimal)popt.ProviderTimeRequired;
                }
                pricingItemsNumbers["2." + popt.PricingOptionID.ToString()] = new decimal[]{timeVar, optPrice};
            }
            optionalServicesPrices.Add(popt.PricingOptionID, optPrice);
            optionalServicesTotalPrice += optPrice;
        }
            
        subtotalPrice = timeRequired * hourPrice + optionalServicesTotalPrice;
        feePrice = .1M * subtotalPrice;
        totalPrice = subtotalPrice + feePrice;

        /* SAVE DATA 
         */
        // If request post is not for only calculate, we save the data
        if (UrlData[0].ToLower() != "calculates"){
            var sqlSetVar = @"
                BEGIN TRAN
                    UPDATE  customerpricingvariableinputs WITH (serializable)
                    SET     PricingDataInput = @0,
                            UpdatedDate = getdate(),  
                            ModifiedBy = 'sys',
                            Active = 1
                    WHERE   UserId = @1 AND PricingVariableID = @2

                   IF @@rowcount = 0
                   BEGIN
                        INSERT INTO customerpricingvariableinputs (PricingDataInput,
                            UserID, PricingVariableID, CreatedDate, UpdatedDate, 
                            ModifiedBy, Active)
                        VALUES (@0, @1, @2, getdate(), getdate(), 'sys', 1)
                   END
                COMMIT TRAN
            ";
            var sqlDelVar = @"
                DELETE FROM customerpricingvariableinputs
                WHERE       UserId = @0 AND PricingVariableID = @1
            ";
            var sqlSetOpt = @"
                BEGIN TRAN
                    UPDATE  customerpricingoptioninputs WITH (serializable)
                    SET     PricingDataInput = @0,
                            UpdatedDate = getdate(),  
                            ModifiedBy = 'sys',
                            Active = 1
                    WHERE   UserId = @1 AND PricingOptionID = @2

                   IF @@rowcount = 0
                   BEGIN
                        INSERT INTO customerpricingoptioninputs (PricingDataInput,
                            UserID, PricingOptionID, CreatedDate, UpdatedDate, 
                            ModifiedBy, Active)
                        VALUES (@0, @1, @2, getdate(), getdate(), 'sys', 1)
                   END
                COMMIT TRAN
            ";
            var sqlDelOpt = @"
                DELETE FROM customerpricingoptioninputs
                WHERE       UserId = @0 AND PricingOptionID = @1
            ";
            
            /* sql example to implement custom auto increment in a secure mode (but with possible deadlocks)
                BEGIN TRAN
                    SELECT @id = MAX(id) + 1 FROM Table1 WITH (UPDLOCK, HOLDLOCK)
                    INSERT INTO Table1(id, data_field)
                    VALUES (@id ,'[blob of data]')
                COMMIT TRAN
             */
            var sqlInsEstimate = @"
                INSERT INTO [pricingestimate]
                           ([PricingEstimateID]
                           ,[PricingEstimateRevision]
                           ,[PricingTypeID]
                           ,[ServiceDuration]
                           ,[TotalPriceEstimate]
                           ,[CreatedDate]
                           ,[UpdatedDate]
                           ,[ModifiedBy]
                           ,[Active])
                     VALUES
                           (@0, @1, @2, @3, @4, getdate(), getdate(), 'sys', 1)
            ";
            var sqlInsEstimateDetails = @"
                INSERT INTO [pricingestimatedetail]
                           ([PricingEstimateID]
                           ,[PricingEstimateRevision]
                           ,[PricingVariableID]
                           ,[PricingSurchargeID]
                           ,[PricingOptionID]
                           ,[ServiceAttributeID]
                           ,[ProviderPackageID]
                           ,[ProviderPricingDataInput]
                           ,[CustomerPricingDataInput]
                           ,[SystemPricingDataInput]
                           ,[ProviderHourlyRate]
                           ,[TimeEstimate]
                           ,[PriceEstimate]
                           ,[CreatedDate]
                           ,[UpdatedDate]
                           ,[ModifiedBy])
                     VALUES (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, getdate(), getdate(), 'sys')
            ";
        
            using (var db = Database.Open("sqlloco")){
                
                /* Save data into pricingwizard tables to remember customer preferences
                */
                
                // Iterate all variables and save into customerpricingvariableinputs
                foreach (var pvar in pvars) {
                    db.Execute(sqlSetVar, Request[pvar.PricingVariableName], c.UserID, pvar.PricingVariableID);
                }
                // Iterate all options and save into customerpricingoptioninputs
                foreach (var popt in poptions) {
                    if (Request[popt.PricingOptionName + "-check"] == "true") {
                        // Value to set can be null for options without quantity/value (only check), that cases
                        // we set value '1'
                        db.Execute(sqlSetOpt, Request[popt.PricingOptionName] ?? 1, c.UserID, popt.PricingOptionID);
                    } else {
                        db.Execute(sqlDelOpt, c.UserID, popt.PricingOptionID);
                    }
                }
                
                /* Save data into the pricingestimate tables because we are in booking
                 * process (we have a BookingRequestID).
                 */
                PageData["BookingRequestID"] = 2;
                var revisionID = PageData["PricingEstimateRevisionID"] ?? 1;
                var bookingrequestid = PageData["BookingRequestID"];
                if (bookingrequestid is int){
                    // Inserting Estimate with calculated details
                    db.Execute(sqlInsEstimate, bookingrequestid, revisionID,
                        pricingtypeid, timeRequired, totalPrice);
                    // Inserting details: every variable, option
                    foreach (var pvar in pvars) {
                        // Get pair time and price
                        decimal[] timeprice = pricingItemsNumbers["1." + pvar.PricingVariableID.ToString()];
                        // Insert data:
                        db.Execute(sqlInsEstimateDetails, bookingrequestid, revisionID,
                            pvar.PricingVariableID,
                            0, 0, 0, 0,
                            pvar.ProviderDataInputValue,
                            Request[pvar.PricingVariableName],
                            0, // systemPricingDataInput
                            hourPrice,
                            timeprice[0], timeprice[1]);
                    }
                    foreach (var popt in poptions) {
                        if (Request[popt.PricingOptionName + "-check"] == "true") {
                            // Get pair time and price
                            decimal[] timeprice = pricingItemsNumbers["2." + popt.PricingOptionID.ToString()];
                            // Insert data:
                            db.Execute(sqlInsEstimateDetails, bookingrequestid, revisionID,
                                0, 0,
                                popt.PricingOptionID,
                                popt.ServiceAttributeID,
                                0,
                                popt.ProviderDataInputValue,
                                Request[popt.PricingOptionName] ?? 1,
                                0, // systemPricingDataInput
                                hourPrice,
                                timeprice[0], timeprice[1]);
                        }
                    }
                }
            }
            
            // All OK:
            //CommonHelpers.ReturnJsonResult(0, null);
        }
    }
}
@functions{
    string[] getValuesFromCSV(string line){
        return line.Split(',');
    }
}
@helper getChecked(string name, string value, dynamic poptvar){
    // Get checked if was setted by form of is was previously setted at database
    @Html.Raw((Request[name] == value || poptvar.CustomerDataInputValue != null) ? "checked='checked'" : "")
}
@helper getSelected(string name, string value, dynamic poptvar){
    @Html.Raw((Request[name] == value || poptvar.CustomerDataInputValue == value) ? "selected='selected'" : "")
}
@if (pvars.Count > 0)
{
    <ul class="pricing-vars">
    @foreach (var pvar in pvars)
    {
        <li class="@pvar.PricingVariableName data-type-@pvar.CustomerDataInputType">
            <label for="@idprefix-@pvar.PricingVariableName">@pvar.CustomerPricingVariableDisplayText</label>
            @switch ((string)@pvar.CustomerDataInputType)
            {
                case "dropdown":
                    <select id="@idprefix-@pvar.PricingVariableName" name="@pvar.PricingVariableName">
                        @{
                            var optvalues = getValuesFromCSV(pvar.CustomerDataValues);
                            foreach (string optv in optvalues)
                            {
                                var v = optv.Trim();
                                <option value="@v" @getSelected(pvar.PricingVariableName, v, pvar)>@v</option>
                            }
                        }
                    </select>
                    break;
                case "number":
                case "text":
                    <input type="text" id="@idprefix-@pvar.PricingVariableName" name="@pvar.PricingVariableName" value="@(Request[pvar.PricingVariableName] ?? pvar.CustomerDataInputValue)"/>
                    break;
                case "":
                    break;
                default:
                    <text>Unknowed CustomerDataInputType: @pvar.CustomerDataInputType</text>
                    break;
            }
        </li>
    }
    </ul>
}

@if (poptions.Count > 0) {
    <table class="pricing-options">
        <thead>
            <tr>
                <th>Services upon request</th>
                <th>Item Price</th>
                <th>Quantity</th>
                <th>Total Price</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var popt in poptions)
        {
            <tr class="@popt.PricingOptionName data-type-@popt.CustomerDataInputType">
                <td class="pricing-option-check">
                    <input type="checkbox" name="@popt.PricingOptionName-check" id="@idprefix-@popt.PricingOptionName" @getChecked(popt.PricingOptionName + "-check", "true", popt) value="true" />
                    <label for="@idprefix-@popt.PricingOptionName">@popt.CustomerPricingOptionDisplayText</label>
                </td>
                <td class="pricing-option-item-price number money">
                    @popt.ProviderDataInputValue
                </td>
                <td class="pricing-option-quantity number">
                @switch ((string)@popt.CustomerDataInputType)
                {
                    case "dropdown":
                        <select id="@idprefix-@popt.PricingOptionName" name="@popt.PricingOptionName">
                            @{
                                var optvalues = getValuesFromCSV(popt.CustomerDataValues);
                                foreach (string optv in optvalues)
                                {
                                    var v = optv.Trim();
                                    <option value="@v" @getSelected(popt.PricingOptionName, v, popt)>@v</option>
                                }
                             }
                        </select>
                        break;
                    case "number":
                    case "text":
                        <input type="text" id="@idprefix-@popt.PricingOptionName" name="@popt.PricingOptionName" value="@(Request[popt.PricingOptionName] ?? popt.CustomerDataInputValue)"/>
                        break;
                    case "":
                        <text>N/A</text>
                        break;
                    default:
                        <text>Unknowed CustomerDataInputType: @popt.CustomerDataInputType</text>
                        break;
                }
                </td>
                <td class="pricing-option-total-price calculated number money">
                    $@((optionalServicesPrices.ContainsKey(popt.PricingOptionID) ? optionalServicesPrices[popt.PricingOptionID] : 0).ToString("#,##0.00"))
                </td>
            </tr>
        }
        </tbody>
    </table>
    <div class="calculate-price-button actions">
        <button class="button calculate-price-button ajax-fieldset-submit">Calculate</button>
    </div>
    <div class="calculation">
        <table class="calculation">
            <tr><th>Time required:</th><td class="time-required">@timeRequired.ToString("#,##0.00") hour(s)</td></tr>
            <tr>
                <th><span class="time-required">@timeRequired.ToString("#,##0.00") hour(s)</span> @@ <span class="hour-price">$@hourPrice.ToString("#,##0.00")</span></th>
                <td class="subtotal-price">$@subtotalPrice.ToString("#,##0.00")</td>
            </tr>
            <tr>
                <th>Optional Services</th>
                <td class="optional-services">$@optionalServicesTotalPrice.ToString("#,##0.00")</td>
            </tr>
            <tr>
                <th>Loconomics service fee:</th>
                <td class="fee-price">$@feePrice.ToString("#,##0.00")</td>
            </tr>
            <tr>
                <th>Total price:</th>
                <td class="total-price">$@totalPrice.ToString("#,##0.00")</td>
            </tr>
        </table>
    </div>
}

@if (poptions.Count == 0 && pvars.Count == 0) {
    <div class="no-pricing-wizard">
        It's not possible do a pricing estimate currently for this provider. Please, continue with the free quote waiting
        for a provider response with the price.
    </div>
}