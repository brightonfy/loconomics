@using WebMatrix.Data;
@{
    var embMode = PageData["EmbeddedMode"] ?? "none"; // possible values: front-end, back-end, calculate, full
    var clienttypeid = PageData["ClientTypeID"] ?? Request["ClientTypeID"].AsInt();
    var pricingtypeid = PageData["PricingTypeID"] ?? Request["PricingTypeID"].AsInt();
    var c = PageData["customerrow"];
    var p = PageData["providerrow"];
    var pos = PageData["positionrow"];
    var idprefix = (PageData["idprefix"] ?? "position" + pos.PositionID.ToString() + "pricingwizard") + "-options";
    decimal timeRequired = 0, optionalServicesTotalPrice = 0;
    dynamic poptions;
    Dictionary<int, decimal> optionalServicesPrices = new Dictionary<int,decimal>();
    // Collection to save time and price for each pricing option item
    // Key will be OptionID, first decimal is time required for the item
    // and second is calculated price for this item
    var pricingOptionsNumbers = new Dictionary<int,decimal[]>();
    
    using (var db = Database.Open("sqlloco")){
        poptions = db.Query(@"
            SELECT  pr.PricingOptionID, pr.PricingOptionName, 
                    pr.CustomerInputDataRequired, pr.CustomerDataInputType,
                    pr.CustomerDataValues, pr.CustomerPricingOptionDisplayText,
                    pr.ProviderDataInputUnit, pr.CustomerDataInputUnit,
                    pr.ServiceAttributeID,
                    pi.PricingDataInput As ProviderDataInputValue,
                    pi.ProviderTimeRequired,
                    pc.PricingDataInput As CustomerDataInputValue
            FROM    pricingoption As pr
                     LEFT JOIN
                    providerpricingoptioninputs as pi
                      ON pr.PricingOptionID = pi.PricingOptionID
                     LEFT JOIN
                    customerpricingoptioninputs as pc
                      ON pr.PricingOptionID = pc.PricingOptionID
                        AND pc.Active = 1 AND pc.UserID = @6
            WHERE   pr.LanguageID=@0 AND pr.CountryID=@1
                     AND 
                    pr.ClientTypeID=@2 AND pr.PositionID=@3
                     AND 
                    pr.CustomerInputDataRequired = 1
                     AND
                    pr.Active = 1 AND pr.PricingTypeID = @4
                     AND
                    (
                     -- If Provider Input is not Required, it means is an informational variable -without calculation-,
                     --  no needs relationed record at providerpricingoptioninputs (pi) table
                     pr.ProviderInputDataRequired = 0
                      OR
                     -- Else, it means a Provider Input is Required in order to do calculations: because of this
                     --  the variable record is only showed/returned if there is a Provider Input Value, with the
                     --  relationship at providerpricingoptioninputs (pi) and proper conditional values
                     pi.PricingDataInput is not null
                      AND
                     pi.Active = 1 AND pi.ProviderUserID = @5
                    )
        ", LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID(), clienttypeid, pos.PositionID, pricingtypeid, p.UserID, c.UserID);
    }
    
    if (IsPost && Validation.IsValid() && embMode != "front-end"){
        // CALCULATING the price for Pricing Options
        foreach (var popt in poptions){
            decimal optPrice = 0;
                
            if (Request[(string)popt.PricingOptionName + "-check"] == "true") {
                string strprice = popt.ProviderDataInputValue.Replace("$", "");
                decimal unitprice = 0;
                decimal.TryParse(strprice, out unitprice);
                decimal quantity = 0;
                switch ((string)popt.CustomerDataInputUnit) {
                    case "number":
                    case "times":
                    case "quantity":
                        quantity = Request[(string)popt.PricingOptionName].AsDecimal();
                        break;
                    case "":
                    default:
                        quantity = 1;
                        break;
                }
                optPrice = Math.Round(quantity * unitprice, 2);
                // Get the equivalent time required from table
                decimal timeVar = 0;
                if (popt.ProviderTimeRequired is decimal) {
                    timeVar = (decimal)popt.ProviderTimeRequired;
                }
                // Add pricing option estimate time to the total time,
                // it's in minutes, we use hours for timeRequired:
                timeRequired += Math.Round(timeVar / 60, 2);
                pricingOptionsNumbers[popt.PricingOptionID] = new decimal[]{timeVar, optPrice};
            }
            optionalServicesPrices.Add(popt.PricingOptionID, optPrice);
            optionalServicesTotalPrice += optPrice;
        }
        // Preparing calculated data to be returned lately
        var calculatedData = new Dictionary<string, object>{
            { "TimeRequired", timeRequired },
            { "OptionalServicesTotalPrice", optionalServicesTotalPrice }
        };
        int dataSaved = -1; // error code for not saved (maybe becaused we are only calculating and is not an error itself)
        
        if (embMode != "calculate") {
            // Save data
            var sqlSetOpt = @"
                BEGIN TRAN
                    UPDATE  customerpricingoptioninputs WITH (serializable)
                    SET     PricingDataInput = @0,
                            UpdatedDate = getdate(),  
                            ModifiedBy = 'sys',
                            Active = 1
                    WHERE   UserId = @1 AND PricingOptionID = @2

                   IF @@rowcount = 0
                   BEGIN
                        INSERT INTO customerpricingoptioninputs (PricingDataInput,
                            UserID, PricingOptionID, CreatedDate, UpdatedDate, 
                            ModifiedBy, Active)
                        VALUES (@0, @1, @2, getdate(), getdate(), 'sys', 1)
                   END
                COMMIT TRAN
            ";
            var sqlDelOpt = @"
                DELETE FROM customerpricingoptioninputs
                WHERE       UserId = @0 AND PricingOptionID = @1
            ";
            var sqlInsEstimateDetails = @"
                INSERT INTO [pricingestimatedetail]
                           ([PricingEstimateID]
                           ,[PricingEstimateRevision]
                           ,[PricingVariableID]
                           ,[PricingSurchargeID]
                           ,[PricingOptionID]
                           ,[ServiceAttributeID]
                           ,[ProviderPackageID]
                           ,[ProviderPricingDataInput]
                           ,[CustomerPricingDataInput]
                           ,[SystemPricingDataInput]
                           ,[ProviderHourlyRate]
                           ,[TimeEstimate]
                           ,[PriceEstimate]
                           ,[CreatedDate]
                           ,[UpdatedDate]
                           ,[ModifiedBy])
                     VALUES (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, getdate(), getdate(), 'sys')
            ";
            using (var db = Database.Open("sqlloco")){
                /* Save data into pricingwizard tables to remember customer preferences
                */
                // Iterate all options and save into customerpricingoptioninputs
                foreach (var popt in poptions) {
                    if (Request[popt.PricingOptionName + "-check"] == "true") {
                        // Value to set can be null for options without quantity/value (only check), that cases
                        // we set value '1'
                        db.Execute(sqlSetOpt, Request[popt.PricingOptionName] ?? 1, c.UserID, popt.PricingOptionID);
                    } else {
                        db.Execute(sqlDelOpt, c.UserID, popt.PricingOptionID);
                    }
                }
                
                /* Save data into the pricingestimate tables
                 */
                foreach (var popt in poptions) {
                    if (Request[popt.PricingOptionName + "-check"] == "true") {
                        // Get pair time and price
                        decimal[] timeprice = pricingOptionsNumbers[popt.PricingOptionID];
                        // Insert data:
                        db.Execute(sqlInsEstimateDetails, 
                            PageData["EstimateID"], PageData["RevisionID"],
                            0, 0,
                            popt.PricingOptionID,
                            popt.ServiceAttributeID,
                            0,
                            popt.ProviderDataInputValue,
                            Request[popt.PricingOptionName] ?? 1,
                            0, // systemPricingDataInput
                            0, // hourlyRate (options are not calculated based on a hourly rate, save 0)
                            timeprice[0], timeprice[1]);
                    }
                }
                dataSaved = 0; // saved successfully
            }
        }
        
        if (embMode == "none") {
            LcHelpers.ReturnJsonResult(0, LcRessources.DataSaved);
        } else {
            LcHelpers.RenderPageReturns = new Dictionary<string, object> {
                { "CalculatedData", calculatedData },
                { "SavedCode", dataSaved }
            };
        }
    }
}
@helper getChecked(string name, string value, dynamic poptvar){
    // Get checked if was setted by form of is was previously setted at database
    @Html.Raw((Request[name] == value || poptvar.CustomerDataInputValue != null) ? "checked='checked'" : "")
}
@helper getSelected(string name, string value, dynamic poptvar){
    @Html.Raw((Request[name] == value || poptvar.CustomerDataInputValue == value) ? "selected='selected'" : "")
}
@if (embMode != "back-end" && embMode != "calculate") {
    LcHelpers.RenderPageReturns = new Dictionary<string, object>() {
        { "OptionsCount", poptions.Count }
    };
    if (poptions.Count > 0) {
        <table class="pricing-options calculate-items-totals">
            <thead>
                <tr>
                    <th></th>
                    <th class="name">@(PageData["TableTitle"] ?? "Services upon request")</th>
                    <th class="duration number">Duration</th>
                    <th class="number">Item Price</th>
                    <th class="number">Quantity</th>
                    <th class="number">Total Price</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var popt in poptions)
            {
                <tr class="@popt.PricingOptionName data-type-@popt.CustomerDataInputType">
                    <td><input type="checkbox" name="@popt.PricingOptionName-check" id="@idprefix-@popt.PricingOptionName-check" @getChecked(popt.PricingOptionName + "-check", "true", popt) value="true" /></td>
                    <td class="pricing-option-check name">
                        <label for="@idprefix-@popt.PricingOptionName-check">@popt.CustomerPricingOptionDisplayText</label>
                    </td>
                    <td class="pricint-option-duration duration">@popt.ProviderTimeRequired minutes</td>
                    <td class="pricing-option-item-price number money calculate-item-price">@popt.ProviderDataInputValue</td>
                    <td class="pricing-option-quantity number">
                    @switch ((string)@popt.CustomerDataInputType)
                    {
                        case "dropdown":
                            <select id="@idprefix-@popt.PricingOptionName" name="@popt.PricingOptionName" class="calculate-item-quantity">
                                @{
                                    var optvalues = LcHelpers.GetValuesFromCSVLine(popt.CustomerDataValues);
                                    foreach (string optv in optvalues)
                                    {
                                        var v = optv.Trim();
                                        <option value="@v" @getSelected(popt.PricingOptionName, v, popt)>@v</option>
                                    }
                                 }
                            </select>
                            break;
                        case "number":
                        case "text":
                            <input type="text" class="calculate-item-quantity" id="@idprefix-@popt.PricingOptionName" name="@popt.PricingOptionName" value="@(Request[popt.PricingOptionName] ?? popt.CustomerDataInputValue)"/>
                            break;
                        case "":
                            <text>N/A</text>
                            break;
                        default:
                            <text>Unknown CustomerDataInputType: @popt.CustomerDataInputType</text>
                            break;
                    }
                    </td>
                    <td class="pricing-option-total-price calculated number money">
                        $<span class="calculate-item-total">@((optionalServicesPrices.ContainsKey(popt.PricingOptionID) ? optionalServicesPrices[popt.PricingOptionID] : 0).ToString("#,##0.00"))</span>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}