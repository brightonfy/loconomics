@*
    This page loads the estimation variables for a given position and provider, depending on
    the pricing type selected by the provider. The input is stored in the DDBB and used 
    during the pricing wizzard.

    INPUT:
        provider ID: the service provider.
        postion ID: the position that we are getting the estimate for.
        pricing type: the pricing type selected by the provider in the drop down

*@
@using System.Text.RegularExpressions;
@{
    // Current position data record:
    var p = PageData["position"];
    // Current position number/index
    var n = PageData["npos"];
    
    var idprefix = "position#" + n + "-pricing";

    
    //Validation messages
    var vm3 = "Pricing Type ID is required.(Testing message)";
    var vm4 = "The value must be a number (Testing errors message)";
    
    //Error messages
    var em1 = "estimate Variable Value is required.(Testing Error Message)";
    var em2 = "SQL error saving the estimation var value (Testing errors message)";
    
    var providerID = Convert.ToString(WebSecurity.CurrentUserId);
    var positionID = p.PositionID;
    var pricingTypeID = "";
    var servicePricingTypeID = 0;
    var estimateVarValue = "";
    var errors = "";
    var sysdate = DateTime.Now;


    //INPUT validations
    
    if(IsPost && ModelState.IsValid){
        
        pricingTypeID = Request["pricingtype"];
        string[] varValues = Context.Request.Form.GetValues("varValue");
        string[] varIDs = Context.Request.Form.GetValues("varID");
        string[] listValues = Context.Request.Form.GetValues("listValue");
        string[] groupIDs = Context.Request.Form.GetValues("groupID");
     
        // Read product providerID.

        if (pricingTypeID.IsEmpty())
        {
            ModelState.AddError("pricingTypeID", vm3);
        }

        if(ModelState.IsValid) {

            using(var db = Database.Open("sqlloco")){
                pricingTypeID = Request["pricingtype"];
                varValues = Context.Request.Form.GetValues("varValue");
                varIDs = Context.Request.Form.GetValues("varID");
                listValues = Context.Request.Form.GetValues("listValue");
                groupIDs = Context.Request.Form.GetValues("groupID");
             
                var SQLISNEW = @"SELECT ServicePricingTypeID 
                                FROM dbo.servicepricingtype 
                                WHERE ProviderID=@0 and PositionID=@1 and PricingTypeID=@2";
                var SQLISNEWVAR = @"SELECT ProviderEstimateProfileID 
                                    FROM dbo.providerestimateprofile 
                                    WHERE EstimateVarID=@0 and ServicePricingTypeID=@1";
                var SQLINSERT = @"INSERT INTO dbo.servicepricingtype 
                                (ProviderID,PositionID,PricingTypeID,CreatedDate,UpdatedDate,ModifiedBy) 
                                VALUES (@0,@1,@2,@3,@4,@5)";
                var SQLINSERT2 = @"INSERT INTO dbo.providerestimateprofile 
                                (ServicePricingTypeID,EstimateVarID,EstimateVarValue,CreatedDate,UpdatedDate,ModifiedBy) 
                                VALUES (@0,@1,@2,@3,@4,@5)";
                var SQLUPDATE = @"UPDATE dbo.providerestimateprofile 
                                Set EstimateVarValue=@2 , UpdatedDate=@3 , ModifiedBy=@4                         
                                WHERE ServicePricingTypeID=@0 and EstimateVarID=@1";
            
                //Insert a service pricing type mapping into serviceprincingtype table
                var newServicePricingType = db.QuerySingle(SQLISNEW,providerID,positionID,pricingTypeID);
                if (newServicePricingType == null)
                {            
                        db.Execute(SQLINSERT, providerID, positionID, pricingTypeID,sysdate,sysdate,"UserID:"+providerID);
                        servicePricingTypeID=Convert.ToInt32(db.GetLastInsertId());
                }else{
                    servicePricingTypeID = Convert.ToInt32(newServicePricingType.ServicePricingTypeID);
                    //TODO load stored data
                }

                //Insert estimate profile into providerestimatevar 
                for(int i=0; i< varIDs.Length;i++){

                    var newEstimateVar = db.QuerySingle(SQLISNEWVAR, varIDs[i], servicePricingTypeID);
                
                    estimateVarValue = varValues[i];
               
                    if(estimateVarValue.IsEmpty()){
                        ModelState.AddError("estimateVarValue", em1);
                    }
                        //validate data
                        //Validate is a Number
                    try{
                        if(!estimateVarValue.IsEmpty()){
                            Decimal.Parse(estimateVarValue);
                        }
                    }catch{
                        ModelState.AddError("estimateVarValue",vm4);
                    }
                    try{
                        if (newEstimateVar == null)
                        {
                            db.Execute(SQLINSERT2, servicePricingTypeID, varIDs[i], estimateVarValue.IsEmpty() ? null : estimateVarValue, sysdate, sysdate, "UserID:" + providerID);
                        }
                        else
                        {
                            db.Execute(SQLUPDATE, servicePricingTypeID, varIDs[i], estimateVarValue.IsEmpty() ? null : estimateVarValue, sysdate, "UserID:" + providerID);
                        }
                    }catch{
                        ModelState.AddError("estimateVarValue",em2);
                    }
                }
            }
        }
    }
}
<p class="setting-instructions">
Set the estimate parameters for your service.
</p>

@* If at least one validation error exists, notify the user *@
@if(IsPost && !ModelState.IsValid){
    Html.ValidationSummary(errors);
}

<!--This script paints the pricing variables for the selected pricing type-->  
<script type="text/javascript" src="@(UrlUtil.AppPath)Scripts/PricingWizard.Provider.js"></script>

<form action="#" method="post" class="positionpricing pricingwizard" id="@idprefix">
    <input type="hidden" name="position-number" value="@n"/>
    <input type="hidden" name="position-id" value="@p.PositionID"/>
    <fieldset class="pricingtype">
        <label for="@(idprefix)-pricingtype">Pincing Type</label>
        <select id="@(idprefix)-pricingtype" name="pricingtype"></select>
    </fieldset>

    <p class="inputfields" style="display: none"></p>

    <fieldset class="actions">
		<button class="next main-action" type="submit">Save</button>
    </fieldset>
</form>