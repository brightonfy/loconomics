@* 
    Pricing Wizard, Provider Setup View, PricingType 2:Custom
 *@
@using WebMatrix.Data;
@{
    var clienttypeid = PageData["ClientTypeID"];
    var p = LcData.UserInfo.GetUserRow();
    var pos = LcData.UserInfo.GetUserCurrentPos();
    var idprefix = PageData["idprefix"] ?? "position" + pos.PositionID.ToString() + "pricingwizard";
    dynamic pvars;
    dynamic hourlyRate = 0;
    var redirectURL = LcHelpers.GetRedirectURLFromReferrer("/alerts");
    var positionEnabled = false;
    var positionStatus = pos.StatusID;

    using (var db = Database.Open("sqlloco")){
        // Get the Pricing Variables with the selected Provider Value
        pvars = db.Query(@"
            SELECT  pv.PricingVariableID, pv.PricingVariableName, 
                    pv.ProviderInputDataRequired, pv.ProviderDataInputType,
                    pv.ProviderDataValues, pv.ProviderPricingVariableDisplayText,
                    pv.ProviderDataInputUnit,
                    pi.PricingDataInput As ProviderDataInputValue
            FROM    pricingvariable As pv
                     LEFT JOIN
                    providerpricingvariableinputs as pi
                      ON pv.PricingVariableID = pi.PricingVariableID
                       AND pi.Active = 1 AND pi.ProviderUserID = @5
            WHERE   pv.CountryID=@0 AND pv.LanguageID=@1
                     AND 
                    pv.ClientTypeID=@2 AND pv.PositionID=@3
                     AND 
                    pv.ProviderInputDataRequired = 1
                     AND
                    pv.Active = 1 AND pv.PricingTypeID = @4
        ", 1, 1, clienttypeid, pos.PositionID, 2, p.UserID);
        
        // Get hourly rate
        hourlyRate = db.QueryValue(@"
            SELECT  HourlyRate
            FROM    ProviderHourlyRate
            WHERE   UserID = @0
                        AND
                    PositionID = @1
                        AND
                    ClientTypeID = @2
        ", p.UserID, pos.PositionID, PageData["ClientTypeID"]);
    }
    
    // IMPORTANT: because limitations of 'asp.net web pages', add several times the
    // same validation rule (that happens if this page is added more than one time
    // in the same execution, like with multiple positions providers), 
    // page WILL BREAK if we don't check if we added rules previously:
    if (Validation.GetHtml("hourly-rate") == null) {
        Validation.RequireField("hourly-rate", "Please, enter your hourly rate");
    }
    
    // IMPORTANT NOTE: There are some crazy problems with validation inside RenderPage's
    // with form outside, I don't know why but break validation and modelstate errors control
    // Doing some manual check, adding ModelState errors if validation fails (must be auto, but not
    // just here !?).
    if (IsPost) {
        if (Validation.IsValid()) {
            if (!Request["hourly-rate"].IsDecimal()){
                ModelState.AddError("hourly-rate", "Hourly rate must be a number");
            }
        } else {
            ModelState.AddError("hourly-rate", "Please, enter your hourly rate");
        }
    }
    
    if (IsPost && Validation.IsValid() && ModelState.IsValid){
        var sqlSetVar = @"
            BEGIN TRAN
                UPDATE  providerpricingvariableinputs WITH (serializable)
                SET     PricingDataInput = @0,
                        UpdatedDate = getdate(),  
                        ModifiedBy = 'sys',
                        Active = 1
                WHERE   ProviderUserId = @1 AND PricingVariableID = @2

               IF @@rowcount = 0
               BEGIN
                    INSERT INTO providerpricingvariableinputs (PricingDataInput,
                        ProviderUserID, PricingVariableID, CreatedDate, UpdatedDate, 
                        ModifiedBy, Active)
                    VALUES (@0, @1, @2, getdate(), getdate(), 'sys', 1)
               END
            COMMIT TRAN
        ";
        /*var sqlDelVar = @"
            DELETE FROM providerpricingvariableinputs
            WHERE       ProviderUserId = @0 AND PricingVariableID = @1
        ";*/
        var sqlSetHourlyRate = @"
            BEGIN TRAN
                UPDATE  ProviderHourlyRate WITH (serializable)
                SET     HourlyRate = @3
                WHERE   UserID = @0
                         AND
                        PositionID = @1
                         AND
                        ClientTypeID = @2

                IF @@rowcount = 0 BEGIN
                    INSERT INTO ProviderHourlyRate (
                        UserID, PositionID, ClientTypeID,
                        HourlyRate, CreatedDate, UpdatedDate, ModifiedBy, Active
                    ) VALUES (@0, @1, @2, @3, getdate(), getdate(), 'sys', 1)
                END
            COMMIT TRAN
        ";
        
        using (var db = Database.Open("sqlloco")){
            // Iterate all variables and save into providerpricingvariableinputs
            foreach (var pvar in pvars) {
                db.Execute(sqlSetVar, Request[pvar.PricingVariableName], p.UserID, pvar.PricingVariableID);
            }
            
            // Execute 'save' code of Pricing Options page
            @RenderPage("$ProviderPricingOptions.cshtml", new { EmbeddedMode = "back-end" } );
            if (LcHelpers.RenderPageReturns != 0) {
                ModelState.AddFormError("Options not saved");
            }
            
            if (ModelState.IsValid) {
                // Save Hourly Rate
                db.Execute(sqlSetHourlyRate,
                    p.UserID,
                    pos.PositionID,
                    PageData["ClientTypeID"],
                    Request["hourly-rate"].AsDecimal());
                // Test alert conditions to update alert and provider state
                db.Execute("EXEC TestAlertPricingDetails @0,@1",
                    p.UserID,
                    pos.PositionID);
            }
        }
            
        if (ModelState.IsValid) {
            int newStatus = LcData.UserInfo.GetUserPositionStatus(pos.UserID, pos.PositionID);
            positionEnabled = (newStatus == 1 && newStatus != positionStatus);
            if (positionEnabled) {
                redirectURL = null;
            }
            string success = positionEnabled
                ? LcRessources.GetText("DataSavedAndPositionEnabled", pos.PositionSingular, LcData.UserInfo.GetMyPublicURL())  
                : LcRessources.DataSaved;
            if (!String.IsNullOrEmpty(redirectURL)) {
                LcHelpers.ReturnJsonResult(4, new { SuccessMessage = success, RedirectURL = redirectURL } );
            } else {
                LcHelpers.ReturnJsonResult(0, success);
            }
        }
    }
}
@helper getChecked(string name, string value, dynamic poptvar){
    // Get checked if was setted by form of is was previously setted at database
    @Html.Raw((Request[name] == value || poptvar.ProviderDataInputValue != null) ? "checked='checked'" : "")
}
@helper getSelected(string name, string value, object value2){
    var valuealt = (value2 == null ? "" : value2.ToString());
    @Html.Raw((Request[name] == value || valuealt == value) ? "selected='selected'" : "")
}

<form action="@(UrlUtil.LangPath)Dashboard/$PositionsPricing/" method="post" class="@PageData["PricingWizardClasses"] pricingwizard ajax ajax-box" id="@idprefix">
    <input type="hidden" name="PositionID" value="@pos.PositionID"/>
    <input type="hidden" name="RedirectURL" value="@(redirectURL)" />
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="pricing-wizard">
        <fieldset class="hourly-rate">
            <label>My hourly rate ($):
                <input type="text" class="number money" value="@(Request["hourly-rate"] ?? hourlyRate)" name="hourly-rate" @Validation.GetHtml("hourly-rate")/>
            </label>
        </fieldset>
        <fieldset class="pricing-wizard-details">
        @if (pvars.Count > 0)
        {
            <table class="pricing-vars">
                <thead>
                    <tr>
                        <th>Please enter an estimate for each variable below (don't worry, these can be updated at any time):</th>
                        <th>Average Time</th>
                    </tr>
                </thead>
                <tbody>
            @foreach (var pvar in pvars)
            {
                <tr class="@pvar.PricingVariableName data-type-@pvar.ProviderDataInputType">
                    <td class="pricing-item-name pricing-var-name">
                        <label for="@idprefix-var-@pvar.PricingVariableName">@pvar.ProviderPricingVariableDisplayText</label>
                    </td>
                    <td class="pricing-var-value">
                    @switch ((string)@pvar.ProviderDataInputType)
                    {
                        case "dropdown":
                            <select id="@idprefix-var-@pvar.PricingVariableName" name="@pvar.PricingVariableName">
                                @{
                                    var optvalues = LcHelpers.GetValuesFromCSVLine(pvar.ProviderDataValues);
                                    foreach (string optv in optvalues)
                                    {
                                        var v = optv.Trim();
                                        <option value="@v" @getSelected(pvar.PricingVariableName, v, pvar.ProviderDataInputValue)>@v @pvar.ProviderDataInputUnit</option>
                                    }
                                }
                            </select>
                            break;
                        case "number":
                        case "text":
                            <input type="text" id="@idprefix-var-@pvar.PricingVariableName" name="@pvar.PricingVariableName" value="@(Request[pvar.PricingVariableName] ?? pvar.ProviderDataInputValue)"/>
                            break;
                        case "":
                            break;
                        default:
                            <text>Unknowed ProviderDataInputType: @pvar.ProviderDataInputType</text>
                            break;
                    }
                    </td>
                </tr>
            }
               </tbody>
           </table>
        } else {
            <div class="no-pricing-wizard">
                We're currently researching how best to calculate pricing estimates for this position.  We'd love to get your input; please <a href="mailto:providerhelp@loconomics.com">e-mail us</a>. 
            </div>
        }
        @RenderPage("$ProviderPricingOptions.cshtml", new { EmbeddedMode = "front-end", idprefix = idprefix, PricingTypeID = 2 } )
        </fieldset>
        <fieldset class="actions">
		    <button class="button main-action" type="submit">Save</button>
        </fieldset>
    </fieldset>
</form>
