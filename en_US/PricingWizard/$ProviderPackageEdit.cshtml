@using WebMatrix.Data;
@{
    LcHelpers.SecurePage();
    var p = LcData.UserInfo.GetUserRow();
    var packageID = Request["ProviderPackageID"].AsInt();
    var positionID = PageData["PositionID"] ?? Request["PositionID"].AsInt();
    var attributesInPackage = new List<int>();
    var action = Request["action"] ?? "edit"; // Possible values: delete, edit (by default, no checked)
    
    if (action == "delete") {
        var sqlDelPackage = @"
            DELETE ProviderPackage
            WHERE ProviderPackageID = @0
                    AND ProviderUserID = @1
                    AND PositionID = @2

            -- Test Alert
            EXEC TestAlertPricingDetails @1, @2
        ";
        using (var db = Database.Open("sqlloco")) {
            db.Execute(sqlDelPackage, packageID, p.UserID, positionID);
            
            LcHelpers.ReturnJsonResult(0, "Package removed succesfully");
        }
    }
    
    Validation.RequireField("package-name", LcRessources.RequiredField("Package name"));
    Validation.RequireField("package-description", LcRessources.RequiredField("Description"));
    Validation.RequireField("price", LcRessources.RequiredField("Price"));
    Validation.RequireField("minutes", LcRessources.RequiredField("Session duration in minutes"));
    Validation.RequireField("sessions-number", LcRessources.RequiredField("Number of sessions"));
    Validation.Add("price", Validator.Decimal("Price must be a number"));
    Validation.Add("minutes", Validator.Integer("Session duration in minutes must be a number without decimals"));
    Validation.Add("sessions-number", Validator.Integer("Number of sessions must be a number without decimals"));
    
    if (IsPost) {
        var checkedAtts = Request.Form.GetValues("package-service-attribute");
        if (checkedAtts != null && checkedAtts.Length > 0) {
            foreach (var att in checkedAtts) {
                int attId = att.AsInt();
                if (attId > 0) {
                    attributesInPackage.Add(attId);
                }
            }
        }
        
        if (Validation.IsValid()) {
            var sqlSetPackage = @"
                DECLARE @PackageID int
                SET @PackageID = @0
            
                IF @PackageID = 0 BEGIN
                    INSERT INTO ProviderPackage (
                        ProviderUserID
                        ,PositionID
                        ,LanguageID
                        ,CountryID
                        ,ProviderPackageName
                        ,ProviderPackageDescription
                        ,ProviderPackagePrice
                        ,ProviderPackageServiceDuration
                        ,FirstTimeClientsOnly
                        ,NumberOfSessions
                        ,CreatedDate
                        ,UpdatedDate
                        ,ModifiedBy
                        ,Active
                    ) VALUES (
                        @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, getdate(), getdate(), 'sys', 1
                    )
                    SET @PackageID = @@Identity
                END ELSE
                    UPDATE ProviderPackage SET
                        ProviderPackageName = @5
                        ,ProviderPackageDescription = @6
                        ,ProviderPackagePrice = @7
                        ,ProviderPackageServiceDuration = @8
                        ,FirstTimeClientsOnly = @9
                        ,NumberOfSessions = @10
                        ,UpdatedDate = getdate()
                        ,ModifiedBy = 'sys'
                        ,Active = 1
                    WHERE ProviderPackageID = @PackageID

                -- Test Alert
                EXEC TestAlertPricingDetails @1, @2

                SELECT @PackageID As ProviderPackageID
            ";
            var sqlDelDetails = @"
                DELETE FROM ProviderPackageDetail
                WHERE ProviderPackageID = @0
            ";
            var sqlSetDetail = @"
                BEGIN TRAN
                    UPDATE  ProviderPackageDetail WITH (serializable)
                    SET     Active = 1,
                            UpdatedDate = getdate(),
                            ModifiedBy = 'sys'
                    WHERE   ProviderPackageID = @0 AND ServiceAttributeID = @1

                    IF @@rowcount = 0
                    BEGIN
                        INSERT INTO ProviderPackageDetail (
                            ProviderPackageID, ServiceAttributeID, 
                            CreatedDate, UpdatedDate, 
                            ModifiedBy, Active)
                        VALUES (@0, @1, getdate(), getdate(), 'sys', 1)
                    END
                COMMIT TRAN
            ";
            using (var db = Database.Open("sqlloco")) {
                packageID = db.QueryValue(sqlSetPackage, packageID,
                    p.UserID, positionID, 
                    LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID(),
                    Request["package-name"],
                    Request["package-description"],
                    Request["price"].AsDecimal(),
                    Request["minutes"].AsDecimal(),
                    Request["first-time-clients-only"].AsBool(),
                    Request["sessions-number"].AsInt()
                );
                db.Execute(sqlDelDetails, packageID);
                foreach(var att in attributesInPackage) {
                    db.Execute(sqlSetDetail,
                        packageID,
                        att
                    );
                }
            }
        
            LcHelpers.ReturnJsonResult(0, null);
        }
    }
    
    dynamic package = null, attributes = null;
    using (var db = Database.Open("sqlloco")) {
        if (!IsPost && packageID > 0) {
            package = db.QuerySingle(@"
                SELECT  p.ProviderPackageID
                        ,p.ProviderPackageName As Name
                        ,p.ProviderPackageDescription As Description
                        ,p.ProviderPackagePrice As Price
                        ,p.ProviderPackageServiceDuration As ServiceDuration
                        ,p.FirstTimeClientsOnly
                        ,p.NumberOfSessions
                        ,p.ProviderUserID
                        ,p.PositionID
                FROM    providerpackage As p
                WHERE   p.ProviderPackageID = @0
                         AND 
                        p.LanguageID = @1 AND p.CountryID = @2
                         AND 
                        p.Active = 1
            ", packageID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
            // If there is a package to be edited (packageID different from 0 and exists and we will edit it)
            // we overwrite the positionID field with that from database (package var) to avoid some 'hacks' with
            // data corruption
            if (package != null) {
                positionID = package.PositionID;
            }
            // getting attributes included in this package
            var packagesdetails = db.Query(@"
                SELECT  PD.ServiceAttributeID
                FROM    ProviderPackageDetail As PD
                WHERE   PD.ProviderPackageID = @0
                         AND PD.Active = 1
            ", packageID);
            if (packagesdetails != null) {
                foreach(var pakatt in packagesdetails) {
                    attributesInPackage.Add(pakatt.ServiceAttributeID);
                }
            }
        }
        // Getting full attributes for the position (all categories)
        attributes = db.Query(@"EXEC GetServiceAttributes @0,@1,@2,@3,@4",
            positionID, 0, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID(), p.UserID);
    }
}
<form method="post" class="ajax ajax-box provider-package" action="@(UrlUtil.LangPath)PricingWizard/$ProviderPackageEdit/?ProviderPackageID=@(packageID)&PositionID=@(positionID)">
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="package-data">
        <input class="package-name" type="text" name="package-name" placeholder="Type the name of the package; e.g., Introductory Special" value="@(Request["package-name"] ?? (package == null ? "" : package.Name))" />
        <label class="package-sessions">Number of sessions included in this package: 
            <input type="text" name="sessions-number" value="@(Request["sessions-number"] ?? (package == null ? "" : package.NumberOfSessions))" /></label>
        <label class="package-price">Total price for package: 
            <input type="text" name="price" value="@(Request["price"] ?? (package == null ? "" : package.Price))" /></label>
        <label class="package-duration">Duration of each session: 
            <input type="text" name="minutes" value="@(Request["minutes"] ?? (package == null ? "" : package.ServiceDuration))" /> minutes</label>
        <label class="only-first-time-clients">
            <input type="checkbox" name="first-time-clients-only" value="True" @LcHelpers.IsChecked(true, Request["first-time-clients-only"] ?? (package == null ? false : package.FirstTimeClientsOnly)) />
            This package is only available to first-time clients
        </label>
        <label class="package-description">
            <textarea name="package-description" placeholder="Describe in full detail what the client will receive.">@(Request["package-description"] ?? (package == null ? "" : package.Description))</textarea>
        </label>
    </fieldset>
    <fieldset class="package-details">
        <h5>Services included in this package:</h5>
        @{
            var attPrintedCount = 0;
            if (attributes != null)
            {
                <ul class="provider-package-services">
                @{
                    foreach (var att in attributes)
                    {
                        // Ever filter by EligibleForPackages
                        // And this loop filter to by UserChecked:
                        if (att.EligibleForPackages && att.UserChecked)
                        {
                            attPrintedCount++;
                            <li title="@att.ServiceAttribute" data-description="@att.ServiceAttributeDescription">
                                <label><input name="package-service-attribute" type="checkbox" @LcHelpers.IsChecked(true, attributesInPackage.Contains(att.ServiceAttributeID)) value="@att.ServiceAttributeID" /> @att.ServiceAttribute</label>
                            </li>
                        }
                    }
                }
                </ul>
                if (attributes.Count > attPrintedCount) {
                    <a href="#show-more-attributes" class="show-more-attributes" data-hide-text="Show less service attributes">Show more service attributes</a>
                    <ul class="provider-package-services services-not-checked">
                    @{
                        foreach (var att in attributes)
                        {
                            // Ever filter by EligibleForPackages
                            // And this loop filter to by NOT UserChecked:
                            if (att.EligibleForPackages && !att.UserChecked)
                            {
                                attPrintedCount++;
                                <li title="@att.ServiceAttribute" data-description="@att.ServiceAttributeDescription">
                                    <label><input name="package-service-attribute" type="checkbox" @LcHelpers.IsChecked(true, attributesInPackage.Contains(att.ServiceAttributeID)) value="@att.ServiceAttributeID" /> @att.ServiceAttribute</label>
                                </li>
                            }
                        }
                    }
                    </ul>
                }
            }

            if (attPrintedCount == 0)
            {
                <div class="empty">There are not service attributes defined for your position eligible for packages.</div>
            }
        }
            
    </fieldset>
    <fieldset class="actions">
        <button type="button" class="button cancel-action">Cancel</button>
        <button class="button main-action">Save</button>
    </fieldset>
</form>