@* 
    Pricing Wizard, Customer View, PricingType 3:Packages
 *@
@using WebMatrix.Data;
@{
    LcHelpers.SecurePage();
    
    var clienttypeid = PageData["ClientTypeID"] ?? 1;
    var p = PageData["providerrow"] ?? (PageData["providerrow"] = LcData.UserInfo.GetUserRow(Request["providerid"].AsInt()));
    var c = PageData["customerrow"] ?? (PageData["customerrow"] = LcData.UserInfo.GetUserRow());
    var pos = PageData["positionrow"] ?? (PageData["positionrow"] = LcData.UserInfo.GetUserPos(Request["providerid"].AsInt(),
        Request["positionid"].AsInt()));
    
    int pricingEstimateID = 0, pricingEstimateRevision = 1;
        
    var idprefix = "booking-services-package-pricing";
    var pricingtypeid = 3;
    var preSelectedPackage = Request["PackageID"];
    var selectedPackage = Request["provider-package"] ?? preSelectedPackage;
    var selectedAddons = Request.Form.GetValues("provider-package-addons");
    if (selectedAddons == null) {
        selectedAddons = new string[0];
    }
    dynamic thePackage = null;
    
    decimal timeRequired = 0, timeFirstSession = 0, hourPrice = 0, feePrice = 0, subtotalPrice = 0, totalPrice = 0, optionalServicesTotalPrice = 0,
        packagesQuantity = 0, totalPackagesPrice = 0, totalAddonsPrice = 0;
    
    if (IsPost){
        /* DO CALCULATION: (not only on /calculate url, is need to save data too)
         */
        
        if (!selectedPackage.IsInt()) {
            ModelState.AddFormError("Package selected is not valid");
        }
        
        if (ModelState.IsValid) {
            
            // Get database data for selected package
            var paksAndDetails = LcData.GetProviderPackageByProviderPosition(pos.UserID, pos.PositionID, selectedPackage.AsInt());
            if (paksAndDetails.Packages.Count == 0) {
                ModelState.AddFormError("Package selected is not valid");
            } else {
                thePackage = paksAndDetails.Packages[0];

                // Calculate time and price required for selected package

                // We get the time of one service - one session. ServiceDuration is in Minutes ever, convert to hours:
                decimal sessionTimeInHours = Math.Round((decimal)thePackage.ServiceDuration / 60, 2);
                timeFirstSession += sessionTimeInHours;
            
                decimal packageTimeInHours = Math.Round(sessionTimeInHours * thePackage.NumberOfSessions, 2);
                timeRequired += packageTimeInHours;
            
                decimal pakPrice = Math.Round(thePackage.Price, 2);
                totalPackagesPrice += pakPrice;
                subtotalPrice += pakPrice;
            
                // Calculate time and price for selected addons packages
                var selectedAddonsData = new List<dynamic>();
                if (selectedAddons != null && selectedAddons.Length > 0) {
                    foreach (var addon in selectedAddons) {
                        var addonID = addon.AsInt();
                        if (addonID > 0) {
                            var addonData = LcData.GetProviderPackageByProviderPosition(pos.UserID, pos.PositionID, addonID).Packages[0];

                            decimal sesHours = Math.Round((decimal)addonData.ServiceDuration / 60, 2);
                            timeFirstSession += sesHours;
            
                            decimal pakHours = Math.Round(sesHours * addonData.NumberOfSessions, 2);
                            timeRequired += pakHours;
            
                            decimal addonPrice = Math.Round(addonData.Price, 2);
                            totalAddonsPrice += addonPrice;
                            subtotalPrice += addonPrice;
                        
                            selectedAddonsData.Add(new {
                                addonID = addonID
                                ,sesHours = sesHours
                                ,pakHours = pakHours
                                ,addonPrice = addonPrice
                            });
                        }
                    }
                }

                // Calculating the price for Pricing Options
                @RenderPage("$CustomerPricingOptions.cshtml", new { 
                    EmbeddedMode = "calculate",
                    PricingTypeID = pricingtypeid, ClientTypeID = clienttypeid
                } );
                var optionsCalculation = LcHelpers.RenderPageReturns["CalculatedData"];
                timeRequired += optionsCalculation["TimeRequired"];
                timeFirstSession += optionsCalculation["TimeRequired"];
                optionalServicesTotalPrice = optionsCalculation["OptionalServicesTotalPrice"];
                subtotalPrice += optionalServicesTotalPrice;
        
                feePrice = Math.Round(.1M * subtotalPrice, 2);
                totalPrice = subtotalPrice + feePrice;

                /* SAVE DATA 
                 */
                // If request post is not only for calculate, save data
                if (UrlData[0].ToLower() != "calculate"){       
                    using (var db = Database.Open("sqlloco")){
                
                        /* Save data into the pricingestimate tables
                         */
                        /*var revisionID = 1;
                        var estimateID = 0;
                        if (PageData["PricingEstimateData"] != null){
                            try{
                                estimateID = (int)PageData["PricingEstimateData"]["PricingEstimateID"];
                                revisionID = (int)PageData["PricingEstimateData"]["PricingEstimateRevision"];
                            }catch{}
                        }*/

                        // Inserting Estimate with calculated details
                        var insreturned = db.QuerySingle(LcData.Booking.sqlInsEstimate, pricingEstimateID, pricingEstimateRevision,
                            pricingtypeid, 
                            // We use first-session time only because is what affects the schedule of this booking; 
                            // timeRequired' has the accumulative time of all sessions that will happen on different days
                            timeFirstSession,
                            hourPrice, subtotalPrice, feePrice, totalPrice);
                        pricingEstimateID = insreturned.PricingEstimateID;
                        pricingEstimateRevision = insreturned.PricingEstimateRevision;

                        // Inserting details of package selected by customer
                        db.Execute(LcData.Booking.sqlInsEstimateDetails, pricingEstimateID, pricingEstimateRevision,
                            0, 0, 0, 0, 
                            selectedPackage.AsInt(),
                            null, // there is no provider value
                            1, // ever quantity 1
                            0, // systemPricingDataInput
                            hourPrice,
                            packageTimeInHours, pakPrice);
                    
                        // Inserting details of addons packages selected by customer
                        foreach (var addon in selectedAddonsData)
                        {
                            db.Execute(LcData.Booking.sqlInsEstimateDetails, pricingEstimateID, pricingEstimateRevision,
                                0, 0, 0, 0, 
                                addon.addonID,
                                null, // there is no provider value
                                1, // ever quantity 1
                                0, // systemPricingDataInput
                                hourPrice,
                                addon.pakHours, addon.addonPrice);
                        }

                        // Execute 'save' code of Pricing Options page
                        @RenderPage("$CustomerPricingOptions.cshtml", new { 
                            EmbeddedMode = "back-end", 
                            EstimateID = pricingEstimateID, RevisionID = pricingEstimateRevision,
                            PricingTypeID = pricingtypeid, ClientTypeID = clienttypeid
                        } );
                        if (LcHelpers.RenderPageReturns["SavedCode"] != 0) {
                            ModelState.AddFormError("Options not saved");
                        }
                
                        /*
                        // If we have valid IDs, all is OK: instead of return a JSON, we left IDs in PageData
                        if (PageData["PricingEstimateData"] == null){
                            PageData["PricingEstimateData"] = new Dictionary<string, object> { 
                                { "PricingEstimateID", estimateID }, 
                                { "PricingEstimateRevision", revisionID },
                                { "PricingEstimateErrorMessage", "" } };
                        } else {
                            PageData["PricingEstimateData"]["PricingEstimateID"] = estimateID;
                            PageData["PricingEstimateData"]["PricingEstimateRevision"] = revisionID;
                        }
                        // We can return a negative data in PageData["PricingEstimateData"]["PricingEstimateID"] to set error code and add
                        // a PageData["PricingEstimateData"]["PricingEstimateErrorMessage"] for details.
                        */
                
                        /*
                        * Create Booking Request
                        */
                        try {
                            var bookingRequestID = LcData.Booking.CreateRequest(
                                c.UserID, 
                                p.UserID, 
                                pos.PositionID,
                                pricingEstimateID,
                                Request["booking-services-special-instructions"]
                            );

                        } catch (Exception ex) {
                            LcHelpers.ReturnJsonError(-1, ex.Message);
                        }
                    }
                    // All fine, continue wizard next step:
                    LcHelpers.ReturnJsonResult(0, null);
                }
            }
        }
    }
    
    var packages = LcData.GetProviderPackageByProviderPosition(pos.UserID, pos.PositionID);
    var thereAreAddons = false;
    foreach (var pak in packages.Packages) {
        if (pak.IsAddOn) {
            thereAreAddons = true;
            break;
        }
    }
}
@helper printQuantities(int q)
{
    for(int i = 0; i < 21; i++) {
        <option @LcHelpers.IsSelected(q, i) value="@i">@i</option>
    }
}

<form action="@(UrlUtil.LangPath)PricingWizard/$CustomerPackagesType/" method="post" class="services package-pricing calculate-summary" id="booking-services">
    <input type="hidden" name="providerid" value="@pos.UserID"/>
    <input type="hidden" name="positionid" value="@pos.PositionID"/>
    <fieldset class="ajax ajax-box step-blocks" data-ajax-fieldset-action="@(UrlUtil.LangPath)PricingWizard/$CustomerPackagesType/Calculate/?providerid=@(p.UserID)&amp;positionid=@(pos.PositionID)">
        @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)

        <fieldset class="select-packages">
            <legend>Please select a package</legend>
            <table class="packages-list calculate-summary-group" data-calculation-summary-group="packages">
                <tr>
                    <th></th>
                    <th class="package-name name">Name</th>
                    <th class="package-sessions number">Included sessions</th>
                    <th class="package-duration number">Duration</th>
                    <th class="package-total-price number">Price</th>
                </tr>
                @foreach (var pak in packages.Packages)
                {
                    if (!pak.IsAddOn)
                    {
                    <tr>
                        <td>
                            <input id="@(idprefix)-package-@(pak.ProviderPackageID)" class="calculate-item-checked" type="radio" @LcHelpers.IsChecked(pak.ProviderPackageID, Request["provider-package"]) name="provider-package" value="@pak.ProviderPackageID" />
                        </td>
                        <td class="package-name name">
                            <label for="@(idprefix)-package-@(pak.ProviderPackageID)">@pak.Name</label>
                        </td>
                        <td class="package-sessions number">@pak.NumberOfSessions</td>
                        <td class="package-duration number">@pak.ServiceDuration minutes</td>
                        <td class="package-total-price calculate-item-total number">@(String.Format("{0:c}", pak.Price))</td>
                    </tr>
                    }
                }
            </table>
        </fieldset>
        @if (thereAreAddons)
        {
        <fieldset class="packages-list packages-add-ons">
            <legend>Select add-on services</legend>
            <table class="packages-list calculate-summary-group" data-calculation-summary-group="addons">
                <tr>
                    <th></th>
                    <th class="package-name name">Name</th>
                    <th class="package-duration number">Duration</th>
                    <th class="package-total-price number">Price</th>
                </tr>
                @foreach (var pak in packages.Packages)
                {
                    if (pak.IsAddOn)
                    {
                    <tr>
                        <td>
                            <input id="@(idprefix)-package-@(pak.ProviderPackageID)" class="calculate-item-checked" type="checkbox" @LcHelpers.IsChecked(selectedAddons.Contains(((int)pak.ProviderPackageID).ToString()), true) name="provider-package-addons" value="@pak.ProviderPackageID" />
                        </td>
                        <td class="package-name name">
                            <label for="@(idprefix)-package-@(pak.ProviderPackageID)">@pak.Name</label>
                        </td>
                        <td class="package-duration number">@pak.ServiceDuration minutes</td>
                        <td class="package-total-price calculate-item-total number">@(String.Format("{0:c}", pak.Price))</td>
                    </tr>
                    }
                }
            </table>
        </fieldset>
        }
        <fieldset class="package-pricing-options">
            <legend>Please add any additional options you’d like</legend>
            @RenderPage("$CustomerPricingOptions.cshtml", new { 
                EmbeddedMode = "front-end"
                ,idprefix = idprefix
                ,PricingTypeID = pricingtypeid
                ,ClientTypeID = clienttypeid
            })
        </fieldset>
        <fieldset class="special-instructions">
            <legend>Any details that might help @c.FirstName perform the service better?</legend>
            <textarea rows="7" name="booking-services-special-instructions">@Request["booking-services-special-instructions"]</textarea>
        </fieldset>

        <fieldset>
            <legend>Pricing summary</legend>

            @if (LcHelpers.RenderPageReturns["OptionsCount"] == 0 && packages.Packages.Count == 0)
            {
                <div class="no-pricing-wizard">
                Currently we're unable to provide a pricing estimate for this provider. Please proceed to book a free estimate with the provider to determine a fair price together.
                </div>
            }
            else
            {

                    <div class="calculate-price-button actions">
                        <button class="button action calculate-price-button ajax-fieldset-submit">Calculate</button>
                    </div>

                <div class="calculation">
                    <table class="calculation calculation-summary">
                        @*<tr><td></td><th>Time required - first session:</th><td class="time-required">@timeFirstSession.ToString("#,##0.00") hour(s)</td></tr>
                        <tr><td></td><th>Time required - all sessions:</th><td class="time-required">@timeRequired.ToString("#,##0.00") hour(s)</td></tr>*@
                        <tr class="main-item">
                            <td></td><th>@(thePackage == null ? "Package" : thePackage.Name)</th>
                            <td class="packages-price calculation-summary-group-packages">@totalPackagesPrice.ToString("c")</td>
                        </tr>
                        <tr>
                            <td></td><th>Add-on services</th>
                            <td class="calculation-summary-group-addons">@totalAddonsPrice.ToString("c")</td>
                        </tr>
                        <tr>
                            <td></td><th>Optional Services</th>
                            <td class="optional-services calculation-summary-group-options">@optionalServicesTotalPrice.ToString("c")</td>
                        </tr>
                        @*<tr>
                            <td></td><th>Subtotal</th>
                            <td class="subtotal-price">$@subtotalPrice.ToString("#,##0.00")</td>
                        </tr>*@
                        <tr class="separator">
                            <td></td><td class="separator" colspan="2"></td>
                        </tr>
                        <tr class="total">
                            <td><input type="checkbox" disabled="disabled" style="position:relative;right:99999px"/></td><th class="name">Total price*</th>
                            <td class="calculation-summary-total total-price">@totalPrice.ToString("c")</td>
                        </tr>
                        <tr class="fees">
                            <td></td>
                            <th>*includes a @feePrice.ToString("c") Loconomics service fee</th>
                        </tr>
                    </table>
                </div>
            }
        </fieldset>
    </fieldset>
    <fieldset class="actions">
        <button data-wizard-next-step="#schedule" class="button schedule-service-button next main-action">Save & continue</button>
    </fieldset>
    @if (IsPost)
    {
        <script type="text/javascript">
            lcSetupCalculateTableItemsTotals();
            LC.setupCalculateSummary(true);
        </script>
    }
</form>