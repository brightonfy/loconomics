@*
View:
        this page containg a dropdown with the Pricing types,
        after selecting the pricing type, the script PricingWizard.js
        loads the estimation vars for the specified position and pricing type.
Data:
    Input
        positionID : the position ID 
        pricingTypeID : the pricing type ID
        providerID : the provider ID
        string[] varValues :an array containing the estimation vars values. 
        string[] varIDs :an array containing the ID of the vars used for the estimation
        string[] listValues : this array contains the var values for vars of radio list and dropdown types
        string[] groupIDs : an array containing the Ids of the radio list and dropdown list
    Output
        result : the estimated cost for the service
        time : the estimated time for the service
*@
@using System.Text.RegularExpressions;
@using WebMatrix.WebData;
@{
    //Validation messages
    var vm1 = "The position ID is required to make an estimation, you have to access this wizard from a provider profile(Testing error message)";
    var vm2 = "The provider ID is required to make an estimation, you have to access this wizard from a provider profile(Testing error message)";
    var vm3 = "The pricing type ID is required to make an estimation, please select one pricing type from the list(Testing error message)";
    
    //Error messages
    var em1 = "SQL error reading the provider pricing profile (Testing Error Message)";
         
    if (WebSecurity.IsAuthenticated) {
        Layout = UrlUtil.LangPath + "_SiteLayout.cshtml";
        var UserID  = WebSecurity.CurrentUserId;
    }else{
        Response.Redirect(UrlUtil.LangPath + "Account/Login/");
    }
    var userID = Convert.ToString(WebSecurity.CurrentUserId);
    var positionID = Request["PositionID"];
    var providerID = Request["ProviderID"];
    var pricingTypeID = "";
    var estimateVarID = "";
    var value = 0m;
    var servicePricingTypeID = 0;
    var errors = "";
    var sysdate = DateTime.Now;
    var hourlyWage = 10m;  //Testing default value //TODO: GET THE VALUE FROM DDBB
    var A = 0m;//hours(Customer), $/hour(Provider)
    var T = 0m;//amount(Customer) hours(Provider)
    var M = 1m;//multiplier -> a factor that multiplies the estimation result(Thoroughtness high:2 medium:1.5 low:1)
    var E = 0m;//adder -> an add on value (Ex. supplies, taxes)

    
    if (positionID == null || positionID == "")
    {
        ModelState.AddError("positionID",vm1);
        //TODO: ADD LOG MESSAGE
    };
    if (providerID == null || providerID == "")
    {
        ModelState.AddError("providerID", vm2);
        //TODO: ADD LOG MESSAGE
    };
    
    if(IsPost && ModelState.IsValid ){
       
        pricingTypeID = Request["pricingtype"];

        var result = 0m;
        string[] varValues = Context.Request.Form.GetValues("varValue");
        string[] varIDs = Context.Request.Form.GetValues("varID");
        string[] listValues = Context.Request.Form.GetValues("listValue");
        string[] groupIDs = Context.Request.Form.GetValues("groupID");

        if ((pricingTypeID == null || pricingTypeID == "") && (Request["advancer"] == "getestimate"))
        {
            ModelState.AddError("pricingTypeID", vm3);
            //TODO: add a log message
        };

        if (ModelState.IsValid && (Request["advancer"] == "getestimate"))
        {
            var db = Database.Open("sqlloco");
 
            //Get the service pricing type relation
            var SQLServicePricingType = @"SELECT ServicePricingTypeID 
                           FROM dbo.servicepricingtype 
                           WHERE ProviderID=@0 and PositionID=@1 and PricingTypeID=@2";
            var servicePricingType = db.QuerySingle(SQLServicePricingType, providerID, positionID, pricingTypeID);

            servicePricingTypeID = servicePricingType == null ? 0 : Convert.ToInt32(servicePricingType.ServicePricingTypeID);
        
            //TODO: SELECT HOURLY WAGE-> where is it stored?

            //Read estimate profile from providerestimatevar 
            var SQLSelectVar = @"SELECT pep.EstimateVarValue as varValue, ev.UserDescription, ev.Type  FROM dbo.providerestimateprofile pep
                            JOIN dbo.estimatevar ev  ON ev.EstimateVarID = pep.EstimateVarID
                            WHERE pep.ServicePricingTypeID=@0 AND pep.EstimateVarID=@1";
              
            //Process simple inputs
            for (int i = 0; i < varIDs.Length; i++)
            {
                estimateVarID = varIDs[i];

                value = 0m;
                dynamic estimateProfile;
                try{ 
                    estimateProfile = db.QuerySingle(SQLSelectVar, servicePricingTypeID, estimateVarID);
                    //Validate is a Number
                    try
                    {
                        value = Decimal.Parse(varValues[i]);
                    }
                    catch
                    {
                        ModelState.AddError("listValue", estimateProfile.UserDescription + " must be a number(Testing Error Message)");
                        //TODO: add a log message
                    }
                    if (ModelState.IsValid)
                    {

                        //TODO get provider data for the varID           
                        if (estimateProfile.Type == "A")
                        {
                            A += value * estimateProfile.varValue;
                        }
                        else if (estimateProfile.Type == "T")
                        {
                            T += value * estimateProfile.varValue;
                        }
                        else if (estimateProfile.Type == "M")
                        {
                            M *= estimateProfile.varValue;
                        }
                        else if (estimateProfile.Type == "E")
                        {
                            E += estimateProfile.varValue;
                        }
                    }
                    //TODO update A M or E

                }catch{
                    ModelState.AddError("sql", em1);   
                    //TODO: add a log message
                }
            }
            //Process radioList and dropdowns
            for (int i = 0; i < groupIDs.Length; i++)
            {
                value = 0m;
                dynamic estimateProfile;
                //For list variables the var ID is retrived in the value field -> listValue
                try{
                    estimateProfile = db.QuerySingle(SQLSelectVar, servicePricingTypeID, listValues[i]);
                    //Validate is a Number
                    try
                    {
                        value = Decimal.Parse(listValues[i]);
                    }
                    catch
                    {
                        ModelState.AddError("varValue", estimateProfile.UserDescription + " must be a number");
                        //TODO: add a log message
                    }
                    if(ModelState.IsValid){
                        //Update A M or E
                        if (estimateProfile.Type == "A")
                        {
                            A += value * Decimal.Parse(estimateProfile.varValue);
                        }
                        else if (estimateProfile.Type == "T")
                        {
                            T += value * Decimal.Parse(estimateProfile.varValue);
                        }

                        else if (estimateProfile.Type == "M")
                        {
                            M *= estimateProfile.varValue;
                        }
                        else if (estimateProfile.Type == "E")
                        {
                            E += estimateProfile.varValue;
                        }         
                    }
                }catch{
                    ModelState.AddError("sql",em1 );
                    //TODO: add a log message
                }
            }
            result = ((A + (T * hourlyWage)) * M) + E;
            db.Close();
        }
        //Caculate result and retrieve it
        if(ModelState.IsValid){
            var ad = Request["advancer"];         
         
            if(Request["advancer"]=="getestimate"){
                Response.Redirect(UrlUtil.LangPath + "PricingWizard/?EstimateResult=" + result.ToString("N2") + "&PositionID=" + positionID + "&ProviderID=" + providerID);
            }
            if(Request["advancer"]=="continue"){
                   Response.Redirect(UrlUtil.LangPath + "Payments/Test/?Amount=" + Server.UrlEncode(Request["EstimateResult"]));
            }
        }
    }
}
<!--This script paints the pricing variables for the selected pricing type-->
<script type="text/javascript" src='@(UrlUtil.AppPath)Scripts/PricingWizard.js'></script>

<div id="container" class="sign-up">
    <div id="main">

        @* If at least one validation error exists, notify the user *@
        @Html.ValidationSummary(errors)

        <h1>Request free quote</h1>
	    <form id="PricingWizard" action="" method="post">
		    <img class="inset" src="@(UrlUtil.AppPath)img/media-placeholder.png" alt="" />
		    <p id="message1">Tell us what you need</p>
      
            <div class="pricingtype">
                <label id="pricingtypelabel"for="pricingtype"><b>Pincing Type</b></label>
                <select id="pricingtype" name="pricingtype"></select>
            </div>
           
            <p class="inputfields" hidden="hidden"></p>
           
            <p id="result"><b>Estimated Cost:</b> </p>
           
            <div class="buttons">
                <button id="advancer1" name="advancer" value="getestimate"class="next fancy" type="submit" >Get Estimate</button>
                <button id="advancer2" name="advancer" value ="continue" class="next fancy" type="submit">Continue</button>
				<input type="submit" name="action" value="getestimate" class="hidden" hidden='hidden' />
                <input type="submit" name="action" value="continue" class="hidden" hidden='hidden' />
			</div>
        </form>
   </div>
</div>