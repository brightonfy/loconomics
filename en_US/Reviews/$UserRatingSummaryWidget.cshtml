@using WebMatrix.Data;
@{
    //PageData["UserRatingSummaryWidget"];
    dynamic reviewRecord = PageData["ReviewRecord"];
    bool withNote = PageData["RatingWithNote"] ?? true;
    bool showReviewsCount = PageData["ShowReviewsCountAsNote"] ?? false;
    int reviewedID = PageData["ReviewedID"] ?? Request["ReviewedID"].AsInt();
    /* PositionID special values:
     * > 0 : normal value, a position gived
     * = 0 : no position, get user rated as a customer
     * = -1: no position, get user global rating as customer and provider (average combined)
     * = -2: no position, get user global rating only as provider (for all its positions)
     */
    int positionID = PageData["PositionID"] ?? Request["PositionID"].AsInt();
    int reviewerID = PageData["ReviewerID"] ?? Request["ReviewerID"].AsInt();
    string mode = PageData["RatingSummaryMode"] ?? "detailed"; // values: detailed, summary
    dynamic reviewedData = PageData["ReviewedData"];
    string reviewedDataPrefix = PageData["ReviewedDataPrefix"] ?? "";
    if (reviewedData == null){
        reviewedData = LcData.UserInfo.GetUserRow(reviewedID);
        reviewedDataPrefix = "";
    }
    
    if (reviewRecord == null) {
        var getPositionRatings = @"
                SELECT	
                        @0 As ReviewedUserID, @1 As PositionID, @2 As ReviewerUserID,
                        avg(Rating1) As Rating1,
		                avg(Rating2) As Rating2,
		                avg(Rating3) As Rating3,
                        sum(ServiceHours) As ServiceHours,
                        max(UpdatedDate) As LastRatingDate,
                        count(*) As TotalRatings,
                        sum(Answer2) As Answer2
                FROM	UserReviews
                WHERE	ProviderUserID = @0
		                 AND
		                (PositionID = @1 
                         OR @1 = -1
                         OR (@1 = -2 AND PositionID > 0))
                         AND
                        CustomerUserID = @2
        ";
        // SQL NOTE: the aggregated operations are needed to this sql mainly for the PositionID=-1 option
        // and in other cases is useful too, although results are unique per user and position, with aggregation
        // we can get default values when there are not a record for the user and avoid
        // exceptions because the null record:
        var getRatingScores = @"
            SELECT  TOP 1
                    @0 As ReviewedUserID, @1 As PositionID, 0 As ReviewerUserID,
                    coalesce(avg(Rating1), 0) As Rating1,
		            coalesce(avg(Rating2), 0) As Rating2,
		            coalesce(avg(Rating3), 0) As Rating3,
                    coalesce(sum(ServiceHours), 0) As ServiceHours,
                    coalesce(max(UpdatedDate), 0) As LastRatingDate,
                    coalesce(sum(TotalRatings), 0) As TotalRatings,
                    coalesce(sum(Answer2), 0) As Answer2
            FROM    UserReviewScores
            WHERE   UserID = @0
                     AND
		            (PositionID = @1 
                        OR @1 = -1
                        OR (@1 = -2 AND PositionID > 0))
        ";
        using (var db = Database.Open("sqlloco")) {
            if (reviewerID > 0) {
                reviewRecord = db.QuerySingle(getPositionRatings, reviewedID, positionID, reviewerID);
            } else {
                reviewRecord = db.QuerySingle(getRatingScores, reviewedID, positionID);
            }
        }
    }
    
    var note = "";
    var hours = reviewRecord.ServiceHours ?? 0;
    switch (mode) {
        case "detailed":    
            if (reviewerID > 0 && reviewRecord.LastRatingDate != null) {
                note = "*based on " + hours.ToString("#,##0.00") + " hours hired " + reviewRecord.LastRatingDate.ToShortDateString();
            } else {
                note = "*based on " + hours.ToString("#,##0.00") + " hours of work";
            }
            break;
        case "summary":
            if (showReviewsCount) {
                note = "(" + reviewRecord.TotalRatings.ToString() + ")";
            } else {
                if (reviewRecord.TotalRatings > 0) {
                    string notetpl = "";
                    var percentage = reviewRecord.Answer2 / (reviewRecord.TotalRatings == 0 ? 1 : reviewRecord.TotalRatings);
                    if (positionID > 0 || positionID == -2) {
                        notetpl = "{0:##0%} of customers would work with {1} again (based on {2} reviews).";
                    } else if (positionID == 0) {
                        notetpl = "{0:##0%} of providers would work for {1} again (based on {2} reviews).";
                    } else if (positionID == -1) {
                        notetpl = "{0:##0%} of loconomics users would work for {1} again (based on {2} reviews).";
                    }
                    note = String.Format(notetpl,
                            percentage,
                            LcHelpers.GetUserDisplayName(reviewedData, reviewedDataPrefix),
                            reviewRecord.TotalRatings);
                } else {
                    note = "This user has not yet been reviewed";
                }
            }
            break;
    }
}
@helper printProviderStartRating(dynamic posrow, string index, string rate, dynamic ratTexts){
    var id = "UserRatingSummaryWidget:" + index;
    var bid = (posrow.Columns.Contains("BookingID") ? posrow["BookingID"] : 0).ToString();
    id += 
    ":" + bid +
    ":" + posrow["PositionID"] +
    ":" + posrow["ReviewedUserID"] +
    ":" + posrow["ReviewerUserID"];
    var n = "rating" + index;
    switch(index){
        default:
            <label>@n</label>
            break;
        case "1":
        case "2":
        case "3":
            <label title="@ratTexts["Rating" + index]" data-description="@ratTexts["Rating" + index + "ProfileDescription"]">@ratTexts["Rating" + index]</label>
            break;
    }
    @RenderPage(UrlUtil.RenderLangPath + "Reviews/_StarRating.cshtml", new String[] { id, rate, "true", "image" });
}
<div class="user-rating-summary-widget user-rating user-rating-@mode @(withNote ? "has-note" : "") @(positionID == 0 ? "customer" : positionID == -1 ? "user" : "provider")">
    @switch(mode) {
        case "detailed":
            var ratTexts = LcData.GetPositionRatings(positionID == -1 ? 0 : positionID);
            <ul>
                @{
                    if (positionID > 0 || positionID == -2) {
                        for(var s=1; s < 4; s++){
                            var rate = reviewRecord["Rating" + s.ToString()] ?? 0;
                            <li>
                                @printProviderStartRating(reviewRecord, s.ToString(), rate.ToString(), ratTexts)
                            </li>
                        }
                    } else {
                        var id = "UserRatingSummaryWidget:" + reviewedID.ToString();
                        var rate = reviewRecord["Rating1"].ToString();
                        <li>
                        <label><label title="@ratTexts["Rating1"]" data-description="@ratTexts["Rating1ProfileDescription"]">@ratTexts["Rating1"]</label></label>
                        @RenderPage(UrlUtil.RenderLangPath + "Reviews/_StarRating.cshtml", new String[] { id, rate, "true", "image" })
                        </li>
                    }
                }
            </ul>
            if (withNote){
                <span class="note">@note</span>
            }
        break;
        case "summary":
            var globalRate = 0m;
            if (positionID > 0 || positionID == -2) {
                globalRate = (reviewRecord.Rating1 + reviewRecord.Rating2 + reviewRecord.Rating3) / 3m;
            } else if (positionID == 0) {
                globalRate = reviewRecord.Rating1;
            } else if (positionID == -1) {
                /* average combined between Ratings fields with values: consider that value 0 is returned
                 as a default/fallback when no values, because 1 is the minimum valid value on rating
                 form in all cases, checking if RatingX field is equal 0 let us to know that there was
                 not values introduced there, we must avoid that fields:
                */
                // First as 1, because we don't check Rating1, ever must exist almost one rating, maybe with value 0
                var fieldsNumber = 1m;
                if (reviewRecord.Rating2 > 0) {
                    fieldsNumber++;
                }
                if (reviewRecord.Rating3 > 0) {
                    fieldsNumber++;
                }
                // Sum all (including that with zero, no problem), but divide by the number of the with value:
                globalRate = (reviewRecord.Rating1 + reviewRecord.Rating2 + reviewRecord.Rating3) / fieldsNumber;
            }
            @RenderPage(UrlUtil.RenderLangPath + "Reviews/_StarRating.cshtml", new String[] { "UserRatingSummaryWidget_Customer_" + reviewedID.ToString(), globalRate.ToString(), "true", "image" })
            if (withNote) {
                <span class="note">@note</span>
            }
        break;
    }
</div>
