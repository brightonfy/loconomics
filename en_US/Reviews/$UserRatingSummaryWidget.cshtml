@using WebMatrix.Data;
@{
    //PageData["UserRatingSummaryWidget"];
    dynamic reviewRecord = PageData["ReviewRecord"];
    bool withNote = PageData["RatingWithNote"] ?? true;
    int reviewedID = PageData["ReviewedID"] ?? Request["ReviewedID"].AsInt();
    int positionID = PageData["PositionID"] ?? Request["PositionID"].AsInt();
    int reviewerID = PageData["ReviewerID"] ?? Request["ReviewerID"].AsInt();
    
    if (reviewRecord == null) {
        var getPositionRatings = @"
                SELECT	
                        @0 As ReviewedUserID, @1 As PositionID, @2 As ReviewerUserID,
                        avg(Rating1) As Rating1,
		                avg(Rating2) As Rating2,
		                avg(Rating3) As Rating3,
                        sum(ServiceHours) As ServiceHours,
                        max(UpdatedDate) As LastRatingDate
                FROM	UserReviews
                WHERE	ProviderUserID = @0
		                 AND
		                PositionID = @1
                         AND
                        CustomerUserID = @2
        ";
        // SQL NOTE: really, to get results the aggregated operations are not needed in the sql
        // but are needed to get default values when there are a record for the user and avoid
        // exceptions because the null record:
        var getRatingScores = @"
            SELECT  @0 As ReviewedUserID, @1 As PositionID, 0 As ReviewerUserID,
                    avg(Rating1) As Rating1,
		            avg(Rating2) As Rating2,
		            avg(Rating3) As Rating3,
                    sum(ServiceHours) As ServiceHours,
                    max(UpdatedDate) As LastRatingDate
            FROM    UserReviewScores
            WHERE   UserID = @0
                     AND
                    PositionID = @1
        ";
        using (var db = Database.Open("sqlloco")) {
            if (reviewerID > 0) {
                reviewRecord = db.QuerySingle(getPositionRatings, reviewedID, positionID, reviewerID);
            } else {
                reviewRecord = db.QuerySingle(getRatingScores, reviewedID, positionID);
            }
        }
    }
    
    var note = "";
    var hours = reviewRecord.ServiceHours ?? 0;
    if (reviewerID > 0 && reviewRecord.LastRatingDate != null) {
        note = "*based on " + hours.ToString("#,###.00") + " hours hired " + reviewRecord.LastRatingDate.ToShortDateString();
    } else {
        note = "*based on " + hours.ToString("#,###.00") + " hours of work";
    }
}
@helper printProviderStartRating(dynamic posrow, string index, string rate){
    var id = "UserRatingSummaryWidget:" + index;
    var bid = (posrow.Columns.Contains("BookingID") ? posrow["BookingID"] : 0).ToString();
    id += 
    ":" + bid +
    ":" + posrow["PositionID"] +
    ":" + posrow["ReviewedUserID"] +
    ":" + posrow["ReviewerUserID"];
    var n = "rating" + index;
    switch(index){
        default:
            <label>@n</label>
            break;
        case "3":
            <label>Proffesionalism</label>
            break;
        case "1":
            <label>Quality-of-work</label>
            break;
        case "2":
            <label>Efficiency</label>
            break;
    }
    @RenderPage(UrlUtil.LangPath + "Reviews/_StarRating.cshtml", new String[] { id, rate, "true" });
}
<div class="user-rating-summary-widget">
    <ul>
        @{
            if (positionID > 0) {
                for(var s=1; s < 4; s++){
                    var rate = reviewRecord["Rating" + s.ToString()] ?? 0;
                    <li>
                        @printProviderStartRating(reviewRecord, s.ToString(), rate.ToString())
                    </li>
                }
            } else {
                var id = "UserRatingSummaryWidget:" + reviewedID.ToString();
                var rate = reviewRecord["Rating1"].ToString();
                <li>
                @RenderPage(UrlUtil.LangPath + "Reviews/_StarRating.cshtml", new String[] { id, rate, "true" })
                </li>
            }
        }
    </ul>
    @if (withNote){
        <span class="note">@note</span>
    }
</div>

@*
<!-- Temporary static code -->
<div class="user-rating-summary-widget static">
    <ul>
        <li class="professionalism">
            <span class="rate"></span>Professionalism
        </li>
        <li class="quality">
            <span class="rate"></span>Quality-of-work
        </li>
        <li class="efficiency">
            <span class="rate"></span>Efficiency
        </li>
    </ul>
    <span class="note">*based on 156 hours</span>
</div>*@