@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    CommonHelpers.SecurePage();
    var thisUserID = WebSecurity.CurrentUserId;

    var positionID = Request["PositionID"] ?? PageData["PositionID"];
    var providerID = Request["ProviderID"] ?? PageData["ProviderID"];
    var paymentID = Request["BookingID"] ?? PageData["BookingID"];

    Validation.RequireField("question1", "Please response to section 1 question");
    Validation.RequireField("question2", "Please response to section 3 question");
    Validation.RequireField("rating1", "Please rate its quality of work");
    Validation.RequireField("rating2", "Please rate its efficiency");
    Validation.RequireField("rating3", "Please rate its professionalism");
    Validation.RequireField("public-review", "Please write a public review");
    Validation.RequireField("private-review", "Please write a private review");

    if(IsPost && Validation.IsValid()){

        var answer1 = Request["question1"].AsBool();
        var answer2 = Request["question2"].AsBool();
        var answer1Comment = Request["question1-comment"];
        var rating1 = Request["rating1"].AsInt();
        var rating2 = Request["rating2"].AsInt();
        var rating3 = Request["rating3"].AsInt();
        var publicreview = Request["public-review"];
        var privatereview = Request["private-review"];
        
        if (answer1 == false && answer1Comment.IsEmpty()) {
            ModelState.AddError("question1-comment", "Please, tell us what was not performed");
        }

        if(ModelState.IsValid){
            var SQLCHECK = @"SELECT r.ReviewID
                            FROM dbo.UserReviews r
                            WHERE r.PaymentID=@0";
            var SQLSELECT = @"SELECT Rating1, Rating2 ,Rating3 ,Rating4 ,TotalRatings
                            FROM dbo.ReviewScores rs
                            WHERE rs.PositionID=@0 AND rs.ProviderID=@1";
            var SQLUPDATESCORES = @"UPDATE dbo.ReviewScores
                                SET Rating1 = @0, Rating2 = @1, Rating3 = @2, Rating4 = @3, TotalRatings = @4, UpdatedDate = @5, ModifiedBy = @6
                                WHERE ProviderID = @7 AND PositionID = @8";
            var SQLINSERTSCORES = @"INSERT INTO dbo.ReviewScores
                                    (Rating1,Rating2,Rating3,Rating4,TotalRatings,ProviderID,PositionID,CreatedDate,UpdatedDate,ModifiedBy)
                                   VALUES(@0,@1,@2,@3,@4,@5,@6,@7,@8,@9)";
            var SQLINSERTREVIEW = @"INSERT INTO dbo.UserReviews 
                                (UserID,ProviderID,PositionID,PaymentID,PublicReview,PrivateReview,Rating1,Rating2,Rating3,Rating4,Answer1,Answer2,CreatedDate,UpdatedDate,ModifiedBy) 
                                VALUES (@0,@1,@2,@3,@4,@5,@6,@7,@8,@9,@10,@11,@12,@13,@14)";

            using (var db = Database.Open("sqlloco")) {
                var reviewID = db.Query(SQLCHECK, paymentID);
                //New review
                if(reviewID.Count()!=0){  
                        ModelState.AddError("Duplicated Review", "The review for this service already exist");
                };
                if(ModelState.IsValid){
                    //Look for existing scores
                    var scores = db.Query(SQLSELECT,positionID,providerID);
                    if (scores.Count() == 0)
                    {
                        //First scores for the positionID
                        db.Execute(SQLINSERTSCORES, rating1 + "", rating2 + "", rating3 + "", rating4 + "", 1 + "", providerID, positionID, System.DateTime.Now, System.DateTime.Now, "UserID: " + UserID);  
                    }
                    else {
                        foreach(var value in scores){
                            //Update Scores
                            var score1 = value.Rating1;
                            var score2 = value.Rating2;
                            var score3 = value.Rating3;
                            var score4 = value.Rating4;
                            var totalRatings = Convert.ToDecimal(value.TotalRatings);
                            //TODO change if senteces for a key/value selection
                            var newscore1 = ((score1 * totalRatings) + (Convert.ToDecimal(rating1))) / (totalRatings + 1);
                            var newscore2 = ((score2 * totalRatings) + (Convert.ToDecimal(rating2))) / (totalRatings + 1);
                            var newscore3 = ((score3 * totalRatings) + (Convert.ToDecimal(rating3))) / (totalRatings + 1);
                            var newscore4 = ((score4 * totalRatings) + (Convert.ToDecimal(rating4))) / (totalRatings + 1);

                            //Save the updated scores
                            db.Execute(SQLUPDATESCORES, newscore1, newscore2, newscore3, newscore4, (totalRatings + 1), System.DateTime.Now, "UserID: " + UserID, providerID, positionID);
                        }
                    };
                    //Store Review
                    db.Execute(SQLINSERTREVIEW, thisUserID, providerID, positionID, paymentID, publicreview, privatereview, Convert.ToInt32(rating1), Convert.ToInt32(rating2), Convert.ToInt32(rating3), Convert.ToInt32(rating4), answer1, answer2, System.DateTime.Now, System.DateTime.Now, "UserID: "+UserID);
                }
            }
            if(ModelState.IsValid){
                CommonHelpers.ReturnJsonResult(0, "Thanks for rating");
            }
        }
    }
}