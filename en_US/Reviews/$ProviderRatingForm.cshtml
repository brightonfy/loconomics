@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    CommonHelpers.SecurePage();
    var thisUserID = WebSecurity.CurrentUserId;

    var bookingID = Request["BookingID"] ?? PageData["BookingID"];

    Validation.RequireField("question1", "Please response to section 1 question");
    Validation.RequireField("question2", "Please response to section 3 question");
    Validation.RequireField("rating1", "Please rate its quality of work");
    Validation.RequireField("rating2", "Please rate its efficiency");
    Validation.RequireField("rating3", "Please rate its professionalism");
    Validation.RequireField("public-review", "Please write a public review");
    Validation.RequireField("private-review", "Please write a private review");

    if(IsPost && Validation.IsValid()){

        var answer1 = Request["question1"].AsBool();
        var answer2 = Request["question2"].AsBool();
        var answer1Comment = Request["question1-comment"];
        var rating1 = Request["rating1"].AsInt();
        var rating2 = Request["rating2"].AsInt();
        var rating3 = Request["rating3"].AsInt();
        var publicreview = Request["public-review"];
        var privatereview = Request["private-review"];
        
        if (answer1 == false && answer1Comment.IsEmpty()) {
            ModelState.AddError("question1-comment", "Please, tell us what was not performed");
        }

        if(ModelState.IsValid){
            var sqlGetBooking = @"
                SELECT  CustomerUserID, ProviderUserID,
                        PositionID
                FROM    Booking
                WHERE   BookingID = @0                        
            ";
            var sqlCheckReview = @"
                SELECT  ReviewID
                FROM    UserReviews
                WHERE   BookingID = @0
                         AND
                        PositionID = @1
            ";
            var sqlGetScores = @"
                SELECT  Rating1, Rating2, Rating3, Rating4, Answer1, Answer2, TotalRatings
                FROM    UserReviewScores
                WHERE   UserID = @0
                         AND
                        PositionID = @1
            ";
            var sqlInsertScores = @"
                INSERT INTO UserReviewScores (
                    UserID, PositionID,
                    TotalRatings,
                    Rating1, Rating2, Rating3, Rating4,
                    Answer1, Answer2,
                    CreatedDate, UpdatedDate, ModifiedBy
                ) VALUES (
                    @0, @1
                    @2, 
                    @3, @4, @5, @6
                    @7, @8,
                    getdate(), getdate(), 'sys'
                )
            ";
            var sqlUpdateScores = @"
                UPDATE UserReviewScores SET
                    TotalRatings = @2,
                    Rating1 = @3, Rating2 = @4, Rating3 = @5, Rating4 = @6,
                    Answer1 = @7, Answer2 = @8,
                    UpdatedDate = getdate(),
                    ModifiedBy = 'sys'
                WHERE   UserID = @0
                         AND
                        PositionID = @1
            ";
            var sqlInsertReview = @"
                INSERT INTO UserReviews (
                    BookingID, CustomerUserID, ProviderUserID, PositionID,
                    Rating1, Rating2, Rating3, Rating4,
                    Answer1, Answer2,
                    Answer1Comment, Answer2Comment,
                    PrivateReview, PublicReview,
                    CreatedDate, ModifiedDate, ModifiedBy
                ) VALUES (
                    @0, @1, @2, @3,
                    @4, @5, @6, @7,
                    @8, @9,
                    @10, @11,
                    @12, @13,
                    getdate, getdate, 'sys'
                )
            ";

            using (var db = Database.Open("sqlloco")) {
                var booking = db.QuerySingle(sqlGetBooking, bookingID);
                // Check booking is valid and current user is the customer (only he can rate provider at this bookingid)
                if (booking == null || booking.CustomerUserID == thisUserID) {
                    ModelState.AddFormError("Not valid booking to review");
                } else {
                    var reviewID = db.QueryValue(sqlCheckReview, bookingID, booking.PositionID);
                    if(reviewID.Count() > 0){
                        ModelState.AddFormError("The review for this service already exist");
                    } else {
                        //Look for existing scores
                        var scores = db.QuerySingle(sqlGetScores, booking.ProviderID, booking.PositionID);
                        if (scores == null) {
                            //First scores for the provider and positionID
                            db.Execute(sqlInsertScores, 
                                booking.ProviderID, booking.PositionID,
                                1,
                                rating1, rating2, rating3, null,
                                (answer1 ? 1 : 0), (answer2 ? 1 : 0));  
                        } else {
                            // Recalculate and Save the updated scores
                            var tr = scores.TotalRating;
                            var ntr = tr + 1;
                            db.Execute(sqlUpdateScores,
                                booking.ProviderID, booking.PositionID,
                                ntr,
                                (scores.Rating1 ?? 0 * tr + rating1) / ntr,
                                (scores.Rating2 ?? 0 * tr + rating2) / ntr,
                                (scores.Rating3 ?? 0 * tr + rating3) / ntr,
                                // No usamos el rating4, mantenemos el valor que hubiese -que será null-
                                scores.Rating4);
                        };
                        //Store Review
                        db.Execute(sqlInsertReview, 
                            bookingID, thisUserID, booking.ProviderID, booking.PositionID,
                            rating1, rating2, rating3, null,
                            answer1, answer2, answer1Comment, null,
                            privatereview, publicreview);
                    }
                }
            }
            if(ModelState.IsValid){
                CommonHelpers.ReturnJsonResult(0, "Thanks for rating");
            }
        }
    }
}