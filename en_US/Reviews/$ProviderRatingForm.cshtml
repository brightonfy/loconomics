@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    CommonHelpers.SecurePage();
    var thisUserID = WebSecurity.CurrentUserId;
    var customer = DashboardFunctions.GetUserRow();
    int bookingID = Request["BookingID"].AsInt();
    if (bookingID == 0) {
        bookingID = (int)PageData["BookingID"];
    }
    
    dynamic booking = PageData["booking"] ?? BookingHelper.GetBooking(bookingID);
    dynamic provider = null, position = null;

    // Check booking is valid and current user is the customer (only he can rate provider at this bookingid)
    if (booking == null || booking.CustomerUserID != thisUserID) {
        ModelState.AddFormError("Not valid booking to review");
    } else {
        provider = DashboardFunctions.GetUserRow(booking.ProviderUserID);
        position = DashboardFunctions.GetUserPos(booking.ProviderUserID, booking.PositionID);
    }

    if (ModelState.IsValid) {
        Validation.RequireField("question1", "Please response to section 1 question");
        Validation.RequireField("question2", "Please response to section 3 question");
        Validation.RequireField("rating1", "Please rate its quality of work");
        Validation.RequireField("rating2", "Please rate its efficiency");
        Validation.RequireField("rating3", "Please rate its professionalism");
        Validation.RequireField("public-review", "Please write a public review");
        Validation.RequireField("private-review", "Please write a private review");

        if(IsPost && Validation.IsValid()){

            var answer1 = Request["question1"].AsBool();
            var answer2 = Request["question2"].AsBool();
            var answer1Comment = Request["question1-comment"];
            var rating1 = Request["rating1"].AsInt();
            var rating2 = Request["rating2"].AsInt();
            var rating3 = Request["rating3"].AsInt();
            var publicreview = Request["public-review"];
            var privatereview = Request["private-review"];
        
            if (answer1 == false && answer1Comment.IsEmpty()) {
                ModelState.AddError("question1-comment", "Please, tell us what was not performed");
            }

            if(ModelState.IsValid){
                var sqlCheckReview = @"
                    SELECT  count(*)
                    FROM    UserReviews
                    WHERE   BookingID = @0
                             AND
                            PositionID = @1
                ";
                var sqlGetScores = @"
                    SELECT  Rating1, Rating2, Rating3, Rating4, Answer1, Answer2, TotalRatings
                    FROM    UserReviewScores
                    WHERE   UserID = @0
                             AND
                            PositionID = @1
                ";
                var sqlInsertScores = @"
                    INSERT INTO UserReviewScores (
                        UserID, PositionID,
                        TotalRatings,
                        Rating1, Rating2, Rating3, Rating4,
                        Answer1, Answer2,
                        ServiceHours, LastRatingDate,
                        CreatedDate, UpdatedDate, ModifiedBy
                    ) VALUES (
                        @0, @1,
                        @2, 
                        @3, @4, @5, @6,
                        @7, @8,
                        @9, @10,
                        getdate(), getdate(), 'sys'
                    )
                ";
                var sqlUpdateScores = @"
                    UPDATE UserReviewScores SET
                        TotalRatings = @2,
                        Rating1 = @3, Rating2 = @4, Rating3 = @5, Rating4 = @6,
                        Answer1 = @7, Answer2 = @8,
                        ServiceHours = @9, LastRatingDate = @10,
                        UpdatedDate = getdate(),
                        ModifiedBy = 'sys'
                    WHERE   UserID = @0
                             AND
                            PositionID = @1
                ";
                var sqlInsertReview = @"
                    INSERT INTO UserReviews (
                        BookingID, CustomerUserID, ProviderUserID, PositionID,
                        Rating1, Rating2, Rating3, Rating4,
                        Answer1, Answer2,
                        Answer1Comment, Answer2Comment,
                        PrivateReview, PublicReview,
                        ServiceHours, HelpfulReviewCount,
                        CreatedDate, UpdatedDate, ModifiedBy
                    ) VALUES (
                        @0, @1, @2, @3,
                        @4, @5, @6, @7,
                        @8, @9,
                        @10, @11,
                        @12, @13,
                        @14, @15,
                        getdate(), getdate(), 'sys'
                    )
                ";

                using (var db = Database.Open("sqlloco")) {
                    var hasreview = db.QueryValue(sqlCheckReview, bookingID, booking.PositionID);
                    if(hasreview > 0){
                        ModelState.AddFormError("The review for this service already exist");
                    } else {
                        //Look for existing scores
                        var scores = db.QuerySingle(sqlGetScores, booking.ProviderUserID, booking.PositionID);
                        if (scores == null) {
                            //First scores for the provider and positionID
                            db.Execute(sqlInsertScores, 
                                booking.ProviderUserID, booking.PositionID,
                                1,
                                rating1, rating2, rating3, null,
                                (answer1 ? 1 : 0), (answer2 ? 1 : 0),
                                booking.ServiceDuration, DateTime.Now);  
                        } else {
                            // Recalculate and Save the updated scores
                            var tr = scores.TotalRatings;
                            var ntr = tr + 1;
                            db.Execute(sqlUpdateScores,
                                booking.ProviderUserID, booking.PositionID,
                                ntr,
                                ((scores.Rating1 ?? 0) * tr + rating1) / ntr,
                                ((scores.Rating2 ?? 0) * tr + rating2) / ntr,
                                ((scores.Rating3 ?? 0) * tr + rating3) / ntr,
                                // No usamos el rating4, mantenemos el valor que hubiese -que será null-
                                scores.Rating4,
                                (answer1 ? scores.Answer1 + 1 : scores.Answer1),
                                (answer2 ? scores.Answer2 + 1 : scores.Answer2),
                                scores.ServiceHours + booking.ServiceDuration,
                                DateTime.Now);
                        };
                        //Store Review
                        db.Execute(sqlInsertReview, 
                            bookingID, thisUserID, booking.ProviderUserID, booking.PositionID,
                            rating1, rating2, rating3, null,
                            answer1, answer2, answer1Comment, null,
                            privatereview, publicreview,
                            booking.ServiceDuration, 0);
                    }
                }
                if(ModelState.IsValid){
                    //CommonHelpers.ReturnJsonResult(0, "Thanks for rating", false);
                    CommonHelpers.ReturnJsonResult(3, UrlUtil.LangPath + "Reviews/$BookingRatingDetails/?BookingID=" + bookingID, false);
                    
                    // Send emails recommending this provider to comma-sepparated 'share-email-addresses'
                    var emails = Request["share-email-addresses"];
                    string subject = "{0} {1} recommends you book {2} as a {3}";
                    if (!string.IsNullOrWhiteSpace(emails)) {
                        var add = emails.Split(',', ';', '\n');
                        string newemails = "";
                        List<string> emailslist = new List<string>();
                        foreach (string ad in add) {
                            if (LcValidators.IsEmailAdress(ad)) {
                                emailslist.Add(ad);
                            }
                        }
                        newemails = CommonHelpers.JoinNotEmptyStrings(",", emailslist.ToArray<string>());
                        if (!string.IsNullOrEmpty(newemails)) {
                            LcMessaging.SendMail(newemails, String.Format(subject, customer.FirstName, customer.LastName,
                                provider.FirstName, position.PositionSingular),
                                LcMessaging.ApplyTemplate(UrlUtil.LangPath + "Profile/EmailRecommendation/",
                                new Dictionary<string,object>{ 
                                    { "CustomerUserID", thisUserID },
                                    { "ProviderUserID", provider.UserID },
                                    { "PositionID", position.PositionID }
                                }));
                        }
                    }
                    Response.End();
                }
            }
        }
    }
}
<form class="provider-rating-form ajax ajax-box" method="post" action="@(UrlUtil.LangPath)Reviews/$ProviderRatingForm/">
    @CommonHelpers.SetupStarRatingPlugin()
    @CommonHelpers.GetValidationScripts()
    @Html.ValidationSummary()
    @if (booking != null && provider != null) {
        <input type="hidden" name="BookingID" value="@bookingID" />
        <fieldset class="section-1">
            <legend>Section 1: Review the work done</legend>
            <ul>
                <li class="question1">
                    <span>Did @provider.FirstName perform all the services you requested?</span>
                    <label>Yes<input type="radio" @CommonHelpers.IsChecked("true", Request["question1"]) name="question1" value="true" /></label>
                    <label>No<input type="radio" @CommonHelpers.IsChecked("false", Request["question1"]) name="question1" value="false" /></label>
                </li>
                <li class="question1-comment">
                    <textarea rows="3" name="question1-comment" placeholder="Tell use what work was not performed." @Validation.GetHtml("question1-comment")>@Request["question1-comment"]</textarea>
                </li>
                <li class="rating1">
                    <span>Rate the quality of work @provider.FirstName performed:</span>
                    <div class="rate-user">
                        @RenderPage(UrlUtil.LangPath + "Reviews/_StarRating.cshtml", new String[] { "rating1", Request["rating1"], "false" })
                    </div>
                </li>
                <li class="rating2">
                    <span>Rate the efficience in which @provider.FirstName performed the work:</span>
                    <div class="rate-user">
                        @RenderPage(UrlUtil.LangPath + "Reviews/_StarRating.cshtml", new String[] { "rating2", Request["rating2"], "false" })
                    </div>
                </li>
                <li class="publicreview">
                    <label for="public-review">Write a brief review for other Loconomics members to view 
                    (please be respectful and constructive)</label>
                    <textarea rows="4" id="public-review" name="public-review" placeholder="(250 or fewer characters)">@Request["public-review"]</textarea>
                </li>
            </ul>
        </fieldset>
        <fieldset class="section-2">
            <legend>Section 2: Help @provider.FirstName grow professionally</legend>
            <ul>
                <li class="rating3">
                    <span>Rate @(provider.FirstName)'s professionalism</span>
                    <div class="rate-user">
                        @RenderPage(UrlUtil.LangPath + "Reviews/_StarRating.cshtml", new String[] { "rating3", Request["rating3"], "false" })
                    </div>
                </li>
                <li class="private-review">
                    <label for="private-review">Please give @provider.FirstName any constructive criticism to help
                        him do a better job (only @provider.FirstName will see this):</label>
                    <textarea rows="10" id="private-review" name="private-review" placeholder="(1000 or fewer characters)">@Request["private-review"]</textarea>
                </li>
            </ul>
        </fieldset>
        <fieldset class="section-3">
            <legend>Section 3: Recommend @provider.FirstName</legend>
            <ul>
                <li class="question2">
                    <span>Would you hire @provider.FirstName as a @position.PositionSingular again?</span>
                    <label>Yes<input type="radio" name="question2" @CommonHelpers.IsChecked("true", Request["question2"]) value="true" /></label>
                    <label>No<input type="radio" name="question2" @CommonHelpers.IsChecked("false", Request["question2"]) value="false" /></label>
                </li>
                <li class="share-social">
                    Please share @(provider.FirstName)'s profile with your family and friends and earn a $5
                    credit when they make a purchase:
                    @RenderPage(UrlUtil.LangPath + "Social/_SocialNetworkingWidget.cshtml", 
                        UrlUtil.LangPath + "Profile/?UserID=" + provider.UserID + "&PositionID=" + position.PositionID,
                        "An amazing " + position.PositionSingular + ": " + CommonHelpers.GetUserDisplayName(provider))
                </li>
                <li class="share-email">
                    <label for="share-email-addresses">Enter e-mail addresses, separated by commas:</label>
                    <textarea rows="4" id="share-email-addresses" name="share-email-addresses">@Request["share-email-addresses"]</textarea>
                </li>
            </ul>
        </fieldset>
        <fieldset class="actions">
            <button class="button main-action" type="submit">Submit feedback</button>
        </fieldset>
    }
</form>