@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    // Initialize general page variables
    var username = "";
    var password = "";
    var rememberMe = false;
    
    var showHeader = PageData["ShowHeader"] ?? true;
    var showTools = PageData["ShowTools"] ?? true;
    string redirect =  N.W(Request.QueryString["ReturnUrl"]) ??
        N.W(PageData["Redirect"]) ?? N.W(Request.QueryString["Redirect"]) ?? N.W(Request.Form["Redirect"]) ??
        UrlUtil.LangPath;
    Session["RegisterWaitConfirmation"] = PageData["RegisterWaitConfirmation"] ?? true;
    
    var facebookAppId = Facebook.AppId;
    var facebookRedirectUri = UrlUtil.LangUrl + "Account/Facebook/";
    var facebookPermissions = "email"; //"COMMA_SEPARATED_LIST_OF_PERMISSION_NAMES";
    // "SOME_ARBITRARY_BUT_UNIQUE_STRING";
    var facebookState = Session["facebookState"] = Guid.NewGuid().ToString();
    
    // Setup Validation
    // Validate the user's username
    Validation.RequireField("username", "You must specify a user name.");
    // Validate the user's password
	Validation.RequireField("password", "You must specify a password.");
    

    /* OAuth provider login disabled currently -need review when enable-
    if (IsPost){
        // is this a OAuth sign in request?
        string provider = Request.Form["provider"];
        if (!provider.IsEmpty()) {
            OAuthWebSecurity.RequestAuthentication(provider, UrlUtil.LangPath + "Account/RegisterService/");
            return;
        }
    }*/

    
    if (IsPost && Validation.IsValid()){

        username = Request.Form["username"];
        password = Request.Form["password"];
        rememberMe = Request.Form["rememberMe"].AsBool();
        
        if (WebSecurity.UserExists(username) && WebSecurity.GetPasswordFailuresSinceLastSuccess(username) > 4 && WebSecurity.GetLastPasswordFailureDate(username).AddSeconds(60) > DateTime.UtcNow) {
            // We return a json with result OK and redirect link (Code=1),
            // and response end just after this:
            CommonHelpers.ReturnJsonResult(1, UrlUtil.LangPath + "Account/AccountLockedOut/");
        }

        // Attempt to login to the Security object using provided creds
        if (WebSecurity.Login(username, password, rememberMe)) {

            // mark the user as logged in via a normal account,
            // as opposed to via an OAuth or OpenID provider.
            Session["OAuthLoggedIn"] = false;
           
            // The redirect cannot be done to an url inside the /Account/ segment:
            if (redirect.Contains("/Account/")) {
                redirect = UrlUtil.LangPath;
            }
            
            // Be carefully with hash value: if a user enter from an external link in an email
            // or bookmark and in some specific cases inside the web,
            // hash value will be send it well but some other times will not be send it;
            // a javascript add the 'HASH' parameter to allow the server to know what is the
            // stripped hash value, re-adding it just now if url doesn't contain it.
            string hash = Request.QueryString["HASH"];
            if (!redirect.Contains('#') && !string.IsNullOrEmpty(hash)) {
                redirect += "#" + hash;
            }

            // We return a json with result OK and redirect link (Code=1),
            // and response end just after this:
            CommonHelpers.ReturnJsonResult(1, redirect);
        } else if (WebSecurity.GetUserId(username) > -1 && !WebSecurity.IsConfirmed(username)) {
            // Resend confirmation mail, like in register
            var token = Database.Open("sqlloco").QueryValue("SELECT ConfirmationToken FROM webpages_Membership WHERE UserID=@0", WebSecurity.GetUserId(username));
            var confirmationUrl = UrlUtil.LangUrl + "Account/Confirm/?confirmationCode=" + HttpUtility.UrlEncode(token);      
            
            LcMessaging.SendWelcomeCustomer(WebSecurity.GetUserId(username), username, confirmationUrl, token);
            
            ModelState.AddFormError("Your account need to be confirmed. An email to confirm your account was sent.");
        } else {
            ModelState.AddFormError("Incorrect Username or password.");
        }
    }
}
<article id="loginBox" class="account-popup">
    @if(showHeader){
    <hgroup class="title">
        <h1>Log in to Loconomics</h1>
    </hgroup>
    }
    <section>
        <form class="choice-option ajax ajax-box login" data-success-post-message="Logged successfully!" method="post" action="@(UrlUtil.LangPath)Account/$Login/@(Request.Url.Query)">
            @* If one or more validation errors exist, show an error *@
            @Html.ValidationSummary(null, true, null)
            <input type="hidden" name="Redirect" value="@redirect" />

            @CommonHelpers.GetValidationScripts()
            <script type="text/javascript">
                $(document).ready(function () {
                    if (window.location.hash) {
                        var log = $('form.login');
                        var act = $('form.login').attr('action');
                        if (/\?/.test(act))
                            log.attr('action', act + "&HASH=" + window.location.hash.substring(1));
                        else
                            log.attr('action', act + "?HASH=" + window.location.hash.substring(1));
                    }
                });
            </script>

            <fieldset>
                <legend>Log in to Your Account</legend>
                <ul>
                    <li class="username">
                        <label for="username" @if(!ModelState.IsValidField("username")){<text>class="error-label"</text>}>E-mail address:</label>
                        <input type="text" id="username" class="@(ModelState.IsValidField("Ausername") ? "" : "input-validation-error")" name="username" value="@username" title="Username" @Validation.GetHtml("username")/>
                        @* Write any username validation errors to the page *@
                        @Html.ValidationMessage("username")
                    </li>
                    <li class="password">
                        <label for="password" @if(!ModelState.IsValidField("password")){<text>class="error-label"</text>}>Password:</label>
                        <input type="password" id="password" class="@(ModelState.IsValidField("Apassword") ? "" : "input-validation-error")" name="password" title="Password" @Validation.GetHtml("password")/>
                        @* Write any password validation errors to the page *@
                        @Html.ValidationMessage("password")
                    </li>
                    <li class="remember-me">
                        <input type="checkbox" id="rememberMe" name="rememberMe" value="true" title="Remember Me" @if (rememberMe) {<text>checked="checked"</text>} />
                        <label class="checkbox" for="rememberMe">Remember me next time</label>
                    </li>
                    <li class="actions">
                        <button type="submit" class="main-action">Login</button>
                    </li>
                </ul>
            </fieldset>
        </form>
        <p class="choice-or">or</p>
        <div class="social choice-option">
            @RenderPage("_FacebookConnectButton.cshtml")
        </div>
        @if(showTools){
        <div class="account-tools">
            <a class="forgot-password" href="@(UrlUtil.LangPath)Account/ForgotPassword/">Forgot password?</a>
            <a class="register" href="@(UrlUtil.LangPath)Account/Register/?Redirect=@Uri.EscapeDataString(redirect)">Need an account?</a>
        </div>
        }
    </section>
</article>