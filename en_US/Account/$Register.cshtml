@{
    // Initialize general page variables
    var email = "";
    var password = "";
    var confirmPassword = "";
    //var captchaMessage = "";
    
    // Setup Validation
	// Validate the user's email address
    Validation.RequireField("email", "You must specify an email address.");
    // Validate the user's password and password confirmation
    Validation.Add("email",
        Validator.Regex(@"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*","The email is not valid."));

	Validation.RequireField("password", "The password cannot be blank.");
    Validation.Add("confirmPassword", 
        Validator.EqualsTo("password", "The new password and confirmation password do not match."));
        
	Validation.RequireField("iagree", "You must agree the Terms of Use.");

    // Validate the user's captcha answer
    // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
    //     ModelState.AddError("recaptcha", "Captcha response was not correct");
    // }
    
    // If this is a POST request, validate and process data
    if (IsPost) {
        
        // If all information is valid, create a new account
        if (Validation.IsValid()) {
            email = Request.Form["email"];
            password = Request.Form["password"];
            confirmPassword = Request.Form["confirmPassword"];
            
            // Insert a new user into the database
            var db = Database.Open("sqlloco");
            
            // Check if user already exists
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null) {
                // Insert email into the profile table
                db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);

                // Create and associate a new entry in the membership database.
                // If successful, continue processing the request
                try {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    
                    // Create Loconomics Customer user
                    int userid = WebSecurity.GetUserId(email);
                    string firstname = email.Substring(0, email.IndexOf('@'));
                    db.Execute("exec CreateCustomer @0,@1,@2,1,1",
                        userid, firstname, "");

                    if (requireEmailConfirmation) {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + UrlUtil.LangPath + "Account/Confirm/?confirmationCode=" + HttpUtility.UrlEncode(token);

                        WebMail.Send(
                            to: email,	
                            subject: "Please confirm your account", 
                            body: "Your confirmation code is: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> to activate your account."
                        );
                    }

                    if (requireEmailConfirmation) {
                        // Thank the user for registering and let them know an email is on its way
                        // We return a json with result OK and redirect link (Code=1),
                        // and response end just after this:
                        CommonHelpers.ReturnJsonResult(1, UrlUtil.LangPath + "Account/Thanks/");
                    } else {
                        // Navigate back to the homepage and exit
                        WebSecurity.Login(email, password);

                        // mark the user as logged in via a normal account,
                        // as opposed to via an OAuth or OpenID provider.
                        Session["OAuthLoggedIn"] = false;

                        // We return a json with result OK and redirect link (Code=1),
                        // and response end just after this:
                        CommonHelpers.ReturnJsonResult(1, UrlUtil.LangPath);
                    }
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
            } else {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            }
        }
    }
}
<script type="text/javascript">
    Modernizr.load([
    UrlUtil.AppPath + "Scripts/jquery.validate.min.js",
    UrlUtil.AppPath + "Scripts/jquery.validate.unobtrusive.min.js"]);
</script>
<article id="registerBox" class="ajax-box account-popup">
    <hgroup class="title">
        <h1>Create a free account</h1>
        <div class="subh1">Do you want to provide services? <a href="@(UrlUtil.LangPath)Provider-sign-up/">Click here</a></div>
    </hgroup>
    <section>
        <form method="post" action="@(UrlUtil.LangPath)Account/$Register/@(Request.Url.Query)" class="choice-option ajax" data-success-post-message="Register successfully!">
            @* If at least one validation error exists, notify the user *@
            @if (IsPost && !Validation.IsValid()){
                Html.ValidationSummary("Please correct the errors and try again.");
            }

            <fieldset>
                <legend>Registration Form</legend>
                <ul>
                    <li class="email username">
                        <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}>Email address:</label>
                        <input type="text" id="email" name="email" title="Email address" value="@email" @Validation.GetHtml("email") />
                        @* Write any email validation errors to the page *@
                        @Html.ValidationMessage("email")
                    </li>
                    <li class="password">
                        <label for="password" @if(!ModelState.IsValidField("password")) {<text>class="error-label"</text>}>Password:</label>
                        <input type="password" id="password" name="password" title="Password" @Validation.GetHtml("password") />
                        @* Write any password validation errors to the page *@
                        @Html.ValidationMessage("password")
                    </li>
                    <li class="confirm-password password">
                        <label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>} >Re-enter Password:</label>
                        <input type="password" id="confirmPassword" name="confirmPassword" title="Confirm password" @Validation.GetHtml("confirmPassword") />
                        @* Write any password validation errors to the page *@
                        @Html.ValidationMessage("confirmPassword")
                    </li>
                     @*<li class="recaptcha">
             
                       @ReCaptcha.GetHtml("PUBLIC_KEY", theme: "white")
                          @Html.ValidationMessage("recaptcha")
                        }
                    </li>*@
                    <li class="remember-me">
                        <input type="checkbox" id="iAgree" name="iagree" value="true" title="I agree the Terms of Use" />
                        <label class="checkbox" for="iAgree">I agree to the <a href="@(UrlUtil.LangPath)Account/TermsOfUse/">Terms of Use</a></label>
                    </li>
                    <li class="actions">
                        <button type="submit" class="main-button">Sign up</button>
                    </li>
                </ul>
            </fieldset>
        </form>
        <p class="choice-or">or</p>
        <div class="social choice-option">
            <img alt="Facebook Connect" src="@(UrlUtil.AppPath)img/connect-facebook.png">
            <p class="footnote">*we don't post anything without your permission</p>
            <p class="info">By clicking "Connect with Facebook" you confirm that you accept the <a href="@(UrlUtil.LangPath)Account/TermsOfUse/">Terms of Use</a></p>
        </div>
    </section>
</article>