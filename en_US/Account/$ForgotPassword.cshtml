@{
    // Initialize general page variables
    bool passwordSent = false;
    var disabledAttribute = "";
    var resetToken = "";
    var email = Request.Form["email"] ?? Request.QueryString["email"];

    // Validate the user's username
    Validation.RequireField("email", "Please enter a valid email.");

    if (IsPost) {
        // validate email
        bool isValid = false;
        if (Validation.IsValid()) {
            if (WebSecurity.GetUserId(email) > -1 && WebSecurity.IsConfirmed(email)) {
                // Only can be sent the password token if account is confirmed
                if (WebSecurity.IsConfirmed(email)) {
                    resetToken = WebSecurity.GeneratePasswordResetToken(email); //Optionally specify an expiration date for the token
                    isValid = true;
                } else {
                    // Resend confirmation mail, like in register
                    var token = Database.Open("sqlloco").QueryValue("SELECT ConfirmationToken FROM webpages_Membership WHERE UserID=@0", WebSecurity.GetUserId(email));
                    var confirmationUrl = UrlUtil.LangUrl + "Account/Confirm/?confirmationCode=" + HttpUtility.UrlEncode(token);
                    // IagoSRL: there is some problem with sheculedmail when used here on register form, using the standard
                    
                    LcMessaging.SendWelcomeCustomer(WebSecurity.GetUserId(email), email, confirmationUrl, token);
                    
                    passwordSent = true; // We don't want to disclose that the user does not exist.
                    isValid = false;
                }
            } else {
                passwordSent = true; // We don't want to disclose that the user does not exist.
                isValid = false;
            }
        }
        if (isValid) {
            var resetUrl = UrlUtil.LangUrl + "Account/PasswordReset/?resetToken=" + HttpUtility.UrlEncode(resetToken);
            
            LcMessaging.SendResetPassword(WebSecurity.GetUserId(email), email, resetUrl, resetToken);

            passwordSent = true;
            disabledAttribute = @"disabled=""disabled""";
        }
    }
}
@CommonHelpers.GetValidationScripts()
<article id="forgotPasswordBox" class="ajax-box account-popup">
    <hgroup class="title">
        <h1>Reset your Password</h1>
    </hgroup>
    <section>

     @if (!WebMail.SmtpServer.IsEmpty())
     {
         if (passwordSent) {
            <p class="success">
                Instructions to reset your password have been sent to the specified email address.
            </p>
         } else {
            <p>
                We will send password reset instructions to the email address associated with your account. 
            </p>
         }

        <form class="ajax" data-success-post-message="Email send successfully!" method="post" action="@(UrlUtil.LangPath)Account/$ForgotPassword/@(Request.Url.Query)">
            @*Html.ValidationSummary() Summary is not needed at this page *@
            <fieldset>
                <legend>Password Reset Instructions Form</legend>
                <ul>
                    <li class="username email">
                        <label for="email" @if (!ModelState.IsValidField("email")) {<text>class="error-label"</text>}>Email Address</label>
                        <input type="text" id="email" name="email" title="Email address" value="@email" @disabledAttribute @Validation.GetHtml("email") />
                        @Html.ValidationMessage("email")
                    </li>
                    <li class="actions">
                        <button type="submit" class="main-action" @disabledAttribute>Send Instructions</button>
                    </li>
                </ul>
            </fieldset>
        </form>
         
     } else {
        <p class="info">
            Password recovery is disabled for this website because the SMTP server is 
            not configured correctly. Please contact the owner of this site to reset 
            your password.
        </p>
     }
         
    </section>
</article>