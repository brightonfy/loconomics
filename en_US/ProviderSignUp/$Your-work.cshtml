@* BE CAREFULL With changes on this file; use ever the 'insideWizard' var to distingish
when this file is called from Provider-sign-up wizard or from Dashboard/Positions#Services form
and test on both.
*@
@using WebMatrix.Data;
@using WebMatrix.WebData;
@using System.Text.RegularExpressions;
@{
    PageData["PositionID"] = 0;
    var insideWizard = (bool)(PageData["InsideWizard"] ?? Request["InsideWizard"].AsBool());
    
    if (IsPost) {
        var UserID = (Session["RegisteredUserID"] != null ? (int)Session["RegisteredUserID"] : 
            (WebSecurity.IsAuthenticated ? WebSecurity.CurrentUserId : 0));
        if (UserID > 0) {
            var db = Database.Open("sqlloco");
            var LanguageID = LcData.GetCurrentLanguageID();
            var CountryID = LcData.GetCurrentCountryID();
            var theDate = DateTime.Now;

            var PositionID = PageData["PositionID"] = Request.Form["select-position"].AsInt();
        
            var sqlinsertPosition = "EXEC dbo.InsertUserProfilePositions @0,@1,@2,@3,@4,@5,@6,@7";
            var sqlSetAttribute = @"
                BEGIN TRY
                    INSERT INTO UserProfileServiceAttributes (
                        UserID, PositionID, ServiceAttributeCategoryID, ServiceAttributeID, 
                        LanguageID, CountryID, CreateDate, UpdatedDate, ModifiedBy, Active
                    ) VALUES (@0, @1, @2, @3, @4, @5, getdate(), getdate(), 'sys', 1)
                END TRY
                BEGIN CATCH
                    UPDATE UserProfileServiceAttributes SET
                        Active = 1
                        ,UpdatedDate = getdate()
                    WHERE
                        UserID = @0
                        AND PositionID = @1
                        AND ServiceAttributeCategoryID = @2
                        AND ServiceAttributeID = @3
                        AND LanguageID = @4
                        AND CountryID = @5
                END CATCH
            ";
            var sqlSetExpLevel = @"
                BEGIN TRY
                    INSERT INTO ServiceAttributeExperienceLevel (UserID,
                        PositionID, LanguageID, CountryID, ExperienceLevelID,
                        CreatedDate, UpdatedDate, ModifiedBy)
                    VALUES (@0, @1, @2, @3, @4, getdate(), getdate(), 'sys')
                END TRY
                BEGIN CATCH
                    UPDATE ServiceAttributeExperienceLevel SET
                        UpdatedDate = getdate()
                    WHERE
                        UserID = @0
                        AND PositionID = @1
                        AND LanguageID = @2
                        AND CountryID = @3
                        AND ExperienceLevelID = @4
                END CATCH
            ";
            var sqlSetLangLevel = @"
                BEGIN TRY
                    INSERT INTO ServiceAttributeLanguageLevel (UserID,
                        PositionID, ServiceAttributeID, LanguageID, CountryID, LanguageLevelID,
                        CreatedDate, UpdatedDate, ModifiedBy)
                    VALUES (@0, @1, @2, @3, @4, @5, getdate(), getdate(), 'sys')
                END TRY
                BEGIN CATCH
                    UPDATE ServiceAttributeLanguageLevel SET
                        UpdatedDate = getdate()
                    WHERE
                        UserID = @0
                        AND PositionID = @1
                        AND ServiceAttributeID = @2
                        AND LanguageID = @3
                        AND CountryID = @4
                        AND LanguageLevelID = @5
                END CATCH
            ";
            
            // Link the user with the selected position: VERY IMPORTANT: Ever 1 as Active now!
            var Results = db.QuerySingle(sqlinsertPosition, UserID, PositionID, LanguageID, CountryID, theDate, theDate, "sys", 1);

            if (Results.Result != "Success") {
                LcHelpers.ReturnJsonError(-1, Results.Result);
            } else {
                
                var getcatid = new Regex("^positionservices-category\\[(-?\\d+)\\]", RegexOptions.Compiled);
                var getattid = new Regex("^positionservices-category\\[-?\\d+\\]-attribute\\[(\\d+)\\]", RegexOptions.Compiled);
                
                foreach (string fname in Request.Form.Keys){
                    // In the form, the 'name' of each input-checkbox element per service-attribute have
                    // the format: positionservices-category[{0}]-attribute[{1}] or a simpler positionservices-category[{0}]
                    // where {0} is replaced by the ServiceAttributeCategoryID
                    // and {1} is replaced by the ServiceAttributeID
                    // BUT, the important is that the value associated with the checkboxes is the ServiceAttributeID
                    // and the ServiceAttributeCategoryID is ever present in the name as param {0}
                    // just both are what we need save into the database.
                    // And remember: web forms only send to the server in the POST (just here!)
                    // the pair  name-value  of checked checkboxes 
                    // (it means that unchecked values are not in the Request.Form collection)
                    if (fname.StartsWith("positionservices-category[")){
                        var serviceAttributeID = Request.Form[fname];
                        
                        string serviceAttributeCategoryID = "";
                        var matches = getcatid.Match(fname);
                        if (matches.Success && matches.Groups.Count == 2) {
                            serviceAttributeCategoryID = matches.Groups[1].Value;
                        } else {
                            continue;
                        }
                        
                        switch (serviceAttributeCategoryID.AsInt()) {
                            case LcData.ServiceAttCatIDLanguageLevel:
                                // Do nothing: this fields will be skiped silently, while will be
                                // saved only when Language category is read it, to avoid save the
                                // level of languages not checked by the user, but without this
                                // 'case' sentence, errors will happen executing the 'default' switch-case.
                                
                                // Next code was the first approach, but only valid if checkboxes are not used
                                // and language level select's contains an empty/null option
                                /*
                                // Really, in 'serviceAttributeID' variable we have the Form Value
                                // that in this case matches the LanguageLevelID..
                                if (serviceAttributeID.IsInt()) {
                                    var languageLevelID = serviceAttributeID;
                                    // ..we must look for the serviceAttributeID in the form name
                                    var matchesAtt = getattid.Match(fname);
                                    if (matchesAtt.Success && matchesAtt.Groups.Count == 2) {
                                        serviceAttributeID = matchesAtt.Groups[1].Value;
                                    } else {
                                        continue;
                                    }
                                
                                    db.Execute(sqlInsertLangLevel, UserID, PositionID,
                                        serviceAttributeID, LanguageID, CountryID,
                                        languageLevelID);
                                }
                                */
                                
                                break;
                            case LcData.ServiceAttCatIDExperienceLevel:
                                db.Execute(sqlSetExpLevel, UserID, PositionID,
                                    LanguageID, CountryID,
                                    // Here, serviceAttributeID contains the form value that is
                                    // the ExperienceLevelID on this case
                                    serviceAttributeID);
                                break;
                            default:
                                db.Execute(sqlSetAttribute, UserID, PositionID,
                                    serviceAttributeCategoryID, serviceAttributeID,
                                    LanguageID, CountryID);
                                
                                // If is Language category, read and save the Level option:
                                if (serviceAttributeCategoryID.AsInt() == LcData.ServiceAttCatIDLanguages) {
                                    var languageLevelID = Request.Form[fname
                                        .Replace("category[" + LcData.ServiceAttCatIDLanguages.ToString() + "]"
                                        , "category[" + LcData.ServiceAttCatIDLanguageLevel.ToString() + "]")
                                        + "-level"];
                                    if (languageLevelID.IsInt()) {
                                        db.Execute(sqlSetLangLevel, UserID, PositionID,
                                            serviceAttributeID, LanguageID, CountryID,
                                            languageLevelID);
                                    }
                                }
                                break;
                        }
                    }
                }
                
                // Check alert for services attributes after being filled: (the first full 
                // user test -TestAllAlerts- is done by a trigger on userprofilepositions table)
                db.Execute("EXEC TestAlertPositionServices @0, @1", UserID, PositionID);
                
                // Check request-more-attributes and send email to loconomics if there is something
                if (!Request.Form["request-more-attributes"].IsEmpty()) {
                     LcMessaging.SendMail("providerhelp@loconomics.com",
                        "Loconomics.com: Provider request more service attributes",
                        LcMessaging.ApplyTemplate(UrlUtil.LangPath + "Email/EmailRequestMoreServiceAttributes/",
                            new Dictionary<string, object> { 
                                { "ProviderUserID", UserID },
                                { "PositionID", PositionID },
                                { "RequestedAttributes", Request.Form["request-more-attributes"] }
                    }));
                }

                if (insideWizard) {
                    // We return a json with result OK (=0), and response end just after this:
                    LcHelpers.ReturnJsonError(0, "");
                } else {
                    // Redirect to the same page to force a refresh and see loaded the new position in its tab
                    string ur = Request.UrlReferrer.PathAndQuery;
                    if (ur.IndexOf("#") == -1) {
                        ur += "#position" + PositionID.ToString();
                    }
                    LcHelpers.ReturnJsonError(1, ur);
                }
            }
        } else {
            LcHelpers.ReturnJsonError(-1, "Un-authenticated");
        }
    }
}
@{/* Example c# function of result html code to be produced in javascript */}
@helper printServiceAttributeCategoryExample(int id){
            <fieldset class="service-attribute-category" id="service-attribute-category-@id">
                <legend>Service Attribute Category @id:</legend>
                @for(int i=0; i < 16; i++){
                <label><input name="positionservices-category[1]-attribute[@i]" type="checkbox"/><span>Attribute</span></label>
                }
            </fieldset>
}
@helper printPositions(){
    var db = Database.Open("sqlloco");
    var sql = "SELECT distinct PositionSingular, PositionDescription, PositionID FROM positions WHERE PositionSingular LIKE @0 and LanguageID = 1 and CountryID = 1 ORDER BY PositionSingular";
    var data = db.Query(sql, "%");
    int PositionID = PageData["PositionID"];
    foreach (var row in data){
        <option title="@row.PositionSingular" data-description="@row.PositionDescription" value="@row.PositionID" @(row.PositionID == PositionID ? "selected" : "" )>@row.PositionSingular</option>
    }
}
<p class="info">
   Let's get started creating your profile.  First, select a position from the menu below; don't worry, you can add more positions later.  Select "Localista" if for general tasks.  You will also be able to edit and enhance your profile after sign-up.
</p>
<div>
<form action="@(UrlUtil.LangPath)ProviderSignUp/$Your-work/" method="post" id="provider-sign-up-your-work" class="your-work @(insideWizard ? "" : "ajax ajax-box positionservices")">
    @LcHelpers.GetValidationScripts()
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <input type="hidden" name="InsideWizard" value="@insideWizard" />
    <fieldset class="select-position">
        <legend>Select position:</legend>
        <select name="select-position">
            <option value="">  Select a Position  </option>
            @printPositions()
        </select>
    </fieldset>
    <fieldset class="select-attributes">
        
        <div class="service-attribute-categories">
            
        </div>

        <div class="@(insideWizard ? "your-work-sidebar" : "positionservices-sidebar")">
            <fieldset class="experience-level-dropdown" id="service-attribute-category-4">
                <legend>@*Experience Level*@</legend>
                @*<select name="experience-level">
                    <option value="1">I'm new to this!</option>
                    <option value="2">Beginner</option>
                    <option value="3">Intermediate</option>
                    <option value="4">Professional</option>
                    <option value="5">Expert</option>
                </select>*@
            </fieldset>
            <fieldset class="year-experience" id="service-attribute-category-1">
                <legend>@*Years Experience*@</legend>
                @*<select name="year-sexperience">
                    <option value="0">&lt;0.5 years</option>
                    <option value="0.5">0.5 years</option>
                    <option value="1">1 year</option>
                    <option value="1.5">1.5 years</option>
                    @for(int y = 2; y < 41; y++){
                    <option value="@y">@y years</option>
                    }
                </select>*@
            </fieldset>
            <fieldset class="languages-spoken @(insideWizard ? "" : "positionservices-languagesspoken")" id="service-attribute-category-5">
                <legend>@*Languages Spoken*@</legend>
                @*<ul>
                    <li><label><input name="language-spoken-english" type="checkbox"/>English</label>
                        <select name="languages-spoken-englishlevel">
                            <option>Fluent</option>
                            <option>Begginer</option>
                            <option>N/A</option>
                        </select>
                    </li>
                    <li><label><input name="language-spoken-spanish" type="checkbox"/>Spanish</label>
                        <select name="languages-spoken-spanishlevel">
                            <option>Fluent</option>
                            <option>Begginer</option>
                            <option>N/A</option>
                        </select>
                    </li>
                    <li><label><input name="languages-spoken-catalan" type="checkbox"/>Catalan</label>
                        <select name="languages-spoken-catalanlevel">
                            <option>Fluent</option>
                            <option>Begginer</option>
                            <option>N/A</option>
                        </select>
                    </li>
                    <li><label><input name="languagespoken-galician" type="checkbox"/>Galician</label>
                        <select name="languagesspoken-galicianlevel">
                            <option>Fluent</option>
                            <option>Begginer</option>
                            <option>N/A</option>
                        </select>
                    </li>
                </ul>*@
            </fieldset>
            <fieldset class="clients-types" id="service-attribute-category-7">
                <legend>@*Clients Types*@</legend>
                @*<label><input type="checkbox" name="clients-types-residential"/>Residential</label>
                <label><input type="checkbox" name="clients-types-business"/>Business</label>*@
            </fieldset>
        </div>
    </fieldset>
    <fieldset class="request-more-attributes">
        <textarea class="fancy" rows="6" name="request-more-attributes" placeholder="Please list anything we’ve missed, and we’ll ensure we get it added to your profile right away."></textarea>
    </fieldset>
    <fieldset class="actions">
        @if (insideWizard)
        {
            <button data-wizard-next-step="#next-steps" class="next main-action">Continue</button>
        }
        else
        {
            <button class="main-action save">Save</button>
        }
    </fieldset>
    @if (!insideWizard)
    {
      <script type="text/javascript">
          $(function () {
              initYourWork();
          });
      </script>
    }
</form>
</div>