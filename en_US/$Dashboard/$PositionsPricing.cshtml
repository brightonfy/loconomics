@using WebMatrix.Data;
@{
    LcHelpers.ProviderPage();
    // Current provider data record:
    var p = LcData.UserInfo.GetUserRow();
    // Current position data record:
    var pos = LcData.UserInfo.GetUserCurrentPos();
    var n = pos.PositionID;
    
    if (p == null || pos == null){
        var inputdataerrormessage = "Please correct any errors and click save";
        if (IsPost){
            LcHelpers.ReturnJsonError(-1, inputdataerrormessage);
        }else{
            throw new Exception(inputdataerrormessage);
        }
    }
    
    string pageToLoad = "";

    using (var db = Database.Open("sqlloco")){
        
        // TODO: Get Customer Type Id   
        var clienttypeid = PageData["ClientTypeID"] = 1;
        
        // Get our Pricing Type ID:
        int pricingtypeid = LcData.GetPositionPricingTypeID(pos.PositionID, clienttypeid);

        switch (pricingtypeid) {
            case 1: // Hours
                pageToLoad = "_ProviderHoursType.cshtml";
                break;
            case 2: // Custom
                pageToLoad = "_ProviderCustomType.cshtml";
                break;
            case 3: // Packages
                pageToLoad = "$ProviderPackagesType.cshtml";
                break;
            case 4: // Invoice
                pageToLoad = "_ProviderInvoiceType.cshtml";
                break;
        }
    }
    
    var idprefix = PageData["idprefix"] = "position#" + n + "-pricing";
}
@if (!String.IsNullOrEmpty(pageToLoad))
{
<p class="setting-instructions">
Keeping your prices available and realistic is a good idea. If you need help determining what’s right, <a href="mailto:providerhelp@loconomics.com">let us know</a>.
</p>
<div>
    @RenderPage(UrlUtil.RenderLangPath + "PricingWizard/" + pageToLoad, new { PricingWizardClasses = "positionpricing" })
</div>
}
else
{
    <p>We're currently researching how best to calculate pricing estimates for this position.  We'd love to get your input; please <a href="mailto:providerhelp@loconomics.com">e-mail us</a>.</p>
}