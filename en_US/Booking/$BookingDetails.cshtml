@using WebMatrix.Data;
@{
    CommonHelpers.SecurePage();
    
    var u = DashboardFunctions.GetUserRow();
    var brID = Request["BookingRequestID"];
    var bID = Request["BookingID"];
    
    // TODO: Calculate location distance from provider to customer
    
    var sqlGetBookingRequest = @"
        SELECT  R.BookingRequestID,
                B.BookingID,
                R.CustomerUserID,
                R.PricingEstimateID,
                R.SpecialRequests,
                R.UpdatedDate,
                R.BookingRequestStatusID,
                B.BookingStatusID,

                --TODO where is bank account (last numbers) or how calculate paymentDate
                getdate() As PaymentDate,
                '1234' As PaymentAccountLastDigits,

                Pos.PositionSingular,

                C.FirstName As CustomerFirstName,
                C.LastName As CustomerLastName,
                C.CreatedDate As CustomerMemberSinceDate,

                L.UserID As LocationUserID,
                L.NickName As LocationName,
                L.AddressLine1, L.AddressLine2,
                L.City,
                SP.StateProvinceName, SP.StateProvinceCode,
                PC.PostalCode,

                E.StartTime As ConfirmedDateStart, E.EndTime As ConfirmedDateEnd,

                P.ServiceDuration, P.HourlyPrice, P.SubtotalPrice, P.FeePrice, P.TotalPrice
        FROM    BookingRequest As R
                 INNER JOIN
                Booking As B
                  ON R.BookingRequestID = B.BookingRequestID
                 INNER JOIN
                PricingEstimate As P
                  ON P.PricingEstimateID = R.PricingEstimateID
                 INNER JOIN
                Users As C
                  ON C.UserID = R.CustomerUserID
                 INNER JOIN
                ServiceAddress As L
                  ON R.ServiceAddressID = L.ServiceAddressID
                 INNER JOIN
                CalendarEvents As E
                  ON E.ID = B.ConfirmedDateID
                 INNER JOIN
                Positions As Pos
                  ON Pos.PositionID = R.PositionID
					AND Pos.CountryID = @3 AND Pos.LanguageID = @4
                 INNER JOIN
                StateProvince As SP
                  ON SP.StateProvinceID = L.StateProvinceID
                 INNER JOIN
                PostalCode As PC
                  ON PC.PostalCodeID = L.PostalCodeID
        WHERE   R.BookingRequestID = @0
                 AND
                B.BookingID = @1
                 AND
                (R.ProviderUserID = @2 OR R.CustomerUserID = @2)
    ";
    dynamic booking;
    using (var db = Database.Open("sqlloco")) {
        booking = db.QuerySingle(sqlGetBookingRequest, brID, bID, u.UserID, 1, 1);
    }

}
@helper printDateTimeRange(DateTime start, DateTime end){
    @start.ToLongDateString()
    <text> from </text>
    @start.ToShortTimeString()
    <text> to </text>
    @end.ToShortTimeString()
}
@helper printAddress(IDictionary<string, object> addressDetails, bool editable){
        <div class="address">
            @if (!String.IsNullOrEmpty((string)addressDetails["name"])) {
            <span class="address-name">@addressDetails["name"]</span>
            }
            <span class="address-location">@addressDetails["location"]</span>
            <span class="address-city">@addressDetails["city"]</span>
            <span class="address-state">@addressDetails["state"]</span>
            <span class="address-zipcode">@addressDetails["zipcode"]</span>
            @if (editable) {
            <div class="tools">
                <a href="#" class="edit">Edit</a>
                <a href="#" class="map">Map</a>
                <a href="#" class="remove">Remove</a>
            </div>
            }
        </div>
}
@functions{
    string getLocationName(dynamic data){
        if (data.LocationUserID == data.CustomerUserID) {
            return data.CustomerFirstName + "'s " + data.LocationName;
        } else if (data.LocationUserID == data.ProviderUserID) {
            return data.ProviderFirstName + "'s " + data.LocationName;
        } else {
            return "";
        }
    }
}
@CommonHelpers.SetupStarRatingPlugin()

@if (booking == null)
{
    <div class="booking main-side">
        Sorry, it could not be found the requested Booking.
    </div>
}
else
{
<div class="booking-request main-side">
    <h3>Waiting booking confirmation from @CommonHelpers.GetUserDisplayName(booking, "Customer")</h3>
    <span class="updateddate">last updated: @booking.UpdatedDate.ToLongDateString() at @booking.UpdatedDate.ToLongTimeString()</span>

    <h4>Customer information</h4>
    @RenderPage(UrlUtil.LangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
        {"AddCssClasses", "message-section" },
        {"Data", booking},
        {"DataPrefix", "Customer"},
        {"Size", "medium"},
        {"UserType", "customer"},
        {"WithContactData", true}
    })

    <h4>Booking time and location</h4>
    <div class="booking-time-location message-section">
        <h5>Position: </h5>
        <span class="position">@booking.PositionSingular</span>

        <h5>Scheduled time: </h5>
        <span class="scheduled-time">@printDateTimeRange(booking.ConfirmedDateStart, booking.ConfirmedDateEnd)</span>

        <h5>Location: </h5>
        <div class="location">
            @printAddress(new Dictionary<string, object>() {
                {"name", getLocationName(booking)}, 
                {"location", booking.AddressLine1 + " " + booking.AddressLine2},
                {"city", booking.City}, 
                {"state", booking.StateProvinceCode},
                {"zipcode", booking.PostalCode}
            }, false)

            <div class="time-estimation">
            (x minutes driving time, y minutes walk)
            </div>
            <a target="_blank" class="view-directions" href="http://maps.google.com/?q=@(booking.AddressLine1 + ", " + booking.City + ", " + booking.StateProvinceCode + ", United States")">View directions</a>
        </div>
    </div>

    <h4>Requested services and pricing estimate</h4>
    @RenderPage("$RequestedBookingServicesWidget.cshtml", booking)

    <h4>Reminders</h4>
    @RenderPage("$BookingRemindersWidget.cshtml")
</div>
}
@RenderPage(UrlUtil.LangPath + "HelpCenter/$FAQS.cshtml")