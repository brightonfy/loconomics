@using WebMatrix.Data;
@{
    CommonHelpers.SecurePage();
    
    var u = DashboardFunctions.GetUserRow();
    var brID = Request["BookingRequestID"];
    var bID = Request["BookingID"];
    
    // TODO: Calculate location distance from provider to customer
    
    var sqlGetBookingRequest = @"
        SELECT  R.BookingRequestID,
                B.BookingID,
                R.CustomerUserID,
                R.PricingEstimateID,
                R.SpecialRequests,
                R.UpdatedDate,
                R.BookingRequestStatusID,
                B.BookingStatusID,

                --TODO where is bank account (last numbers) or how calculate paymentDate
                getdate() As PaymentDate,
                '1234' As PaymentAccountLastDigits,

                Pos.PositionSingular,

                C.FirstName As CustomerFirstName,
                C.LastName As CustomerLastName,
                C.MiddleIn As CustomerMiddleIn,
                C.CreatedDate As CustomerMemberSinceDate,
                C.MobilePhone As CustomerMobilePhone,
                CUP.Email As CustomerEmail,

                CL.AddressLine1 As CustomerAddressLine1,
                CL.AddressLine2 As CustomerAddressLine2,
                CL.City As CustomerCity,
                CSP.StateProvinceName As CustomerStateProvinceName,
                CSP.StateProvinceCode As CustomerStateProvinceCode,
                CPC.PostalCode As CustomerPostalCode,

                L.UserID As LocationUserID,
                L.NickName As LocationName,
                L.AddressLine1, L.AddressLine2,
                L.City,
                SP.StateProvinceName, SP.StateProvinceCode,
                PC.PostalCode,

                E.StartTime As ConfirmedDateStart, E.EndTime As ConfirmedDateEnd,

                P.ServiceDuration, P.HourlyPrice, P.SubtotalPrice, P.FeePrice, P.TotalPrice
        FROM    BookingRequest As R
                 INNER JOIN
                Booking As B
                  ON R.BookingRequestID = B.BookingRequestID
                 INNER JOIN
                PricingEstimate As P
                  ON P.PricingEstimateID = R.PricingEstimateID
                 INNER JOIN
                Users As C
                  ON C.UserID = R.CustomerUserID
                 INNER JOIN
                UserProfile As CUP
                  ON CUP.UserID = C.UserID
                 LEFT JOIN
                ServiceAddress As CL
                  ON CL.UserID = C.UserID
                    AND CL.PreferredAddress = 1
                 LEFT JOIN
                StateProvince As CSP
                  ON CSP.StateProvinceID = CL.StateProvinceID
                 LEFT JOIN
                PostalCode As CPC
                  ON CPC.PostalCodeID = CL.PostalCodeID
                 INNER JOIN
                ServiceAddress As L
                  ON R.ServiceAddressID = L.ServiceAddressID
                 INNER JOIN
                StateProvince As SP
                  ON SP.StateProvinceID = L.StateProvinceID
                 INNER JOIN
                PostalCode As PC
                  ON PC.PostalCodeID = L.PostalCodeID
                 INNER JOIN
                CalendarEvents As E
                  ON E.ID = B.ConfirmedDateID
                 INNER JOIN
                Positions As Pos
                  ON Pos.PositionID = R.PositionID
					AND Pos.CountryID = @3 AND Pos.LanguageID = @4
        WHERE   R.BookingRequestID = @0
                 AND
                B.BookingID = @1
                 AND
                (R.ProviderUserID = @2 OR R.CustomerUserID = @2)
    ";
    dynamic booking;
    using (var db = Database.Open("sqlloco")) {
        booking = db.QuerySingle(sqlGetBookingRequest, brID, bID, u.UserID, 1, 1);
    }

}
@helper printDateTimeRange(DateTime start, DateTime end){
    @start.ToLongDateString()
    <text> from </text>
    @start.ToShortTimeString()
    <text> to </text>
    @end.ToShortTimeString()
}
@helper printAddress(IDictionary<string, object> addressDetails, bool editable){
        <div class="address">
            @if (!String.IsNullOrEmpty((string)addressDetails["name"])) {
            <span class="address-name">@addressDetails["name"]</span>
            }
            <span class="address-location">@addressDetails["location"]</span>
            <span class="address-city">@addressDetails["city"]</span>
            <span class="address-state">@addressDetails["state"]</span>
            <span class="address-zipcode">@addressDetails["zipcode"]</span>
            @if (editable) {
            <div class="tools">
                <a href="#" class="edit">Edit</a>
                <a href="#" class="map">Map</a>
                <a href="#" class="remove">Remove</a>
            </div>
            }
        </div>
}
@helper printGoogleMap(string location){
    <iframe class="google-map" width="120" height="120" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="http://maps.google.com/?q=@(location);z=16&amp;output=embed"></iframe>
}
@functions{
    string getLocationName(dynamic data){
        if (data.LocationUserID == data.CustomerUserID) {
            return data.CustomerFirstName + "'s " + data.LocationName;
        } else if (data.LocationUserID == data.ProviderUserID) {
            return data.ProviderFirstName + "'s " + data.LocationName;
        } else {
            return "";
        }
    }
    string getLocationForGoogleMaps(dynamic data){
        return CommonHelpers.JoinNotEmptyStrings(", ", data.AddressLine1, data.City, data.StateProvinceCode, "United States");
    }
}
@CommonHelpers.SetupStarRatingPlugin()

@if (booking == null)
{
    <div class="booking main-side">
        Sorry, it could not be found the requested Booking.
    </div>
}
else
{
<div class="booking-request booking main-side">
    <h3>Booking confirmation from @CommonHelpers.GetUserDisplayName(booking, "Customer")</h3>
    <span class="updateddate">last updated: @booking.UpdatedDate.ToLongDateString() at @booking.UpdatedDate.ToLongTimeString()</span>

    <h4>Customer information</h4>
    @RenderPage(UrlUtil.LangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
        {"AddCssClasses", "message-section" },
        {"Data", booking},
        {"DataPrefix", "Customer"},
        {"Size", "medium"},
        {"UserType", "customer"},
        {"WithContactData", true}
    })

    <h4>Booking time and location</h4>
    <div class="booking-time-location message-section">
        <h5>Position: </h5>
        <span class="position">@booking.PositionSingular</span>

        <h5>Scheduled time: </h5>
        <span class="scheduled-time">@printDateTimeRange(booking.ConfirmedDateStart, booking.ConfirmedDateEnd)</span>

        <h5>Location: </h5>
        <div class="location">
            @printAddress(new Dictionary<string, object>() {
                {"name", getLocationName(booking)}, 
                {"location", booking.AddressLine1 + " " + booking.AddressLine2},
                {"city", booking.City}, 
                {"state", booking.StateProvinceCode},
                {"zipcode", booking.PostalCode}
            }, false)

            <div class="time-estimation">
            (x minutes driving time, y minutes walk)
            </div>
            <a target="_blank" class="view-directions" href="http://maps.google.com/?q=@getLocationForGoogleMaps(booking)">View direction</a>
            @printGoogleMap(getLocationForGoogleMaps(booking))
        </div>
    </div>

    <h4>Requested services and pricing estimate</h4>
    @RenderPage("$RequestedBookingServicesWidget.cshtml", booking)

    <h4>Reminders</h4>
    @RenderPage("$BookingRemindersWidget.cshtml")
</div>
}
@RenderPage(UrlUtil.LangPath + "HelpCenter/$FAQS.cshtml")