@{
    var p = PageData["providerrow"] ?? DashboardFunctions.GetUserRow(Request["providerid"].AsInt());
    var c = PageData["customerrow"] ?? DashboardFunctions.GetUserRow();
    var pos = PageData["positionrow"] ?? DashboardFunctions.GetUserPos(Request["providerid"].AsInt(),
        Request["positionid"].AsInt());
    //var customerid = c.UserID;
    
    if (p == null || c == null || pos == null){
        var inputdataerrormessage = "No enought input data to show results";
        if (IsPost){
            CommonHelpers.ReturnJsonError(-1, inputdataerrormessage);
        }else{
            throw new Exception(inputdataerrormessage);
        }
    }
    
    // TODO Load from database real data
    // Classes for differents calendar availability states
    var stateClasses = new List<string>(){"free", "busy", "tentative", "unavailable"};
    Random r = new Random();
    
    Validation.RequireFields("preferred-date", "preferred-start-time", "preferred-end-time",
        "alternative-1-date", "alternative-1-start-time", "alternative-1-end-time",
        "alternative-2-date", "alternative-2-start-time", "alternative-2-end-time");
    Validation.Add("preferred-date", Validator.DateTime());
    Validation.Add("alternative-1-date", Validator.DateTime());
    Validation.Add("alternative-2-date", Validator.DateTime());
    Validation.Add("select-location", Validator.Integer());
    // TODO: create validators for only dates and only time and add for start-time, end-time and dates
    
    if (IsPost && Validation.IsValid()){
        
        // Check if is a valid booking process (session not expired or erro at first step)
        var bookingRequestID = Session["BookingRequestID"] is int ? (int)Session["BookingRequestID"] : 0;
        if (bookingRequestID <= 0) {
            /* Several options to do here
             * - Show error (strange message for user, need restart again introducing first his login)
             * X Silently redirect to start booking again
             * - Request login via ajax, re-send form data, looking in the database for a 'timeouted'
             *   bookingrequest for this customer at this provider and position, recover it to continue
             *   processing the form (if there is no bookingrequestid again, do second option).
             */
            //ModelState.AddFormError("Booking request is not valid, maybe the session time expired");
            CommonHelpers.ReturnJsonResult(1, 
                UrlUtil.LangPath + "Booking/?ProviderID=" + p.UserID.ToString() +
                "&PositionID=" + pos.PositionID.ToString());
        }
        
        // Check if a location was selected or new location must be validated:
        int locationID = Request["select-location"].AsInt();
        if (Request["select-location"].IsEmpty()) {
            ModelState.AddFormError("You must specify a location");
        } else if (locationID == 0) {
            if (Request["street-address-line-1"].IsEmpty()) {
                ModelState.AddError("street-address-line-1", "The street address is required");
            }
            if (Request["city"].IsEmpty()) {
                ModelState.AddError("city", "The city is required");
            }
            if (Request["state"].IsEmpty()) {
                ModelState.AddError("state", "The state is required");
            }
            if (Request["zip"].IsEmpty()) {
                ModelState.AddError("zip", "The Zip Code is required");
            }
        }
        
        if (Request["save-location"] == "true" && Request["save-location-as"].IsEmpty()){
            ModelState.AddError("save-location-as", "To save the location is required a name");
        }
        
        DateTime dt1Start, dt1End, dt2Start, dt2End, dt3Start, dt3End;
        if (!DateTime.TryParse(
                Request["preferred-date"] + " " + Request["preferred-start-time"], out dt1Start)) {
            ModelState.AddFormError("Preferred Date and Start Time are not correct");
        }
        if (!DateTime.TryParse(
                Request["preferred-date"] + " " + Request["preferred-end-time"], out dt1End)) {
            ModelState.AddFormError("Preferred Date and End Time are not correct");
        }
        if (!DateTime.TryParse(
                Request["alternative-1-date"] + " " + Request["alternative-1-start-time"], out dt2Start)) {
            ModelState.AddFormError("Second best Date and Start Time are not correct");
        }
        if (!DateTime.TryParse(
                Request["alternative-1-date"] + " " + Request["alternative-1-end-time"], out dt2End)) {
            ModelState.AddFormError("Second best Date and End Time are not correct");
        }
        if (!DateTime.TryParse(
                Request["alternative-2-date"] + " " + Request["alternative-2-start-time"], out dt3Start)) {
            ModelState.AddFormError("Third best Date and Start Time are not correct");
        }
        if (!DateTime.TryParse(
                Request["alternative-2-date"] + " " + Request["alternative-2-end-time"], out dt3End)) {
            ModelState.AddFormError("Third best Date and End Time are not correct");
        }
        
        if (ModelState.IsValid){
            var sqlInsServiceLocation = @"
                INSERT INTO [serviceaddress]
                           ([UserID]
                           ,[PositionID]
                           ,[AddressTypeID]
                           ,[NickName]
                           ,[AddressLine1]
                           ,[AddressLine2]
                           ,[City]
                           ,[StateProvinceID]
                           ,[PostalCodeID]
                           ,[CountryID]
                           ,[Latitude]
                           ,[Longitude]
                           ,[GoogleMapsURL]
                           ,[ServicesPerformedAtLocation]
                           ,[TravelFromLocation]
                           ,[ServiceRadiusFromLocation]
                           ,[TransportType]
                           ,[PreferredAddress]
                           ,[CreatedDate]
                           ,[UpdatedDate]
                           ,[ModifiedBy]
                           ,[Active])
                     VALUES (@0, 0, 12, @7, @1, @2, @3, @4, @5, @6, 
                             null, null, null, 0, 0, null, null, 0, getdate(), getdate(), 'sys', 1)
                SELECT Cast(@@Identity As int) As ServiceAddressID
            ";
            var sqlInsCalendarEvent = @"
                INSERT INTO [CalendarEvents]
                           ([UserId]
                           ,[CalendarAvailabilityTypeID]
                           ,[CalendarEventLocationId]
                           ,[StartTime]
                           ,[IcsSrcName]
                           ,[UID]
                           ,[TimeZone]
                           ,[EndTime]
                           ,[RecurringRules]
                           ,[JobCategoryId]
                           ,[JobDescription])
                     VALUES (@0, @1, null, @2, null, null, null, @3, null, null, null)
                SELECT Cast(@@Identity As int) As CalendarEventID
            ";
            var sqlUpdBookingRequest = @"
                UPDATE  BookingRequest SET
                        ServiceAddressID = @1,
                        PreferredDateID = @2,
                        AlternativeDate1ID = @3,
                        AlternativeDate2ID = @4
                WHERE   BookingRequestID = @0
            ";
            
            // Inserting data into the database
            using (var db = Database.Open("sqlloco")) {
                // If we have not a location (is 0), means user specify one
                // that must be saved:
                if (locationID == 0) {
                    // User wants to save as 'my location'?
                    string locationNickName = null;
                    if (Request["save-location"] == "true" &&
                        !String.IsNullOrWhiteSpace(Request["save-location-as"])) {
                        locationNickName = Request["save-location-as"];
                    }
                    // Save location as service location
                    locationID = db.QueryValue(sqlInsServiceLocation, c.UserID,
                        Request["street-address-line-1"],
                        Request["street-address-line-2"],
                        Request["city"],
                        Request["state"],
                        Request["zip"],
                        1, // countryID = 1
                        locationNickName);
                }
                
                // Save date-times as 'tentative' provider Events
                var dt1ID = db.QueryValue(sqlInsCalendarEvent, p.UserID,
                    3, // Availability is 'Tentative'
                    dt1Start, dt1End);
                var dt2ID = db.QueryValue(sqlInsCalendarEvent, p.UserID,
                    3, // Availability is 'Tentative'
                    dt2Start, dt2End);
                var dt3ID = db.QueryValue(sqlInsCalendarEvent, p.UserID,
                    3, // Availability is 'Tentative'
                    dt3Start, dt3End);
                
                // Updating BookingRequest with location and date-times
                db.Execute(sqlUpdBookingRequest, bookingRequestID,
                    locationID, dt1ID, dt2ID, dt3ID);
            }
            
            // Return OK result
            CommonHelpers.ReturnJsonResult(0, null);
        }
    }
    
    /*
     * Loading some data:
     */
    dynamic providerLocations, customerLocations;
    using (var db = Database.Open("sqlloco")) {
        // Provider locations
        providerLocations = db.Query(@"
            SELECT  ServiceAddressID, NickName
            FROM    serviceaddress
            WHERE   UserId = @0 AND PositionID = @1
                     AND NickName IS NOT NULL
                     AND ServicesPerformedAtLocation = 1
        ", p.UserID, pos.PositionID);
        // Customer locations
        customerLocations = db.Query(@"
            SELECT  ServiceAddressID, NickName
            FROM    serviceaddress
            WHERE   UserId = @0 AND PositionID = 0
                     AND NickName IS NOT NULL
        ", c.UserID);
    }
}
@helper printOptionsHours(string selectedHour){
    var firstHour = new TimeSpan(9, 0, 0);
    var lastHour = new TimeSpan(18, 30, 0);
    var interval = new TimeSpan(0, 30, 0);
    for (var hour = firstHour; hour <= lastHour; hour += interval)
    {
        string thisvalue = hour.ToString("c");
        <option @CommonHelpers.IsSelected(selectedHour, thisvalue) value="@thisvalue">@((new DateTime(hour.Ticks)).ToShortTimeString())</option>
    }
}

<p class="info">
    Please review your provider’s availability calendar and choose a location, preferred time for services to be peformed and up to two alternate times.  Being flexible helps the two of you get an accurate time booked quickly.  
</p>
<form action="@(UrlUtil.LangPath)Booking/$Schedule/" method="post" class="schedule ajax ajax-box" id="booking-schedule">
    <input type="hidden" name="providerid" value="@p.UserID"/>
    <input type="hidden" name="positionid" value="@pos.PositionID"/>
    @CommonHelpers.GetValidationScripts()
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="availability availability-calendar box">
        <legend>@(p.FirstName)'s availability:</legend>
        <div class="calendar">
            <ol class="days">
                <li><h5>S</h5></li><li><h5>M</h5></li><li><h5>T</h5></li><li><h5>W</h5></li><li><h5>T</h5></li><li><h5>F</h5></li><li><h5>S</h5></li>
            </ol>
            <ol class="hours">
                @for(var h = 7; h < 23; h++){
                <li><h5>@((new DateTime(2000, 1, 1, h, 0, 0)).ToString("ht"))</h5></li>
                }
            </ol>
            <ol class="datetimes">
                @for(var h = 7; h < 23; h++){
                 for(var b = 0; b < 2; b++){
                    var half = b == 0 ? "" : "half ";
                for(var d = 0; d < 7; d++)
                {<li class="@half@stateClasses[r.Next(0, 4)]"></li>}
                }}
            </ol>
        </div>
        <ul class="calendar-legend">
            <li class="free"><span class="color">Green</span>Free</li>
            <li class="busy"><span class="color">Purple</span>Busy</li>
            <li class="tentative"><span class="color">Yellow</span>Tentative</li>
            <li class="unavailable"><span class="color">White</span>Unavailable</li>
        </ul>
    </fieldset>
    <fieldset class="location box">
        <legend>Location where services are to be performed:</legend>
        <select name="select-location" class="select-location">
            <option value="" @CommonHelpers.IsSelected(Request["select-location"], "")>Select a location</option>
            <option value="0" @CommonHelpers.IsSelected(Request["select-location"], "0")>Enter new location</option>
            @if (providerLocations != null && providerLocations.Count > 0) {
                <optgroup label="Provider perform services at following locations">
                    @foreach (var ploc in providerLocations) {
                        <option @CommonHelpers.IsSelected(Request["select-location"], ploc.ServiceAddressID.ToString()) value="@ploc.ServiceAddressID">@ploc.NickName</option>
                    }
                </optgroup>
            }
            @if (customerLocations != null && customerLocations.Count > 0) {
                <optgroup label="Your locations">
                    @foreach (var ploc in customerLocations) {
                        <option @CommonHelpers.IsSelected(Request["select-location"], ploc.ServiceAddressID.ToString()) value="@ploc.ServiceAddressID">@ploc.NickName</option>
                    }
                </optgroup>
            }
        </select>
        <ul class="enter-new-location" style="display: none">
            <li class="street-address-line-1">
                <label>Street address line 1:<input type="text" value="@Request["street-address-line-1"]" name="street-address-line-1" @Validation.GetHtml("street-address-line-1")/></label>
            </li>
            <li class="street-address-line-2">
                <label>Street address line 2:<input type="text" value="@Request["street-adderss-line-2"]" name="street-address-line-2" @Validation.GetHtml("street-address-line-2")/></label>
            </li>
            <li class="city">
                <label>City:<input type="text" value="@Request["city"]" name="city" @Validation.GetHtml("city")/></label>
            </li>
            <!-- Collapsed next elements code to avoid white spaces that create excesive width on IE -->
            <li class="state"><label>State:<select name="state" @Validation.GetHtml("state")>
                        @CommonHelpers.StateProvinceOptions(Request["state"].AsInt())
                    </select></label></li>
            <li class="zip">
                <label>Zip Code:<input type="text" value="@Request["zip"]" name="zip" @Validation.GetHtml("zip")/></label>
            </li>
            <li class="save-to-my-locations">
                <label class="save"><input type="checkbox" @CommonHelpers.IsChecked(Request["save-location"], "true") value="true" name="save-location"/>Save</label>
                <label>to my locations as:<input type="text" value="@Request["save-location-as"]" name="save-location-as" @Validation.GetHtml("save-location-as")/></label>
            </li>
        </ul>
    </fieldset>
    <fieldset class="select-schedule">
        <fieldset class="preferred-option select-date-time box">
            <legend>My preferred option:</legend>
            <ul>
                <li class="date">
                    <label>Date:<input class="date date-pick" type="text" value="@Request["preferred-date"]" name="preferred-date" @Validation.GetHtml("preferred-date")/></label>
                </li>
                <li class="start-time">
                    <label>Start time:<select name="preferred-start-time" @Validation.GetHtml("preferred-start-time")>@printOptionsHours(Request["preferred-start-time"])</select></label>
                </li>
                <li class="end-time">
                    <label>End time:<select name="preferred-end-time" @Validation.GetHtml("preferred-end-time")>@printOptionsHours(Request["preferred-end-time"])</select></label>
                </li>
            </ul>
        </fieldset>
        <fieldset class="alternative-option-1 select-date-time box">
            <legend>Second best option:</legend>
            <ul>
                <li class="date">
                    <label>Date:<input class="date date-pick" type="text" value="@Request["alternative-1-date"]" name="alternative-1-date" @Validation.GetHtml("alternative-1-date")/></label>
                </li>
                <li class="start-time">
                    <label>Start time:<select name="alternative-1-start-time" @Validation.GetHtml("alternative-1-start-time")>@printOptionsHours(Request["alternative-1-start-time"])</select></label>
                </li>
                <li class="end-time">
                    <label>End time:<select name="alternative-1-end-time" @Validation.GetHtml("alternative-1-end-time")>@printOptionsHours(Request["alternative-1-end-time"])</select></label>
                </li>
            </ul>
        </fieldset>
        <fieldset class="alternative-option-2 select-date-time box">
            <legend>Third best option:</legend>
            <ul>
                <li class="date">
                    <label>Date:<input class="date date-pick" type="text" value="@Request["alternative-2-date"]" name="alternative-2-date" @Validation.GetHtml("alternative-2-date")/></label>
                </li>
                <li class="start-time">
                    <label>Start time:<select name="alternative-2-start-time" @Validation.GetHtml("alternative-2-start-time")>@printOptionsHours(Request["alternative-2-start-time"])</select></label>
                </li>
                <li class="end-time">
                    <label>End time:<select name="alternative-2-end-time" @Validation.GetHtml("alternative-2-end-time")>@printOptionsHours(Request["alternative-2-end-time"])</select></label>
                </li>
            </ul>
        </fieldset>
        @*
        <fieldset class="recurring">
            <label><input type="checkbox" @CommonHelpers.IsChecked(Request["recurring"], "true") value="true" name="recurring"/>Make this appointment recurring</label>
        </fieldset>
        *@
    </fieldset>
    <fieldset class="actions">
        <button data-wizard-next-step="#payment" class="button proceed-to-payment next main-action">Provide payment</button>
    </fieldset>
</form>
