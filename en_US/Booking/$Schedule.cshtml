@{
    var p = PageData["providerrow"] ?? DashboardFunctions.GetUserRow(Request["providerid"].AsInt());
    var c = PageData["customerrow"] ?? DashboardFunctions.GetUserRow();
    var pos = PageData["positionrow"] ?? DashboardFunctions.GetUserPos(Request["providerid"].AsInt(),
        Request["positionid"].AsInt());
    //var customerid = c.UserID;
    
    if (p == null || c == null || pos == null){
        var inputdataerrormessage = "No enought input data to show results";
        if (IsPost){
            CommonHelpers.ReturnJsonError(-1, inputdataerrormessage);
        }else{
            throw new Exception(inputdataerrormessage);
        }
    }
    
    // TODO Load from database real data
    // Classes for differents calendar availability states
    var stateClasses = new List<string>(){"free", "busy", "tentative", "unavailable"};
    Random r = new Random();
    
    Validation.RequireField("street-address-line-1", "The street address is required");
    Validation.RequireField("city", "The city is required");
    Validation.RequireField("state", "The state is required");
    Validation.RequireField("zip", "The Zip Code is required");
    Validation.RequireFields("preferred-date", "preferred-start-time", "preferred-end-time",
        "alternative-1-date", "alternative-1-start-time", "alternative-1-end-time",
        "alternative-2-date", "alternative-2-start-time", "alternative-2-end-time");
    Validation.Add("preferred-date", Validator.DateTime());
    Validation.Add("alternative-1-date", Validator.DateTime());
    Validation.Add("alternative-2-date", Validator.DateTime());
    // TODO: create validators for only dates and only time and add for start-time, end-time and dates
    
    if (IsPost && Validation.IsValid()){
        if (Request["save-location"] == "true" && Request["save-location-as"].IsEmpty()){
            ModelState.AddError("save-location-as", "To save the location is required a name");
        }
        
        if (ModelState.IsValid){
            // TODO Insert data into the database
            
            // Return OK result
            CommonHelpers.ReturnJsonResult(0, null);
        }
    }
}
@helper printOptionsHours(string selectedHour){
    var firstHour = new TimeSpan(9, 0, 0);
    var lastHour = new TimeSpan(18, 30, 0);
    var interval = new TimeSpan(0, 30, 0);
    for (var hour = firstHour; hour <= lastHour; hour += interval)
    {
        string thisvalue = hour.ToString("c");
        <option @CommonHelpers.IsSelected(selectedHour, thisvalue) value="@thisvalue">@((new DateTime(hour.Ticks)).ToShortTimeString())</option>
    }
}

<p class="info">
    Please review your provider’s availability calendar and choose a location, preferred time for services to be peformed and up to two alternate times.  Being flexible helps the two of you get an accurate time booked quickly.  
</p>
<form action="@(UrlUtil.LangPath)Booking/$Schedule/" method="post" class="schedule ajax ajax-box" id="booking-schedule">
    <input type="hidden" name="providerid" value="@p.UserID"/>
    <input type="hidden" name="positionid" value="@pos.PositionID"/>
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="availability availability-calendar box">
        <legend>@(p.FirstName)'s availability:</legend>
        <div class="calendar">
            <ol class="days">
                <li><h5>S</h5></li><li><h5>M</h5></li><li><h5>T</h5></li><li><h5>W</h5></li><li><h5>T</h5></li><li><h5>F</h5></li><li><h5>S</h5></li>
            </ol>
            <ol class="hours">
                @for(var h = 7; h < 23; h++){
                <li><h5>@((new DateTime(2000, 1, 1, h, 0, 0)).ToString("ht"))</h5></li>
                }
            </ol>
            <ol class="datetimes">
                @for(var h = 7; h < 23; h++){
                 for(var b = 0; b < 2; b++){
                    var half = b == 0 ? "" : "half ";
                for(var d = 0; d < 7; d++)
                {<li class="@half@stateClasses[r.Next(0, 4)]"></li>}
                }}
            </ol>
        </div>
        <ul class="calendar-legend">
            <li class="free"><span class="color">Green</span>Free</li>
            <li class="busy"><span class="color">Purple</span>Busy</li>
            <li class="tentative"><span class="color">Yellow</span>Tentative</li>
            <li class="unavailable"><span class="color">White</span>Unavailable</li>
        </ul>
    </fieldset>
    <fieldset class="location box">
        <legend>Location where services are to be performed:</legend>
        <ul>
            <li class="street-address-line-1">
                <label>Street address line 1:<input type="text" value="@Request["street-address-line-1"]" name="street-address-line-1" @Validation.GetHtml("street-address-line-1")/></label>
            </li>
            <li class="street-address-line-2">
                <label>Street address line 2:<input type="text" value="@Request["street-adderss-line-2"]" name="street-address-line-2" @Validation.GetHtml("street-address-line-2")/></label>
            </li>
            <li class="city">
                <label>City:<input type="text" value="@Request["city"]" name="city" @Validation.GetHtml("city")/></label>
            </li>
            <!-- Collapsed next elements code to avoid white spaces that create excesive width on IE -->
            <li class="state"><label>State:<select name="state" @Validation.GetHtml("state")>
                        @CommonHelpers.StateProvinceOptions(Request["state"].AsInt())
                    </select></label></li>
            <li class="zip">
                <label>Zip Code:<input type="text" value="@Request["zip"]" name="zip" @Validation.GetHtml("zip")/></label>
            </li>
            <li class="save-to-my-locations">
                <label class="save"><input type="checkbox" @CommonHelpers.IsChecked(Request["save-location"], "true") value="true" name="save-location"/>Save</label>
                <label>to my locations as:<input type="text" value="@Request["save-location-as"]" name="save-location-as" @Validation.GetHtml("save-location-as")/></label>
            </li>
        </ul>
    </fieldset>
    <fieldset class="select-schedule">
        <fieldset class="preferred-option select-date-time box">
            <legend>My preferred option:</legend>
            <ul>
                <li class="date">
                    <label>Date:<input class="date date-pick" type="text" value="@Request["preferred-date"]" name="preferred-date" @Validation.GetHtml("preferred-date")/></label>
                </li>
                <li class="start-time">
                    <label>Start time:<select name="preferred-start-time" @Validation.GetHtml("preferred-start-time")>@printOptionsHours(Request["preferred-start-time"])</select></label>
                </li>
                <li class="end-time">
                    <label>End time:<select name="preferred-end-time" @Validation.GetHtml("preferred-end-time")>@printOptionsHours(Request["preferred-end-time"])</select></label>
                </li>
            </ul>
        </fieldset>
        <fieldset class="alternative-option-1 select-date-time box">
            <legend>Second best option:</legend>
            <ul>
                <li class="date">
                    <label>Date:<input class="date date-pick" type="text" value="@Request["alternative-1-date"]" name="alternative-1-date" @Validation.GetHtml("alternative-1-date")/></label>
                </li>
                <li class="start-time">
                    <label>Start time:<select name="alternative-1-start-time" @Validation.GetHtml("alternative-1-start-time")>@printOptionsHours(Request["alternative-1-start-time"])</select></label>
                </li>
                <li class="end-time">
                    <label>End time:<select name="alternative-1-end-time" @Validation.GetHtml("alternative-1-end-time")>@printOptionsHours(Request["alternative-1-end-time"])</select></label>
                </li>
            </ul>
        </fieldset>
        <fieldset class="alternative-option-2 select-date-time box">
            <legend>Third best option:</legend>
            <ul>
                <li class="date">
                    <label>Date:<input class="date date-pick" type="text" value="@Request["alternative-2-date"]" name="alternative-2-date" @Validation.GetHtml("alternative-2-date")/></label>
                </li>
                <li class="start-time">
                    <label>Start time:<select name="alternative-2-start-time" @Validation.GetHtml("alternative-2-start-time")>@printOptionsHours(Request["alternative-2-start-time"])</select></label>
                </li>
                <li class="end-time">
                    <label>End time:<select name="alternative-2-end-time" @Validation.GetHtml("alternative-2-end-time")>@printOptionsHours(Request["alternative-2-end-time"])</select></label>
                </li>
            </ul>
        </fieldset>
        <fieldset class="recurring">
            <label><input type="checkbox" @CommonHelpers.IsChecked(Request["recurring"], "true") value="true" name="recurring"/>Make this appointment recurring</label>
        </fieldset>
    </fieldset>
    <fieldset class="actions">
        <button data-wizard-next-step="#payment" class="button proceed-to-payment next main-action">Provide payment</button>
    </fieldset>
</form>
