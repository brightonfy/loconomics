@using WebMatrix.Data;
@{
    CommonHelpers.SecurePage();
    
    var u = DashboardFunctions.GetUserRow();
    
    var sqlGetPendingBookingRequest = @"
        SELECT  R.BookingRequestID,
                0 As BookingID,
                R.CustomerUserID,
                R.PricingEstimateID,
                C.FirstName As CustomerFirstName,
                C.LastName As CustomerLastName,
                E.StartTime,
                E.EndTime,
                E.TimeZone,
                Pos.PositionSingular,
                Pr.TotalPrice
        FROM    BookingRequest As R
                 INNER JOIN
                PricingEstimate As Pr
                  ON Pr.PricingEstimateID = R.PricingEstimateID
                 INNER JOIN
                Users As C
                  ON C.UserID = R.CustomerUserID
                 LEFT JOIN
                CalendarEvents As E
                  ON E.Id = R.PreferredDateID
                 INNER JOIN
                Positions As Pos
                  ON Pos.PositionID = R.PositionID
					AND Pos.CountryID = @1 AND Pos.LanguageID = @2
        WHERE   
                R.CustomerUserID=@0
                 OR
                R.ProviderUserID=@0
                 AND
                R.BookingRequestStatusID <> 1
                 AND
                R.BookingRequestStatusID <> 3
    ";
    var sqlGetBookingsByDateRange = @"
        SELECT  R.BookingRequestID,
                B.BookingID,
                R.CustomerUserID,
                R.PricingEstimateID,
                C.FirstName As CustomerFirstName,
                C.LastName As CustomerLastName,
                E.StartTime,
                E.EndTime,
                E.TimeZone,
                Pos.PositionSingular,
                Pr.TotalPrice
        FROM    Booking As B
                 INNER JOIN
                BookingRequest As R
                  ON B.BookingRequestID = R.BookingRequestID
                 INNER JOIN
                PricingEstimate As Pr
                  ON Pr.PricingEstimateID = R.PricingEstimateID
                 INNER JOIN
                Users As C
                  ON C.UserID = R.CustomerUserID
                 LEFT JOIN
                CalendarEvents As E
                  ON E.Id = B.ConfirmedDateID
                 INNER JOIN
                Positions As Pos
                  ON Pos.PositionID = R.PositionID
					AND Pos.CountryID = @3 AND Pos.LanguageID = @4
        WHERE   R.ProviderUserID=@0
                 AND
                Convert(date, E.StartTime) >= @1
                 AND
                Convert(date, E.StartTime) <= @2
    ";
    dynamic pendingBookingRequests, todayBookings, tomorrowBookings, thisweekBookings, 
        upcomingBookings, pastBookings;
    using (var db = Database.Open("sqlloco")) {
        pendingBookingRequests = db.Query(sqlGetPendingBookingRequest, u.UserID, 1, 1);
        
        // Preparing dates for further filtering
        var today = DateTime.Today;
        var tomorrow = today.AddDays(1);
        var thisweekFirstDay = today.AddDays(0 - today.DayOfWeek);
        var thisweekLastDay = thisweekFirstDay.AddDays(6);
        var upcomingFirstDay = tomorrow.AddDays(1);
        var upcomingLastDay = System.Data.SqlTypes.SqlDateTime.MaxValue; // DateTime.MaxValue;
        var pastFirstDay = System.Data.SqlTypes.SqlDateTime.MinValue; // DateTime.MinValue (this is not valid at SQLServer!)
        var pastLastDay = thisweekFirstDay.AddDays(-1);
        
        todayBookings = db.Query(sqlGetBookingsByDateRange, u.UserID, today, today, 1, 1);
        tomorrowBookings = db.Query(sqlGetBookingsByDateRange, u.UserID, tomorrow, tomorrow, 1, 1);
        thisweekBookings = db.Query(sqlGetBookingsByDateRange, u.UserID, thisweekFirstDay, thisweekLastDay, 1, 1);
        upcomingBookings = db.Query(sqlGetBookingsByDateRange, u.UserID, upcomingFirstDay, upcomingLastDay, 1, 1);
        pastBookings = db.Query(sqlGetBookingsByDateRange, u.UserID, pastFirstDay, pastLastDay, 1, 1);
    }
    
    /* Some static strings */
    string strNewBookingRequestSingular = "new booking request";
    string strNewBookingRequestPlural = "new booking requests";
    string strBookingSingular = "booking";
    string strBookingPlural = "bookings";
}
@helper printDateTimeRange(DateTime? start, DateTime? end){
    if (start.HasValue && end.HasValue) {
        @start.Value.ToLongDateString()
        <text>, </text>
        @start.Value.ToShortTimeString()
        <text> to </text>
        @end.Value.ToShortTimeString()
    } else {
        <span class="no-dates">Date not available</span>
    }
}
@* Print a Booking or BookingRequest *@
@helper printItem(dynamic item) {
  <li>
    @RenderPage(UrlUtil.LangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
        {"Data", item},
        {"DataPrefix", "Customer"},
        {"Size", "mini"},
        {"UserType", "customer"}
    })
    <ul class="item-summary">
        <li>
            <h5>Time:</h5> @*Monday, April 15th, 2012, 11:00am to 2:00pm*@
                @printDateTimeRange(item.StartTime, item.EndTime)
        </li>
        <li>
            <h5>Position:</h5> @item.PositionSingular
        </li>
        <li>
            <h5>Details:</h5> @printItemDetails(item)
        </li>
    </ul>
    <div class="actions">
        @if (item.BookingID > 0) {
            <button class="item-action responded" data-booking-id="@item.BookingID" data-booking-request-id="@item.BookingRequestID">Responded</button>
        } else {
            <button class="item-action" data-booking-request-id="@item.BookingRequestID">Respond</button>
        }
        <div class="total-price item-extra-info">$@item.TotalPrice</div>
    </div>
  </li>
}
@helper printItemDetails(dynamic item) {
    /* Copied from Booking/$Payment */
    var sqlGetPricingVars = @"
        SELECT  V.CustomerPricingVariableDisplayText As Name, P.CustomerPricingDataInput As Quantity
        FROM    PricingEstimateDetail As P
                 INNER JOIN
                PricingVariable As V
                  ON V.PricingVariableID = P.PricingVariableID
        WHERE   P.PricingEstimateID = @0
                 AND V.CountryId = @1 AND V.LanguageID = @2
    ";
    var db = Database.Open("sqlloco");
    var i = 0;
    var iprint = "";
    foreach (var pitem in db.Query(sqlGetPricingVars, item.PricingEstimateID, 1, 1)) {
        if (i > 0) {
            iprint = "; ";
        }
        i++;
        @(iprint + pitem.Name + " " + pitem.Quantity)
    }
}

<ul class="booking-list-groups items-groups-list">

    @if (pendingBookingRequests.Count > 0) {
    <li>
        <h3>Need response: 
            <span class="items-count bookings-number">@pendingBookingRequests.Count @(pendingBookingRequests.Count == 1 ? strNewBookingRequestSingular : strNewBookingRequestPlural)</span>
        </h3>
        <ul class="bookings-list items-list pending-booking-requests">
            @foreach (var item in pendingBookingRequests) {
                @printItem(item)
            }
        </ul>
    </li>
    }

    @if (todayBookings.Count > 0) {
    <li>
        <h3>Today: 
            <span class="items-count bookings-number">@todayBookings.Count @(todayBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
        </h3>
        <ul class="bookings-list items-list today-bookings">
            @foreach (var item in todayBookings) {
                @printItem(item)
            }
        </ul>
    </li>
    }

    @if (tomorrowBookings.Count > 0) {
    <li>
        <h3>Tomorrow: 
            <span class="items-count bookings-number">@tomorrowBookings.Count @(tomorrowBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
        </h3>
        <ul class="bookings-list items-list tomorrow-bookings">
            @foreach (var item in tomorrowBookings) {
                @printItem(item)
            }
        </ul>
    </li>
    }

    @if (thisweekBookings.Count > 0) {
    <li>
        <h3>This week: 
            <span class="items-count bookings-number">@thisweekBookings.Count @(thisweekBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
        </h3>
        <ul class="bookings-list items-list this-week-bookings">
            @foreach (var item in thisweekBookings) {
                @printItem(item)
            }
        </ul>
    </li>
    }

    @if (upcomingBookings.Count > 0) {
    <li>
        <h3>Upcoming: 
            <span class="items-count bookings-number">@upcomingBookings.Count @(upcomingBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
        </h3>
        <ul class="bookings-list items-list upcoming-bookings">
            @foreach (var item in upcomingBookings) {
                @printItem(item)
            }
        </ul>
    </li>
    }

    @if (pastBookings.Count > 0) {
    <li>
        <h3>Past: 
            <span class="items-count bookings-number">@pastBookings.Count @(pastBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
        </h3>
        <ul class="bookings-list items-list past-bookings">
            @foreach (var item in pastBookings) {
                @printItem(item)
            }
        </ul>
    </li>
    }
</ul>