@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    LcHelpers.SecurePage();
    
    var u = LcData.UserInfo.GetUserRow();
    var brID = Request["BookingRequestID"];

    var confirmationLimitHours = 18;
    DateTime confirmationLimitDate = DateTime.MaxValue;
    
    // TODO: Calculate location distance from provider to customer
    
    var booking = LcData.Booking.GetBookingRequestForUser(brID.AsInt(), u.UserID, u.IsAdmin);

    if (booking != null) {
        confirmationLimitDate = booking.UpdatedDate.AddHours(confirmationLimitHours);
    }
    
    var prefix = "booking-request-" + brID;
}
@helper printDateTimeRange(DateTime start, DateTime end){
    @start.ToLongDateString()
    <text> from </text>
    @start.ToShortTimeString()
    <text> to </text>
    @end.ToShortTimeString()
}
@helper printTitleStatus(dynamic booking, dynamic itsUserData, string itsUserType){
    var statusTitle = "Booking request involving {0}. Unknown status";
    switch (itsUserType) {
        case "customer":
            statusTitle = "Booking request from {0}. Unknown status";
            switch ((int)booking.BookingRequestStatusID) {
                case 1: // created but not complete
                case 3: // created but not complete because time out
                    statusTitle = "Incomplete booking request from {0}";
                    break;
                case 2: // completed request by customer, awaiting provider confirmation
                    statusTitle = "Booking request from {0}";
                    break;
                case 4: // cancelled by customer
                    statusTitle = "Booking request cancelled by {0}";
                    break;
                case 5: // denied by provider
                    statusTitle = "Declined booking request from {0}";
                    break;
                case 6: // expired (not answered by provider in time)
                    statusTitle = "Expired booking request from {0}";
                    break;
                case 7: // accepted by provider (you must consider view the booking details!)
                    statusTitle = "Accepted booking request from {0}";
                    break;
                case 8: // denied with alternatives
                    statusTitle = "Declined with alternatives booking request from {0}";
                    break;
            }
            break;
        case "provider":
            statusTitle = "Booking request for {0}. Unknown status";
            switch ((int)booking.BookingRequestStatusID) {
                case 1: // created but not complete
                case 3: // created but not complete because time out
                    statusTitle = "Incomplete booking request for {0}";
                    break;
                case 2: // completed request by customer, awaiting provider confirmation
                    statusTitle = "Waiting for {0} to confirm request";
                    break;
                case 4: // cancelled by customer
                    statusTitle = "Booking request for {0} cancelled by me";
                    break;
                case 5: // denied by provider
                    statusTitle = "Declined booking request by {0}";
                    break;
                case 6: // expired (not answered by provider in time)
                    statusTitle = "Expired booking request for {0}";
                    break;
                case 7: // accepted by provider (you must consider view the booking details!)
                    statusTitle = "Accepted booking request for {0}";
                    break;
                case 8: // denied with alternatives
                    statusTitle = "Declined with alternatives booking request by {0}";
                    break;
            }
            break;
    }
    @String.Format(statusTitle, LcHelpers.GetUserDisplayName(itsUserData))
}
@*LcHelpers.SetupStarRatingPlugin()*@

@if (booking == null)
{
    <div class="booking-request main-side">
        Sorry, it could not be found the requested Booking Request.
    </div>
}
else
{
    // Checking item: user type of the other user, not current user
    int itsUserID = booking.ProviderUserID;
    string itsUserType = "provider";
    string itsUserLabel = "Provider";
    string myUserType = "customer";
    //string myUserPrefix = "Customer";
    if (WebSecurity.CurrentUserId == booking.ProviderUserID) {
        itsUserType = "customer";
        itsUserLabel = "Customer";
        myUserType = "provider";
        itsUserID = booking.CustomerUserID;
    } // we don't check 'else' nelse 'else if (item.CustoerUserID..) because are just the default values
    var itsUserData = LcData.UserInfo.GetUserRow(itsUserID);

    <div class="booking-request main-side">
        <h3>@printTitleStatus(booking, itsUserData, itsUserType)</h3>
        <span class="updateddate">last updated: @booking.UpdatedDate.ToLongDateString() at @booking.UpdatedDate.ToLongTimeString()</span>
        @* If is customer and booking request is incomplete or without provider response (status:1,2,3),
            allow customer to cancel it *@
        @if (myUserType == "customer" && booking.BookingRequestStatusID <= 3)
        {
        <div class="actions">
            <button class="button item-action booking-request-action button-cancel-booking" type="button" data-booking-request-id="@booking.BookingRequestID" data-must-confirm="#@(prefix)-confirm-cancellation-policy">Cancel</button>
            <div class="popups">
                <div id="@(prefix)-confirm-cancellation-policy" class="popup confirm-popup">
                    If you continue cancelling this booking, next cancellation policy will be applied:

                    @* TODO CancellationPolicyID must be get from provider preferences when implemented *@
                    @RenderPage("$CancellationPolicyInfoWidget.cshtml", new { CancellationPolicyID = 1 })

                    <strong>Are you sure do you want cancel this booking?</strong>
                    <div class="actions">
                        <a href="#confirm-no" class="cancel-action">No</a>
                        <a href="#confirm-yes" class="main-action">Yes</a>
                    </div>
                </div>
            </div>
        </div>
        }
        <h4>@itsUserLabel profile</h4>
        @RenderPage(UrlUtil.LangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
            {"AddCssClasses", "message-section" },
            {"Data", itsUserData},
            {"DataPrefix", ""},
            {"Size", "medium"},
            {"UserType", itsUserType},
            {"PositionID", booking.PositionID}
        })

        @if (booking.BookingRequestStatusID == 2 && itsUserType == "customer") {
        <h4>Requested booking times</h4>
        <div class="requested-booking-times message-section">
            <p class="info">
            @LcHelpers.GetUserDisplayName(itsUserData) has booked you as a @booking.PositionSingular and chosen
            the following times for you to provide the service. Please confirm one of these times 
            <strong>within @confirmationLimitHours hours (by @confirmationLimitDate.ToShortTimeString(), @confirmationLimitDate.ToLongDateString())</strong>
            to accept this booking.
            </p>
            <h5>Preferred time:</h5>
            <button type="button" class="button booking-request-action button-confirm-datetime" data-booking-request-id="@booking.BookingRequestID" data-date-type="preferred">
                Click here to confirm @printDateTimeRange(booking.PreferredDateStart, booking.PreferredDateEnd)
            </button>
            @if (booking.AlternativeDate1Start is bool || booking.AlternativeDate2Start is bool)
            {
            <h5>Alternate times:</h5>
            }
            @if (booking.AlternativeDate1Start is bool)
            {
            <button type="button" class="button booking-request-action button-confirm-datetime" data-booking-request-id="@booking.BookingRequestID" data-date-type="alternative1">
                Click here to confirm @printDateTimeRange(booking.AlternativeDate1Start, booking.AlternativeDate1End)
            </button>
            }
            @if (booking.AlternativeDate2Start is bool)
            {
            <button type="button" class="button booking-request-action button-confirm-datetime" data-booking-request-id="@booking.BookingRequestID" data-date-type="alternative2">
                Click here to confirm @printDateTimeRange(booking.AlternativeDate2Start, booking.AlternativeDate2End)
            </button>
            }
            <h5>Decline booking request</h5>
            <button type="button" class="button booking-request-action button-decline-booking" data-booking-request-id="@booking.BookingRequestID">
                Decline booking (you can offer alternative times to the customer)
            </button>
        </div>
        }
        else if (booking.PreferredDateStart != null)
        {
        <h4>Requested booking times</h4>
        <div class="requested-booking-times message-section">
            <p class="info">
            @if (itsUserType == "customer")
            {
                <text>@LcHelpers.GetUserDisplayName(itsUserData) has booked you as a @booking.PositionSingular and chosen
                the following times for you to provide the service.</text>
            }
            else
            {
                <text>You have booked to @LcHelpers.GetUserDisplayName(itsUserData) as a @booking.PositionSingular and chosen
                the following times for it to provide the service.</text>
            }
            </p>
            <h5>Preferred time:</h5>
            <div class="selected-date preferred-date">
                @printDateTimeRange(booking.PreferredDateStart, booking.PreferredDateEnd)
            </div>
            @if (booking.AlternativeDate1Start is bool || booking.AlternativeDate2Start is bool)
            {
            <h5>Alternate times:</h5>
            }
            @if (booking.AlternativeDate1Start is bool)
            {
            <div class="selected-date alternative-date alternative-date-1">
                @printDateTimeRange(booking.AlternativeDate1Start, booking.AlternativeDate1End)
            </div>
            }
            @if (booking.AlternativeDate2Start is bool)
            {
            <div class="selected-date alternative-date alternative-date-2">
                @printDateTimeRange(booking.AlternativeDate2Start, booking.AlternativeDate2End)
            </div>
            }
        </div>
        }

        <h4>Requested services and pricing estimate</h4>
        @RenderPage("$RequestedBookingServicesWidget.cshtml", booking, myUserType)

        <h4>Reminders</h4>
        @RenderPage("$BookingRemindersWidget.cshtml", myUserType)
    </div>
}
@RenderPage(UrlUtil.LangPath + "HelpCenter/$FAQS.cshtml")