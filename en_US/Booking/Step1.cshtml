@{
    LcHelpers.SecurePage();
    
    var customer = PageData["customerrow"] ?? (PageData["customerrow"] = LcData.UserInfo.GetUserRow());
    var provider = PageData["providerrow"] ?? (PageData["providerrow"] = LcData.UserInfo.GetUserRow(Request["providerid"].AsInt()));
    var position = PageData["positionrow"] ?? (PageData["positionrow"] = LcData.UserInfo.GetUserPos(
        Request["providerid"].AsInt(),
        Request["positionid"].AsInt()));
    
    var data = getData(customer, provider, position);
    
    var summary = new LcPricingModel.PricingModelData();
    
    Dictionary<string, LcPricingModel.PricingModelData> modelsData = null;

    if (IsPost) {
        modelsData = processData(customer, provider, position, data, summary);
    }
    
    var viewData = new {
        Success = false
    };
    
    var hasPricingSummary = data.ContainsServices || data.ContainsVariables || data.ContainsOptions;
}
@functions{
    dynamic getData(dynamic c, dynamic p, dynamic pos) {
        
        // General Data
        // TODO: Get Customer Type Id
        var clienttypeid = 1;
        
        // Get our Pricing Type ID:
        int pricingtypeid = LcData.GetPositionPricingTypeID(pos.PositionID, clienttypeid);
        
        // Get provider hour price
        var hourPrice = LcData.GetProviderHourlyRate(p.UserID, pos.PositionID, clienttypeid);
        
        // Booking type with fees policy
        var fee = LcData.Booking.GetFeeFor(c.UserID, p.UserID, pricingtypeid);

        // Services: categories and attributes
        var dataCats = LcData.GetServiceCatsAndItsAttributes(pos.PositionID, "booking-services", pos.UserID);
        var thereAreAttributes = false;
        foreach (var cat in dataCats) {
            if (thereAreAttributes) {
                break;
            }
            foreach (var att in cat.Value["ServiceAttributes"]) {
                thereAreAttributes = true;
                break;
            }
        }
        
        // Variables
        // Get the Pricing Variables and with the selected Provider Value; if provider didn't select
        // previously values for a variable, that variable will not be returned.
        var pvars = LcData.GetPricingVariables(c.UserID, p.UserID, pos.PositionID, clienttypeid, pricingtypeid);
        
        // Options
        var poptions = LcData.GetPricingOptions(c.UserID, p.UserID, pos.PositionID, clienttypeid, pricingtypeid);
        
        // Packages
        
        // Add-ons
        
        // Return struct with all data and availability information (Contains* properties)
        return new {
            ContainsServices = thereAreAttributes,
            Services = dataCats,
            ContainsVariables = pvars.Count > 0,
            Variables = pvars,
            ContainsOptions = poptions.Count > 0,
            Options = poptions,
            Fee = fee,
            HourPrice = hourPrice,
            PricingTypeID = pricingtypeid,
            ClientTypeID = clienttypeid
        };
    }
    
    Dictionary<string, LcPricingModel.PricingModelData> processData(dynamic c, dynamic p, dynamic pos, dynamic data, LcPricingModel.PricingModelData summary) {

        var rtn = new Dictionary<string, LcPricingModel.PricingModelData>();
        
        var mustSave = UrlData[0].ToLower() != "calculate";

        // Calculate & Save
        LcPricingModel.PricingModelData mdVariables = null, mdOptions = null, mdPackages = null;

        try {
                
            /* Calculate summary
             */
            if (data.ContainsVariables) {
                mdVariables = LcPricingModel.CalculateVariables(data.Variables, data.HourPrice, data.Fee);
                rtn.Add("variables", mdVariables);
                addCalculationsToSummary(mdVariables, summary);
            }
            if (data.ContainsOptions) {
                mdOptions = LcPricingModel.CalculateOptions(data.Options, data.Fee);
                rtn.Add("options", mdOptions);
                addCalculationsToSummary(mdOptions, summary);
            }

            /* Save all data?
                */
            if (mustSave) {
                // Create Pricing Estimate with calculated summary
                // We ever create a new estimate with revision 1 here
                int estimateID = 0, revisionID = 1;
                var estimate = LcData.Booking.CreatePricingEstimate(
                    estimateID,
                    revisionID,
                    data.PricingTypeID,
                    summary.ServiceDuration,
                    data.HourPrice,
                    summary.SubtotalPrice,
                    summary.FeePrice,
                    summary.TotalPrice);
                // IDs created:
                estimateID = estimate.PricingEstimateID;
                revisionID = estimate.PricingEstimateRevision;
            
                /* Save every detail 
                    */
                if (data.ContainsServices) {
                    LcPricingModel.SaveServices(estimateID, revisionID);
                }
                if (data.ContainsVariables) {
                    LcPricingModel.SaveVariables(estimateID, revisionID, data.Variables, c.UserID, data.HourPrice, mdVariables.Data["PricingVariablesNumbers"]);
                }
                if (data.ContainsOptions) {
                    LcPricingModel.SaveOptions(estimateID, revisionID, data.Options, c.UserID, mdOptions.Data["PricingOptionsNumbers"]);
                }
                
                /*
                * Create Booking Request
                */
                var bookingRequestID = LcData.Booking.CreateRequest(
                    c.UserID,
                    p.UserID,
                    pos.PositionID,
                    estimateID,
                    Request["booking-services-special-instructions"]
                );
            }
        } catch (Exception ex) {
            LcHelpers.ReturnJsonError(-1, ex.Message);
        }
        
        // Return data out of try-catch block to don't break the Thread
        if (mustSave) {
            // All fine, continue wizard next step:
            LcHelpers.ReturnJsonResult(0, null);
        }
        
        return rtn;
    }
    
    void addCalculationsToSummary(LcPricingModel.PricingModelData calc, LcPricingModel.PricingModelData summary) {
        summary.ServiceDuration += calc.ServiceDuration;
        summary.SubtotalPrice += calc.SubtotalPrice;
        summary.FeePrice += calc.FeePrice;
        summary.TotalPrice += calc.TotalPrice;
    }
    
    LcPricingModel.PricingModelData GetModelDataForView(string viewName, Dictionary<string, LcPricingModel.PricingModelData> modelsData) {
        if (modelsData != null && modelsData.ContainsKey(viewName)) {
            return modelsData[viewName];
        } else {
            return null;
        }
    }
}

<form id="booking-services" action="@(UrlUtil.LangPath)Booking/Step1/" method="post" class="services package-pricing calculate-summary">
    <input type="hidden" name="providerid" value="@provider.UserID"/>
    <input type="hidden" name="positionid" value="@position.PositionID"/>
    <fieldset class="pricing-wizard ajax ajax-box step-blocks" data-ajax-fieldset-action="@(UrlUtil.LangPath)Booking/Step1/Calculate/?providerid=@(provider.UserID)&amp;positionid=@(position.PositionID)">
        @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)

        @if (data.ContainsServices)
        {
            <fieldset>
                <legend>Select Services</legend>
                @LcPricingView.Services(viewData, data.Services)
            </fieldset>
        }

        @if (data.ContainsVariables)
        {
            <fieldset>
                <legend>Variables</legend>
                @LcPricingView.Variables(viewData, data.Variables)
            </fieldset>
        }
        
        @if (data.ContainsOptions)
        {
            <fieldset>
                <legend>Please add any additional options you’d like</legend>
                @LcPricingView.Options(viewData, data.Options, GetModelDataForView("options", modelsData))
            </fieldset>
        }

        @if (!hasPricingSummary)
        {
            <div class="no-pricing-wizard">
                Currently we're unable to provide a pricing estimate for this provider. Please proceed to book a free estimate with the provider to determine a fair price together.
            </div>
        }
        else
        {
            <fieldset>
                <legend>Pricing summary</legend>
                @LcPricingView.PricingSummary(viewData, summary, data.HourPrice)
            </fieldset>
        }

        <fieldset class="special-instructions">
            <legend>Any details that might help @provider.FirstName perform the service better?</legend>
            <textarea rows="7" name="booking-services-special-instructions">@Request["booking-services-special-instructions"]</textarea>
        </fieldset>
    </fieldset>
    <fieldset class="actions">
        <button data-wizard-next-step="#schedule" class="schedule-service-button next main-action">Save & continue</button>
    </fieldset>
    @if (IsPost)
    {
        <script type="text/javascript">
            lcSetupCalculateTableItemsTotals();
            LC.setupCalculateSummary(true);
        </script>
    }
</form>
