@using WebMatrix.Data;
@{
    var p = PageData["providerrow"] ?? LcData.UserInfo.GetUserRow(Request["providerid"].AsInt());
    var c = PageData["customerrow"] ?? LcData.UserInfo.GetUserRow();
    var pos = PageData["positionrow"] ?? LcData.UserInfo.GetUserPos(Request["providerid"].AsInt(),
        Request["positionid"].AsInt());
    
    if (p == null || c == null || pos == null){
        var inputdataerrormessage = "No enought input data to show results";
        if (IsPost){
            LcHelpers.ReturnJsonError(-1, inputdataerrormessage);
        }else{
            throw new Exception(inputdataerrormessage);
        }
    }
    var dataCats = LcData.GetServiceCatsAndItsAttributes(pos.PositionID, "booking-services", pos.UserID);
    
    var thereAreAttributes = false;
    foreach (var cat in dataCats) {
        if (thereAreAttributes) {
            break;
        }
        foreach (var att in cat.Value["ServiceAttributes"]) {
            thereAreAttributes = true;
            break;
        }
    }
   
    /*
     * DATA PROCESSING IS DID AT THE END OF FILE, TO ALLOW WORK PRICING WIZARD PAGES
     */
    // Data object to be populated by PricingWizard partial page, initialized here to have a reference
    // that we can use later (without this, PricingEstimateData will return empty ever):
    PageData["PricingEstimateData"] = new Dictionary<string, object> { 
        { "PricingEstimateID", 0 }, 
        { "PricingEstimateRevision", 0 },
        { "PricingEstimateErrorMessage", "" } };
        
    var attributes = Request.Form.GetValues("positionservices-attributes");       
}

<form action="@(UrlUtil.LangPath)Booking/$Services/" method="post" class="services" id="booking-services">
    <input type="hidden" name="providerid" value="@p.UserID"/>
    <input type="hidden" name="positionid" value="@pos.PositionID"/>
    <fieldset class="step-blocks">
        @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)

        @if (thereAreAttributes) {
            <fieldset class="select-services">
                <legend>Select the services you'd like performed (some may require an additional fee):</legend>
                @foreach (var cat in dataCats)
                {
                    <ul>
                        @foreach(var att in cat.Value["ServiceAttributes"]){
                            if(att.UserChecked) {
                                <li>
                                    <label title="@att["ServiceAttribute"]" data-description="@att["ServiceAttributeDescription"]"><input type="checkbox" @LcHelpers.IsChecked(true, (attributes == null ? false : attributes.Contains(((int)att["ServiceAttributeID"]).ToString()))) value="@att["ServiceAttributeID"]" name="positionservices-attributes"/>@att["ServiceAttribute"]</label>
                                </li>
                            }
                        }
                    </ul>
                }
            </fieldset>
        }

        @RenderPage(UrlUtil.LangPath + "PricingWizard/$BookingFieldset.cshtml")

        <fieldset class="special-instructions">
            <legend>Please include any special instructions to help your provider do a great job:</legend>
            <textarea rows="7" name="booking-services-special-instructions"></textarea>
        </fieldset>
    </fieldset>
    <fieldset class="actions">
        <button data-wizard-next-step="#schedule" class="schedule-service-button next main-action">Schedule service</button>
    </fieldset>
</form>
@{
    if (IsPost && Validation.IsValid()){

        // Only if we have a PricingEstimateID all is fine
        // and we can create the Booking Request.
        // ID is returned by the Pricing Wizard, that already save his data.
        // If PricingEstimateID is less than 0, is an error Code
        var pricingEstimateID = (int)PageData["PricingEstimateData"]["PricingEstimateID"];
        int errorCode = (pricingEstimateID == 0 ? -1 : pricingEstimateID);
        if (errorCode < 0) {
            LcHelpers.ReturnJsonError(errorCode, PageData["PricingEstimateData"]["PricingEstimateErrorMessage"]);
        } else {
            using (var db = Database.Open("sqlloco")) {
                try {
                    /*
                    * Create Booking Request
                    */
                    var bookingRequestID = db.QueryValue(LcData.sqlInsBookingRequest,
                        c.UserID, p.UserID, pos.PositionID,
                        pricingEstimateID,
                        Request["booking-services-special-instructions"]
                    );
                
                    /*
                    * Save selected services in the Pricing Wizard tables (pricingEstimateDetail)
                    */
                    if (attributes != null) {
                        foreach (var att in attributes) {
                            // Set record (insert or update)
                            db.Execute(LcData.sqlInsEstimateDetails, pricingEstimateID, 
                                1, // Revision: Must be 1 ever at Booking Request
                                0, 0, 0,
                                att.AsInt(),
                                0, null, null, // There is no input data
                                0, 0, 0, 0); // Calculation fields are ever 0 for selected Regular Services
                        }
                    }
                    
                    /*
                     * Do BookingRequestID available for next wizard steps
                     */
                    // Saving it at user Session
                    Session["BookingRequestID"] = (int)bookingRequestID;
                                        
                } catch (Exception ex) {
                    LcHelpers.ReturnJsonError(-1, ex.Message);
                }
            }
                
            // All fine, continue wizard next step:
            LcHelpers.ReturnJsonResult(0, null);
        }
    }
}