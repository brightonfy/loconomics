@using WebMatrix.Data;
@{
    CommonHelpers.SecurePage();
    
    var u = DashboardFunctions.GetUserRow();
    var brID = Request["BookingRequestID"].AsInt();
    
    var sqlCheckBookingRequest = @"
        SELECT  TOP 1 R.BookingRequestID
        FROM    BookingRequest As R
        WHERE   R.ProviderUserID = @0
                 AND
                R.BookingRequestID = @1
                -- Not Denied Booking Request
                 AND
                R.BookingRequestStatusID <> 7
    ";
    
    using (var db = Database.Open("sqlloco")) {
        var checkID = db.QueryValue(sqlCheckBookingRequest, u.UserID, brID);
        if (checkID != null && (int)checkID == brID) {

            var result = BookingHelper.InvalidateBookingRequest(brID, 5); // 5:denied/declined

            if (result.Error == 0) {
                if (Request.IsAjaxRequest()){
                    // An ajax redirect is performed to return the updated BookingRequestDetails html to the user
                    CommonHelpers.ReturnJsonResult(3, UrlUtil.LangPath + String.Format(
                        "Booking/$BookingRequestDetails/?BookingRequestID={0}", brID ), false);
                } else {
                    Response.Redirect(UrlUtil.LangPath + String.Format(
                        "Dashboard/Bookings/$!BookingRequest-{0}", brID), false);
                }
                // Send message
                LcMessaging.SendBookingRequestDenegation(brID, true);
                Response.End();
            } else {
                if (Request.IsAjaxRequest()){
                    // Return JSON result:
                    // We need negative numbers to indicate an error (is our convention for json 'Code')
                    CommonHelpers.ReturnJsonError(0 - result.Error, result.ErrorMessage);
                } else {
                    throw new HttpException(500, "Error declining the booking request: " + result.ErrorMessage);
                }
            }
        } else {
            if (Request.IsAjaxRequest()){
                /* What? 
                 * - BookingRequestID and UserID (as ProviderUserID) don't match?
                 * - BookingRequest is already confirmed?
                 */
                CommonHelpers.ReturnJsonError(-1, "Impossible to decline that Booking Request. Is already confirmed?");
            } else {
                throw new HttpException(500, "Impossible to decline that Booking Request. Is already confirmed?");
            }
        }
    }
}