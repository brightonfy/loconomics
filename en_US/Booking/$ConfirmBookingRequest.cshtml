@using WebMatrix.Data;
@{
    LcHelpers.SecurePage();
    
    var u = LcData.UserInfo.GetUserRow();
    var brID = Request["BookingRequestID"].AsInt();
    var dateType = Request["ConfirmedDateType"];
    
    var sqlGetBookingDates = @"
        SELECT  TOP 1
                R.PreferredDateID,
                R.AlternativeDate1ID,
                R.AlternativeDate2ID
        FROM    BookingRequest As R
        WHERE   R.ProviderUserID = @0
                 AND
                R.BookingRequestID = @1
                -- Not Confirmed Booking Request, to avoid repeated confirmations happen
                 AND
                R.BookingRequestStatusID <> 7
    ";
    var sqlConfirmBooking = @"
        -- Parameters
        DECLARE @BookingRequestID int, @ConfirmedDateID int
        SET @BookingRequestID = @0
        SET @ConfirmedDateID = @1

        DECLARE @BookingID int
        SET @BookingID = -1

        BEGIN TRY
            BEGIN TRAN

            /*
             * Creating the Confirmed Booking Record
             */
            INSERT INTO Booking (
                BookingRequestID, ConfirmedDateID,
                BookingStatusID,
                TotalPricePaidByCustomer, TotalServiceFeesPaidByCustomer, 
                TotalPaidToProvider, TotalServiceFeesPaidByProvider, 
                PricingAdjustmentApplied,
                CreatedDate, UpdatedDate, ModifiedBy
            ) VALUES (
                @BookingRequestID, @ConfirmedDateID,
                1, --confirmed
                -- Initial price data to null
                -- (booking request prices are estimated, here only paid prices go)
                null, null, null, null,
                0, -- not applied price adjustement (now, almost)
                getdate(), getdate(), 'sys'
            )
            SET @BookingID = @@Identity

            -- Removing non needed CalendarEvents:
            DELETE FROM CalendarEvents
            WHERE ID IN (
                SELECT TOP 1 PreferredDateID FROM BookingRequest
                WHERE BookingRequestID = @BookingRequestID AND PreferredDateID <> @ConfirmedDateID
                UNION
                SELECT TOP 1 AlternativeDate1ID FROM BookingRequest
                WHERE BookingRequestID = @BookingRequestID AND AlternativeDate1ID <> @ConfirmedDateID
                UNION
                SELECT TOP 1 AlternativeDate2ID FROM BookingRequest
                WHERE BookingRequestID = @BookingRequestID AND AlternativeDate2ID <> @ConfirmedDateID
            )

            /*
             * Update Availability of the CalendarEvent record for the ConfirmedDateID,
             * from 'tentative' to 'busy'
             */
            UPDATE  CalendarEvents
            SET     CalendarAvailabilityTypeID = 2
            WHERE   Id = @ConfirmedDateID

            /*
             * Updating Booking Request status, and removing references to the 
             * user selected dates (there is already a confirmed date in booking).
             */
            UPDATE  BookingRequest
            SET     BookingRequestStatusID = 7, -- accepted
                    PreferredDateID = null,
                    AlternativeDate1ID = null,
                    AlternativeDate2ID = null
            WHERE   BookingRequestID = @BookingRequestID

            COMMIT TRAN

            -- We return sucessful operation with Error=0
            -- and attach the BookingID created instead of an ErrorMessage
            SELECT 0 As Error, @BookingID As BookingID
        END TRY
        BEGIN CATCH
            IF @@TRANCOUNT > 0
                ROLLBACK TRAN
            -- We return error number and message
            SELECT ERROR_NUMBER() As Error, ERROR_MESSAGE() As ErrorMessage
        END CATCH
    ";
    
    using (var db = Database.Open("sqlloco")) {
        var dateID = 0;
        var dates = db.QuerySingle(sqlGetBookingDates, u.UserID, brID);
        if (dates != null) {
            switch (dateType.ToUpper()) {
                case "PREFERRED":
                    dateID = dates.PreferredDateID;
                    break;
                case "ALTERNATIVE1":
                    dateID = dates.AlternativeDate1ID;
                    break;
                case "ALTERNATIVE2":
                    dateID = dates.AlternativeDate2ID;
                    break;
            }
        }
        if (dateID > 0) {
            var result = db.QuerySingle(sqlConfirmBooking, brID, dateID);
            
            if (result.Error == 0) {
                if (Request.IsAjaxRequest()) {
                    // A redirect is performed to return the BookingDetails html to the user
                    /*Response.Redirect(UrlUtil.LangPath + String.Format(
                        "Booking/$BookingDetails/?BookingRequestID={0}&BookingID={1}", brID, result.BookingID ), true);*/
                    LcHelpers.ReturnJsonResult(3, UrlUtil.LangPath + String.Format(
                        "Booking/$BookingDetails/?BookingRequestID={0}&BookingID={1}", brID, result.BookingID ), false);
                } else {
                    Response.Redirect(UrlUtil.LangPath + String.Format(
                        "Dashboard/Bookings/$!BookingRequest-{0}_Booking-{1}", brID, result.BookingID ), false);
                }
                // Send message
                LcMessaging.SendBookingRequestConfirmation(brID, result.BookingID, true);
                Response.End();
            } else {
                if (Request.IsAjaxRequest()) {
                    // Return JSON result:
                    // We need negative numbers to indicate an error (is our convention for json 'Code')
                    LcHelpers.ReturnJsonError(0 - result.Error, result.ErrorMessage);
                } else {
                    throw new HttpException(500, "Error confirming the booking request: " + result.ErrorMessage);
                }
            }
        } else {
            if (Request.IsAjaxRequest()){
                /* What? 
                 * - BookingRequestID and UserID (as ProviderUserID) don't match?
                 * - ConfirmedDateType is not correct?
                 * - BookingRequest is already confirmed?
                 */
                LcHelpers.ReturnJsonError(-1, "Impossible to confirm that Booking Request and date. Is already confirmed?");
            } else {
                throw new HttpException(500, "Impossible to confirm that Booking Request and date. Is already confirmed?");
            }
        }
    }
}