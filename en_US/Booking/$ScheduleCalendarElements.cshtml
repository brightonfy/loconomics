@{
    string element = PageData["Element"];
    DateTime? date = PageData["Date"];
    decimal? durationHours = PageData["DurationHours"];
    if ((String.IsNullOrEmpty(element) || !date.HasValue) && UrlData.Count > 1) {
        element = UrlData[0];
        date = LcHelpers.CreateDateTime(UrlData[1]);
    }
    if (!date.HasValue) {
        date = DateTime.Today;
    }
    if (!durationHours.HasValue && UrlData.Count > 2) {
        durationHours = LcHelpers.CreateDecimal(UrlData[2]);
    }
}

@switch (element) {
    case "WeekDaySelector":
        <div id="weekDaySelector" data-date="@(date.Value.ToString("R"))" data-source-url="@(UrlUtil.LangPath)/Booking/$ScheduleCalendarElements/@(element)/@(date.Value.ToString("s"))/">
            <a href="#previous-week" class="week-slider" id="previousWeek">&lt;</a>
            <ul>
                @{
                    var dateWeek = date.Value.AddDays(7);
                    for(var idate = date; idate < dateWeek; idate = idate.Value.AddDays(1)) {
                        <li><button class="action day-selection-action" type="button" data-date="@idate.Value.ToString("R")">
                            <div>@idate.Value.ToString("ddd")</div>
                            <div>@idate.Value.ToShortDateString()</div>
                        </button></li>
                    }
                }
            </ul>
            <a href="#next-week" class="week-slider" id="nextWeek">&gt;</a>
        </div>
        break;
    case "DayHoursSelector":
        <table id="dayHoursSelector" data-date="@(date.Value.ToString("R"))" data-duration-hours="@(durationHours)" class="step-block" data-source-url="@(UrlUtil.LangPath)/Booking/$ScheduleCalendarElements/@(element)/@(date.Value.ToString("s"))/@(durationHours)">
            <caption><h2>@(date.Value.ToString("dddd, MMM d"))</h2></caption>
            <tr>
                <th>Start</th>
                <th>End</th>
                <th></th>
            </tr>
            @{
                var blocks = new List<dynamic>();
                for(var i = 0; i < 10; i++) {
                    blocks.Add(new {
                        Start = TimeSpan.FromMinutes(i * 30),
                        End = TimeSpan.FromMinutes((double)i * 30 + ((double)(durationHours ?? 4) * 60.0))
                    });
                }
                foreach(var h in blocks) {
                <tr>
                    <td class="start">@h.Start.ToString("hh':'mm")</td>
                    <td class="end">@h.End.ToString("hh':'mm")</td>
                    <td class="selector"><select class="choice-selector">
                        <option value="">select</option>
                        <option value="first">first choice</option>
                        <option value="second">second choice</option>
                        <option value="third">third choice</option>
                    </select></td>
                </tr>
                }
            }
        </table>
        break;
}
