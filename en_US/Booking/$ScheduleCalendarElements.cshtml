@using WebMatrix.Data;

@{   
    string element = PageData["Element"];
    DateTime? date = PageData["Date"];
    decimal? durationHours = PageData["DurationHours"];
    int userID = PageData["UserID"] ?? 0;
    if ((String.IsNullOrEmpty(element) || !date.HasValue) && UrlData.Count > 1) {
        element = UrlData[0];
        date = LcHelpers.CreateDateTime(UrlData[1]);
    }
    if (!date.HasValue) {
        date = DateTime.Today;
    }
    if (!durationHours.HasValue && UrlData.Count > 2) {
        durationHours = LcHelpers.CreateDecimal(UrlData[2]);
    }
    if (userID == 0 && UrlData.Count > 3) {
        userID = UrlData[3].AsInt();
    }
}

@switch (element) {
    case "WeekDaySelector":
        <div id="weekDaySelector" data-date="@(date.Value.ToString("R"))" data-reload-mode="replace-me" data-source-url="@(UrlUtil.LangPath)/Booking/$ScheduleCalendarElements/@(element)/@(date.Value.ToString("s"))/">
            <a href="#previous-week" class="week-slider" id="previousWeek">&lt;</a>
            <ul>
                @{
                    var dateWeek = date.Value.AddDays(7);
                    for(var idate = date; idate < dateWeek; idate = idate.Value.AddDays(1)) {
                        <li><a href="#select-day" class="action day-selection-action" type="button" data-date="@idate.Value.ToString("R")">
                            <div>@idate.Value.ToString("ddd")</div>
                            <div>@idate.Value.ToShortDateString()</div>
                        </a></li>
                    }
                }
            </ul>
            <a href="#next-week" class="week-slider" id="nextWeek">&gt;</a>
        </div>
        break;
    case "DayHoursSelector":
        dynamic availData = null;
        using (var db = Database.Open("sqlloco"))
        {
            availData = db.Query("EXEC dbo.GetProviderAvailabilityFullSet @0, @1, @2", userID, date, date);
        }
    
        <table id="dayHoursSelector" data-user-id="@(userID)" data-date="@(date.Value.ToString("R"))" data-duration-hours="@(durationHours)" class="step-block" data-reload-mode="replace-me" data-source-url="@(UrlUtil.LangPath)/Booking/$ScheduleCalendarElements/@(element)/@(date.Value.ToString("s"))/@(durationHours)/@(userID)/">
            <caption><h2>@(date.Value.ToString("dddd, MMM d"))</h2></caption>
            <tr>
                <th>Start</th>
                <th>End</th>
                <th></th>
            </tr>
            @{
                var availHours = new List<dynamic>();
                // Creating time blocks and checking its availability in blocks with same duration
                // as service duration (durationHours), instead of standard 30 minutes
                {
                    var ah = TimeSpan.MinValue;
                    var c = 1;
                    var f = Math.Round((decimal)durationHours / .5M);
                    foreach (var h in availData)
                    {
                        // Only 'free' and 'tentative' states:
                        if (h.CalendarAvailabilityTypeID != 1 &&
                            h.CalendarAvailabilityTypeID != 3)
                        {
                            c = 1;
                            ah = TimeSpan.MinValue;
                            continue;
                        }
                        // They must be consecutives:
                        if (ah.Add(TimeSpan.FromHours(.5 * c)) != h.TimeBlock)
                        {
                            c = 1;
                            ah = h.TimeBlock;
                            continue;
                        }
                        var test = ah.Add(TimeSpan.FromHours((double)durationHours));
                        if (h.TimeBlock < test)
                        {
                            c++;
                        }
                        else if (test == h.TimeBlock)
                        {
                            availHours.Add(new
                            {
    
                                Start = ah,
                                End = test
                            });
                            ah = ah.Add(TimeSpan.FromMinutes(30));
                        }
                        else
                        {
                            c = 1;
                            ah = h.TimeBlock;
                            continue;
                        }
                    }
                }

                var thereAreHours = false;
                foreach (var h in availHours)
                {
                    thereAreHours = true;
                    var start = h.Start;
                    var end = h.End;
                    <tr>
                        <td class="start">@start.ToString("hh':'mm")</td>
                        <td class="end">@end.ToString("hh':'mm")</td>
                        <td class="selector"><select class="choice-selector">
                            <option value="">select</option>
                            <option value="first">first choice</option>
                            <option value="second">second choice</option>
                            <option value="third">third choice</option>
                        </select></td>
                    </tr>
                }
                if (!thereAreHours)
                {
                    <tr>
                        <td colspan="3">There are no available hours for this day</td>
                    </tr>
                }
            }
        </table>
        break;
}
