@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    // Initialize general page variables
    var userid = 99999;
    var email = "";
    var password = "";
    var confirmPassword = "";
    var firstname  ="";
    var lastname  = "";
    var zipcode   = 0;
    var state = 0;
    var lang   = "1";
    var termsofuse = "0";
    var termsofuse1 = "0";
    var termsofuse2 = "0";
    var termsofuse3 = "0";
    var termsofuse4 = "0";
    var termsofuse5 = "0";
    var ppolicy = "0";
    var emailcontact = "0";
   
	// Validate the user's email address
    Validation.RequireField("email", "You must specify an email address.");
    // Validate the user's password and password confirmation
    Validation.Add("email",
        Validator.Regex(@"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*","The email is not valid."));

	Validation.RequireField("password", "The password cannot be blank.");
    Validation.Add("confirmPassword", 
        Validator.EqualsTo("password", "The new password and confirmation password do not match."));
    
    // var captchaMessage = "";
    
    email = Request.Form["email"];
    password = Request.Form["password"];
    confirmPassword = Request.Form["confirmPassword"];
    firstname = Request.Form["firstname"];
    lastname =   Request.Form["lastname"];
    state = Request["state"].AsInt();
    lang =  Request.Form["lang"];
    termsofuse = Request.Form["termsofuse"];
    termsofuse1 = Request.Form["termsofuse1"];
    termsofuse2 = Request.Form["termsofuse2"];
    termsofuse3 = Request.Form["termsofuse3"];
    termsofuse4 = Request.Form["termsofuse4"];
    termsofuse5 = Request.Form["termsofuse5"];
    ppolicy = Request.Form["ppolicy"];
    emailcontact = Request.Form["emailcontact"];

    // If this is a POST request, validate and process data
    if (IsPost && Validation.IsValid()) {
        
        // Validate the user's captcha answer
        // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
        //     ModelState.AddError("recaptcha", "Captcha response was not correct");
        // }
        int auxZip = LcValidators.ValidateZipCode(Request["zipcode"], state);
        if (auxZip == 0) {
            ModelState.AddError("zipcode", "Zip code is not valid");
        } else {
            zipcode = auxZip;
        }
        if (!termsofuse.AsBool()){
            ModelState.AddError("termsofuse", "You must agree all terms of use");
        }
        if (!termsofuse1.AsBool()){
            ModelState.AddError("termsofuse1", "You must agree all terms of use");
        }
        if (!termsofuse2.AsBool()){
            ModelState.AddError("termsofuse2", "You must agree all terms of use");
        }
        if (!termsofuse3.AsBool()){
            ModelState.AddError("termsofuse", "You must agree all terms of use");
        }
        if (!termsofuse4.AsBool()){
            ModelState.AddError("termsofuse4", "You must agree all terms of use");
        }
        if (!termsofuse5.AsBool()){
            ModelState.AddError("termsofuse5", "You must agree all terms of use");
        }
        if (!ppolicy.AsBool()){
            ModelState.AddError("ppolicy", "Do you understand the Privacy Policy?");
        }

        // If all information is valid, create a new account
        if (ModelState.IsValid) { 
            // Insert a new user into the database
            var db = Database.Open("sqlloco");

            // Check if user already exists
            //var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            var user = db.QuerySingle("EXEC dbo.CheckUserEmail @0", email);

            if (user == null) {
                // Insert email into the profile table
                db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);
                // Create and associate a new entry in the membership database.
                // If successful, continue processing the request
                try {
                    bool requireEmailConfirmation = false ;//!WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    if (requireEmailConfirmation) {
                        var confirmationUrl = UrlUtil.LangUrl + "Account/Confirm/?confirmationCode=" + HttpUtility.UrlEncode(token);

                        LcMessaging.SendMail(
                            to: email,
                            subject: "Please confirm your account", 
                            body: "Your confirmation code is: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> to activate your account."
                        );
                    }

                    if (requireEmailConfirmation) {
                        // Thank the user for registering and let them know an email is on its way
                        CommonHelpers.ReturnJsonResult(1, UrlUtil.LangPath + "Account/Thanks/");
                    } else {
                        // Navigate back to the homepage and exit
                        WebSecurity.Login(email, password);
                                                
                        userid = WebSecurity.GetUserId(email);
                        
                        // insert additional user details

                        // mark the user as logged in via a normal account,
                        // as opposed to via an OAuth or OpenID provider.
                        Session["OAuthLoggedIn"] = false;
                    
                        db.Execute("exec dbo.CreateProvider @0,@1,@2,@3,@4,@5,@6,@7,@8,@9,@10,@11,@12,@13",userid,firstname,lastname,
                            (object)(zipcode == 0 ? null : (object)zipcode),
                            (object)(state == 0 ? null : (object)state),
                            lang,
                            termsofuse.AsBool() ? 1 : 0,
                            termsofuse1.AsBool() ? 1 : 0,
                            termsofuse2.AsBool() ? 1 : 0,
                            termsofuse3.AsBool() ? 1 : 0,
                            termsofuse4.AsBool() ? 1 : 0,
                            termsofuse5.AsBool() ? 1 : 0,
                            ppolicy.AsBool() ? 1 : 0,
                            emailcontact.AsBool() ? 1 : 0);
                        
                        // We return a json with result OK (=0), and response end just after this:
                        CommonHelpers.ReturnJsonResult(0, null);
                    }
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
            } else {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            }
        }    
    }
}
<p class="info">
     Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec lorem turpis, volutpatid adipiscing placerat, convallis sit orci. Donec quis enim nunc Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec lorem turpis, volut
 </p>
@CommonHelpers.GetValidationScripts()
 <form method="post" id="provider-sign-up-create-a-login" action="@(UrlUtil.LangPath)Provider-sign-up/$Create-a-login/">
     @* If at least one validation error exists, notify the user *@
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="login-data">
         <legend>Contact Information:</legend>
         <ul class="choice-option">
             <li class="first-name">
                <label for="firstname" @if(!ModelState.IsValidField("firstname")){<text>class="error-label"</text>}>First Name:</label>
                <input type="text" id="firstname" name="firstname" title="First Name" value="@firstname" @Validation.GetHtml("firstname") />
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("firstname")

                @* need to have the error label class show up  *@   
             </li>
           
            <li class="last-name">
              <label for="lastname" @if(!ModelState.IsValidField("lastname")){<text>class="error-label"</text>}>Last Name:</label>
                <input type="text" id="lastname" name="lastname" title="Last Name" value="@lastname" @Validation.GetHtml("lastname") />
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("lastname")

                @* need to have the error label class show up  *@   
             </li>
            
            <li class="state"><label for="state" @if(!ModelState.IsValidField("state")){<text>class="error-label"</text>}>State:</label>
                <select id="state" name="state" @Validation.GetHtml("state")>
                    @CommonHelpers.StateProvinceOptions(state)
                </select>
                @Html.ValidationMessage("state")
            </li>

            <li class="zip-code">
                <label for="zipcode" @if(!ModelState.IsValidField("zipcode")){<text>class="error-label"</text>}>Zip Code:</label>
                <input type="text" id="zipcode" name="zipcode" title="Zip Code" value="@(Request["zipcode"])" @Validation.GetHtml("zipcode") />
                @Html.ValidationMessage("zipcode")
            </li>
           
            <li class="email">
                <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}>Email:</label>
                <input type="text" id="email" name="email" title="Email address" value="@email" @Validation.GetHtml("email") />
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("email")

                @* need to have the error label class show up  *@   
            </li>
            <li class="password">
                <label for="password" @if(!ModelState.IsValidField("password")) {<text>class="error-label"</text>}>Password:</label>
                <input type="password" id="password" name="password" title="Password" @Validation.GetHtml("password") />
                @* Write any password validation errors to the page *@
                @Html.ValidationMessage("password")
             </li>
            <li class="confirm-password">
                <label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>} >Confirm Password:</label>
                <input type="password" id="confirmPassword" name="confirmPassword" title="Confirm password" @Validation.GetHtml("confirmPassword") />
                @* Write any password validation errors to the page *@
                @Html.ValidationMessage("confirmPassword")
             <!-- Collapsed next elements code to avoid white spaces that create excesive width on IE -->
            <li class="lang"><label>Preferred language:<select name="lang" id="lang">
                        <option value="1">English (US)</option>
                        <option value="2">Spanish (ES)</option>
            </select></label></li>
        </ul>
        <p class="choice-or">or</p>
        <div class="facebook-connect social choice-option">
            @RenderPage(UrlUtil.LangPath + "Account/_FacebookConnectButton.cshtml")
        </div>
    </fieldset>
    <fieldset class="legal-agreement">
        <legend>We’re all in this together--please read these carefully!</legend>
        <ul>
            <li class="view-terms-of-use">
                <div class="stronger">Terms of use--this is how we will work together (view in separate window)
                 <div class="short-legal-terms">This User Agreement contains the terms on which Loconomics, Inc. (“Loconomics”) offers you access to the loconomics.com site (the “Marketplace”) and various services provided by Loconomics or third parties.
                 Click to see full Agreement.</div>
                 </div>
             </li>
             <li>
                <label><input type="checkbox" @Validation.GetHtml("termsofuse") @CommonHelpers.IsChecked(@Request["termsofuse"].AsBool().ToString(), "True") name="terms-of-use" id="termsofuse" value="True"/>I have read and understand the <a href="#">terms of use</a></label>
                @Html.ValidationMessage("termsofuse")
             </li>
             <li>
                 <strong>Specifically, I understand and agree to the following:</strong>
                 <ul>
                     <li>
                        <label><input type="checkbox" @Validation.GetHtml("termsofuse1") @CommonHelpers.IsChecked(@Request["termsofuse1"].AsBool().ToString(), "True") name="termsofuse1" id="termsofuse1" value="True"/>I personally will provide the services listed on my profile</label>
                        @Html.ValidationMessage("termsofuse1")
                     </li>
                     <li>
                        <label><input type="checkbox" @Validation.GetHtml("termsofuse2") @CommonHelpers.IsChecked(@Request["termsofuse2"].AsBool().ToString(), "True") name="termsofuse2" id="termsofuse2" value="True"/>I am not employed by an agency or employer for services booked using my profile</label>
                        @Html.ValidationMessage("termsofuse2")
                     </li>
                     <li>
                        <label><input type="checkbox" @Validation.GetHtml("termsofuse3") @CommonHelpers.IsChecked(@Request["termsofuse3"].AsBool().ToString(), "True") name="termsofuse3" id="termsofuse3" value="True"/>I am legally authorized to perform the services listed on my profile and possess any required licenses</label>
                        @Html.ValidationMessage("termsofuse3")
                     </li>
                     <li>
                        <label><input type="checkbox" @Validation.GetHtml("termsofuse4") @CommonHelpers.IsChecked(@Request["termsofuse4"].AsBool().ToString(), "True") name="termsofuse4" id="termsofuse4" value="True"/>I will not engage in any unlawful or inappropriate activity while performing services for Loconomics Customers</label>
                        @Html.ValidationMessage("termsofuse4")
                     </li>
                     <li>
                        <label><input type="checkbox" @Validation.GetHtml("termsofuse5") @CommonHelpers.IsChecked(@Request["termsofuse5"].AsBool().ToString(), "True") name="termsofuse5" id="termsofuse5" value="True"/>I will take the necessary safety precautions when meeting clients to ensure both their and my own safety</label>
                        @Html.ValidationMessage("termsofuse5")
                     </li>
                 </ul>
             </li>
             <li class="view-privacy-policy">
                 <div class="stronger">Privacy policy--we want you to feel comfortable with how we use your data (view in separate window)
                 <div class="short-legal-terms">Loconomics is committed to protecting the privacy of your personal information. We recognize that privacy is of utmost importance.  This Privacy Policy explains how we collect information from our users, and how we use this information. Please note that any term that is capitalized but not defined in this Privacy Policy is defined in the User Agreement.
                 Click to see full Privacy Policy.</div>
                 </div>
             </li>
             <li>
                <label><input type="checkbox" @Validation.GetHtml("ppolicy") @CommonHelpers.IsChecked(@Request["ppolicy"].AsBool().ToString(), "True") name="ppolicy" id="ppolicy" value="True"/>I have read and understand the <a href="#">privacy policy</a></label>
                @Html.ValidationMessage("ppolicy")
             </li>
             <li>
                <label><input type="checkbox" @Validation.GetHtml("emailcontact") @CommonHelpers.IsChecked(@Request["emailcontact"].AsBool().ToString(), "True") name="emailcontact" id="emailcontact" value="True"/>I don't mind being e-mailed with Loconomics news</label>
                @Html.ValidationMessage("emailcontact")
             </li>
         </ul>
     </fieldset>
     <fieldset class="actions">
        <button data-wizard-next-step="#your-work" class="next main-action">Continue</button>
     </fieldset>
</form>
