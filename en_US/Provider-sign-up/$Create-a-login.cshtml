@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    var u = DashboardFunctions.GetUserRow();
    if (u != null && u.IsProvider) {
        // It's already a provider!
        Response.Redirect(UrlUtil.LangPath);
    }
    
    // Initialize general page variables
    var userid = 99999;
    var email = "";
    var password = "";
    var confirmPassword = "";
    var firstname  ="";
    var lastname  = "";
    var formzipcode = "";
    var zipcode   = 0;
    var state = 0;
    var lang = LcData.GetCurrentLanguageID();
    var countryId = LcData.GetCurrentCountryID();
    var termsofuse = "0";
    var emailcontact = "0";

    if (u == null) {
	    // Validate the user's email address
        Validation.RequireField("email", "You must specify an email address.");
        // Validate the user's password and password confirmation
        Validation.Add("email",
            Validator.Regex(@"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*","The email is not valid."));
	    Validation.RequireField("password", "The password cannot be left blank.");
        Validation.Add("confirmPassword", 
            Validator.EqualsTo("password", "The new password and confirmation password do not match."));
    }
    Validation.RequireField("firstname", "You must specify your first name.");
    Validation.RequireField("lastname", "You must specify your last name.");
    
    // var captchaMessage = "";
    
    email = Request.Form["email"];
    password = Request.Form["password"];
    confirmPassword = Request.Form["confirmPassword"];
    firstname = Request.Form["firstname"];
    lastname =   Request.Form["lastname"];
    formzipcode = Request.Form["zipcode"];
    state = Request["state"].AsInt();
    termsofuse = Request.Form["termsofuse"];
    emailcontact = Request.Form["emailcontact"];

    // If this is a POST request, validate and process data
    if (IsPost && Validation.IsValid()) {
        
        // Validate the user's captcha answer
        // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
        //     ModelState.AddError("recaptcha", "Captcha response was not correct");
        // }
        state = LcData.GetStateFromZipCode(formzipcode);
        int auxZip = LcValidators.ValidateZipCode(formzipcode, state);
        if (auxZip == 0) {
            ModelState.AddError("zipcode", "Zip code is not valid");
        } else {
            zipcode = auxZip;
        }
        if (!termsofuse.AsBool()){
            ModelState.AddError("termsofuse", "You must agree to the Terms of Use and Privacy Policy");
        }

        // If all information is valid, create a new account
        if (ModelState.IsValid) { 
            string confirmationUrl = null;
            // Insert a new user into the database
            var db = Database.Open("sqlloco");

            if (u == null) {
                // Check if user already exists
                var useremail = db.QuerySingle("EXEC dbo.CheckUserEmail @0", email);

                if (useremail == null) {
                    // Insert email into the profile table
                    db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);
                    // Create and associate a new entry in the membership database.
                    // If successful, continue processing the request
                    try {
                        bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                        var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                        if (requireEmailConfirmation) {
                            confirmationUrl = UrlUtil.LangUrl + "Account/Confirm/?confirmationCode=" + HttpUtility.UrlEncode(token);

                            // Verification code is sent along with the Welcome email, commenting the other email sent:
                            /*LcMessaging.SendMail(
                                to: email,
                                subject: "Please confirm your account", 
                                body: "Your confirmation code is: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> to confirm your account."
                            );*/
                        }

                        if (requireEmailConfirmation) {
                            //CommonHelpers.ReturnJsonResult(1, UrlUtil.LangPath + "Account/Thanks/");
                            Session["RegisteredUserID"] = WebSecurity.GetUserId(email);
                            // IMPORTANT: 2012-07-17, issue #57; We decided use the email-confirmation-code only as a dashboard alert (id:15) instead of blocking the user
                            // login, what means user MUST can login but too MUST have an email-confirmation-code; we do that reusing the confirmation code
                            // created by asp.net starter-app as until now, but HACKING that system doing a minor change on database, in the 
                            // asp.net webpages generated table called 'webpages_Membership': there are two fields to manage confirmation, a bit field (this
                            // we will hack changing it to true:1 manually -before of time-) and the confirmationToken that we will mantain to allow user confirmation
                            // from the welcome-email sent and to off the alert:15 (with custom code on the Account/Confirm page).
                            db.Execute(@"
                                UPDATE webpages_Membership SET
                                    IsConfirmed = 1
                                WHERE UserId = @0
                            ", Session["RegisteredUserID"]);
                            // Now, we do the auto-login, is in non-require-confirmation step
                            WebSecurity.Login(email, password);
                            Session["OAuthLoggedIn"] = false;
                        } else {
                            // Auto login user with just created credentials:
                            WebSecurity.Login(email, password);
                            // mark the user as logged in via a normal account,
                            // as opposed to via an OAuth or OpenID provider.
                            Session["OAuthLoggedIn"] = false;
                        }
                    } catch (System.Web.Security.MembershipCreateUserException e) {
                        ModelState.AddFormError(e.Message);
                    }
                } else {
                    // User already exists
                    ModelState.AddFormError("Email address is already in use.");
                }
            }
            
            if (ModelState.IsValid) {
                // Insert provider details                        
                if (u != null) {
                    db.Execute("exec CreateProviderFromUser @0,@1,@2,@3,@4,@5,@6,@7,@8,@9,@10,@11,@12,@13,@14",
                        u.UserID,
                        firstname,
                        lastname,
                        (object)(zipcode == 0 ? null : (object)zipcode),
                        (object)(state == 0 ? null : (object)state),
                        lang,
                        countryId,
                        termsofuse.AsBool() ? 1 : 0,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        emailcontact.AsBool() ? 1 : 0);
                } else {
                    userid = WebSecurity.GetUserId(email);
                    db.Execute("exec dbo.CreateProvider @0,@1,@2,@3,@4,@5,@6,@7,@8,@9,@10,@11,@12,@13,@14",userid,firstname,lastname,
                        (object)(zipcode == 0 ? null : (object)zipcode),
                        (object)(state == 0 ? null : (object)state),
                        lang,
                        countryId,
                        termsofuse.AsBool() ? 1 : 0,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        emailcontact.AsBool() ? 1 : 0);
                }
                
                // All ok, send welcome email
                LcMessaging.SendWelcomeProvider(
                    (u != null ? u.UserID : userid), 
                    (u != null ? u.Email : email),
                    confirmationUrl ?? "");

                // We return a json with result OK (=0), and response end just after this:
                CommonHelpers.ReturnJsonResult(0, null);
            }
        }
    }
    if (u != null) {
        firstname = u.FirstName;
        lastname = u.LastName;
        email = u.Email;
        formzipcode = u.PostalCode;
        state = u.StateProvinceID ?? 0;
    }
}
@CommonHelpers.GetValidationScripts()
 <form method="post" id="provider-sign-up-create-a-login" action="@(UrlUtil.LangPath)Provider-sign-up/$Create-a-login/">
     @* If at least one validation error exists, notify the user *@
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="login-data">
         <legend><h4>Sign up for free:</h4></legend>
         <ul class="choice-option">
             <li class="first-name">
                <label for="firstname" @if(!ModelState.IsValidField("firstname")){<text>class="error-label"</text>}>First Name:</label>
                <input placeholder="First Name" type="text" id="firstname" name="firstname" title="First Name" value="@firstname" @Validation.GetHtml("firstname") />
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("firstname")

                @* need to have the error label class show up  *@   
             </li>
           
            <li class="last-name">
              <label for="lastname" @if(!ModelState.IsValidField("lastname")){<text>class="error-label"</text>}>Last Name:</label>
                <input placeholder="Last Name" type="text" id="lastname" name="lastname" title="Last Name" value="@lastname" @Validation.GetHtml("lastname") />
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("lastname")

                @* need to have the error label class show up  *@   
             </li>

            <li class="zip-code">
                <label for="zipcode" @if(!ModelState.IsValidField("zipcode")){<text>class="error-label"</text>}>Zip Code:</label>
                <input placeholder="Zip Code" type="text" id="zipcode" name="zipcode" title="Zip Code" value="@(formzipcode)" @Validation.GetHtml("zipcode") />
                @Html.ValidationMessage("zipcode")
            </li>
           
            <li class="email">
                <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}>Email:</label>
                <input placeholder="E-mail address" @(Html.Raw(u != null ? "disabled='disabled'" : "")) type="text" id="email" name="email" title="Email address" value="@email" @Validation.GetHtml("email") />
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("email")
            </li>
            <li class="password">
                <label for="password" @if(!ModelState.IsValidField("password")) {<text>class="error-label"</text>}>Password:</label>
                <input placeholder="Password" @(Html.Raw(u != null ? "disabled='disabled'" : "")) type="password" id="password" name="password" title="Password" @Validation.GetHtml("password") />
                @* Write any password validation errors to the page *@
                @Html.ValidationMessage("password")
             </li>
            <li class="confirm-password">
                <label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>} >Confirm Password:</label>
                <input placeholder="Re-enter password" @(Html.Raw(u != null ? "disabled='disabled'" : "")) type="password" id="confirmPassword" name="confirmPassword" title="Confirm password" @Validation.GetHtml("confirmPassword") />
                @* Write any password validation errors to the page *@
                @Html.ValidationMessage("confirmPassword")
        </ul>
        @if (u == null)
        {
        <p class="choice-or">or</p>
        <div class="facebook-connect social choice-option">
            @RenderPage(UrlUtil.LangPath + "Account/_FacebookConnectButton.cshtml", "Callback/Provider")
            @*<p class="footnote">*we don't post anything without your permission</p>*@
            <p class="info">By clicking "Connect with Facebook" you confirm that you accept the <a class="view-terms-of-use" href="@(UrlUtil.LangPath)About#termsofuse" target="_blank">Terms of Use</a></p>
        </div>
        }
    </fieldset>
    <fieldset class="legal-agreement">
        <legend><h4>Agree to the following:</h4></legend>
        <ol class="legal-agreement-terms">
            <li>I am at least 18 years old and will personally provide the services listed on my profile.</li>
            <li>I am not acting on behalf of an agency or employer for services booked using my profile</li>
            <li>I am legally authorized to perform the services listed on my profile and possess any 
    licenses required to perform those services.</li>
            <li>I will not engage in any unlawful or innapropriate activity while performing services for Customers.</li>
            <li>I will take the necessary safety precautions when meeting Customers to assure both their and 
   my own safety.</li>
        </ol>
        <ul>
             <li>
                <label><input type="checkbox" @Validation.GetHtml("termsofuse") @CommonHelpers.IsChecked(Request["termsofuse"].AsBool(), true) name="termsofuse" id="termsofuse" value="True"/>I have read and agree to the above and the full <a class="view-terms-of-use" target="_blank" href="@(UrlUtil.LangPath)About/TermsOfUse/">Terms of Use</a> and <a class="view-privacy-policy" target="_blank" href="@(UrlUtil.LangPath)About/PrivacyPolicy/">Privacy Policy</a>.</label>
                @Html.ValidationMessage("termsofuse")
             </li>
             <li>
                <label><input type="checkbox" @Validation.GetHtml("emailcontact") @CommonHelpers.IsChecked(Request["emailcontact"].AsBool(), true) name="emailcontact" id="emailcontact" value="True"/>I don't mind having you e-mail me important news.</label>
                @Html.ValidationMessage("emailcontact")
             </li>
         </ul>
     </fieldset>
     <fieldset class="actions">
        <button data-wizard-next-step="#your-work" class="next main-action">Continue</button>
     </fieldset>
</form>
