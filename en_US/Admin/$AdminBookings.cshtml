@using WebMatrix.Data;
@using WebMatrix.WebData;
@{
    CommonHelpers.AdminPage();
    
    // var u = DashboardFunctions.GetUserRow();
    int userID = WebSecurity.CurrentUserId;
    
    string idprefix = "admin-bookings";
    
    // possible values: "maybe-performed", "dispute", "performed-without-pricing-adjustment", "performed-with-pricing-adjustment"
    string view = PageData["view"] ?? Request["view"] ?? "maybe-performed";
    
    // NOTE: SAME as the Select part of the sqlGetBookingsByDateRange found in Booking/$BookingsList; must be converted to a database view (and with the order clause)
    var sqlSelectBookings = @"
        SELECT  R.BookingRequestID,
                B.BookingID,
                R.ProviderUserID,
                R.CustomerUserID,
                R.PricingEstimateID,
                R.BookingRequestStatusID,
                B.BookingStatusID,

                UC.FirstName As CustomerFirstName,
                UC.LastName As CustomerLastName,

                UP.FirstName As ProviderFirstName,
                UP.LastName As ProviderLastName,

                E.StartTime,
                E.EndTime,
                E.TimeZone,
                Pos.PositionSingular,
                Pr.TotalPrice
        FROM    Booking As B
                 INNER JOIN
                BookingRequest As R
                  ON B.BookingRequestID = R.BookingRequestID
                 INNER JOIN
                PricingEstimate As Pr
                  ON Pr.PricingEstimateID = R.PricingEstimateID
                 INNER JOIN
                Users As UC
                  ON UC.UserID = R.CustomerUserID
                 INNER JOIN
                Users As UP
                  ON UP.UserID = R.ProviderUserID
                 LEFT JOIN
                CalendarEvents As E
                  ON E.Id = B.ConfirmedDateID
                 INNER JOIN
                Positions As Pos
                  ON Pos.PositionID = R.PositionID
					AND Pos.LanguageID = @2 AND Pos.CountryID = @3
    ";
    var sqlWhereMaybePerformedBooking = @"
        WHERE   
                -- Only bookings confirmed by customer and provider
                B.BookingStatusID = 1
                 AND
                Convert(date, E.EndTime) <= @0
                 AND
                (@1 is null OR Convert(date, E.EndTime) > @1)
    ";
    var sqlWhereDisputeBooking = @"
        WHERE
                -- State dispute-dispute
                B.BookingStatusID = 5
    ";
    var sqlOrderBooking = @"
        ORDER BY E.EndTime DESC, B.UpdatedDate DESC, R.UpdatedDate DESC
    ";
    var sqlGetMaybePerformedBooking = sqlSelectBookings + sqlWhereMaybePerformedBooking + sqlOrderBooking;
    var sqlGetDisputeBooking = sqlSelectBookings + sqlWhereDisputeBooking + sqlOrderBooking;

    dynamic justMaybePerformedBookings = null, maybePerformedBookings = null, disputeBookings = null, performedWihoutBookings = null, 
        performedWithBookings = null;
    using (var db = Database.Open("sqlloco")) {
        switch (view) {
            case "maybe-performed":
                DateTime moreRecent = DateTime.Today;
                DateTime olderDate = DateTime.Today.AddDays(3);
                
                justMaybePerformedBookings = db.Query(sqlGetMaybePerformedBooking, 
                    DateTime.Today, olderDate,
                    LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
                maybePerformedBookings = db.Query(sqlGetMaybePerformedBooking, 
                    olderDate, null,
                    LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
                break;
            case "dispute":
                disputeBookings = db.Query(sqlGetDisputeBooking, null, null, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
                break;
        }
    }
    
    /* Some static strings */
    string strBookingSingular = "booking";
    string strBookingPlural = "bookings";
}
@helper printDateTimeRange(DateTime? start, DateTime? end){
    if (start.HasValue && end.HasValue) {
        @start.Value.ToLongDateString()
        <text>, </text>
        @start.Value.ToShortTimeString()
        <text> to </text>
        @end.Value.ToShortTimeString()
    } else {
        <span class="no-dates">Date not available</span>
    }
}
@* Print a Booking or BookingRequest *@
@helper printItem(dynamic item) {
    string buttonAction = "view", buttonLabel = "View";
    if ((int)item.BookingStatusID > 0) {
        switch ((int)item.BookingStatusID){
            case 1:
                buttonAction = "confirmed";
                buttonLabel = "Confirmed";
                break;
            case 2:
                buttonAction = "performed-without";
                buttonLabel = "Done, no adjustment";
                break;
            case 3:
                buttonAction = "performed-with";
                buttonLabel = "Done, with adjustment";
                break;
            case 4:
                buttonAction = "completed";
                buttonLabel = "Completed";
                break;
            case 5:
                buttonAction = "dispute";
                buttonLabel = "Dispute";
                break;
        }
    }

  <li>
    <div>
    <h5>BookingID: @item.BookingID</h5>
    <h5>Status: @buttonLabel</h5>
    </div>
    <h5>Provider</h5>
    @RenderPage(UrlUtil.LangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
        {"Data", item},
        {"DataPrefix", "Provider"},
        {"Size", "mini"},
        {"UserType", "provider"}
    })
    <h5>Customer</h5>
    @RenderPage(UrlUtil.LangPath + "Profile/$UserInfoWidget.cshtml", new Dictionary<string, object>{ 
        {"Data", item},
        {"DataPrefix", "Customer"},
        {"Size", "mini"},
        {"UserType", "customer"}
    })
    <div class="actions">
        <button class="item-action @buttonAction" data-booking-id="@item.BookingID" data-booking-request-id="@item.BookingRequestID">View</button>
        <button class="item-action change-state" data-booking-id="@item.BookingID" data-booking-request-id="@item.BookingRequestID">Change State</button>
        <div class="total-price item-extra-info">$@item.TotalPrice</div>
    </div>
    <ul class="item-summary">
        <li>
            <h5>Time:</h5> @*Monday, April 15th, 2012, 11:00am to 2:00pm*@
                @printDateTimeRange(item.StartTime, item.EndTime)
        </li>
        <li>
            <h5>Position:</h5> @item.PositionSingular
        </li>
        <li>
            <h5>Details:</h5> @printItemDetails(item)
        </li>
    </ul>
  </li>
}
@helper printItemDetails(dynamic item) {
    /* Copied from Booking/$Payment */
    var sqlGetPricingVars = @"
        SELECT  V.CustomerPricingVariableDisplayText As Name, P.CustomerPricingDataInput As Quantity
        FROM    PricingEstimateDetail As P
                 INNER JOIN
                PricingVariable As V
                  ON V.PricingVariableID = P.PricingVariableID
        WHERE   P.PricingEstimateID = @0
                 AND V.CountryId = @1 AND V.LanguageID = @2
    ";
    var db = Database.Open("sqlloco");
    var i = 0;
    var iprint = "";
    foreach (var pitem in db.Query(sqlGetPricingVars, item.PricingEstimateID, 1, 1)) {
        if (i > 0) {
            iprint = "; ";
        }
        i++;
        @(iprint + pitem.Name + " " + pitem.Quantity)
    }
}
<div>
    <form method="post" action="@(UrlUtil.LangPath)Admin/$AdminBookings/" id="@idprefix" class="ajax ajax-box change-booking-status edit-popup">
        @if(IsPost) {CommonHelpers.GetValidationScripts();}
        @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
        <fieldset>
            <legend>Change Booking Status:</legend>
            <ul>
                <li><strong>BookingID:</strong> <span class="booking-id"></span></li>
                <li><strong>Current Status:</strong> <span class="booking-status"></span></li>
                <li>
                    <button class="button fancy set-status performed-without-status">Set as Performed With NO Pricing Adjustment (an email will be sent to providers and customers to allow them review each other)</button>
                </li>
                <li>
                    <label>Adjusted price: <input name="booking-adjusted-price" /></label>
                    <button class="button fancy set-status performed-with-status">Set as Performed With Pricing Adjustment (booking price will change and an email will be sent to providers and customers to allow them review each other)</button>
                </li>
                <li>
                    <button class="button fancy set-status complete-status">Set as Complete (email will be sent to providers and customers to notify the Status)</button>
                </li>
                <li>
                    <button class="button fancy set-status dispute-status">Set as Dispute (an email will be sent to providers and customers to notify the Status)</button>
                </li>
                <li>
                    <button class="button fancy see-payment-data">Click here to see the provider payment data (you will need it after set status 'performed'!)</button>
                </li>
                <li>
                    <button class="button fancy close-edit-popup">Do nothing and close me!</button>
                </li>
            </ul>
        </fieldset>
    </form>
</div>
<ul class="booking-list-groups items-groups-list">

    @if (view == "maybe-performed")
    {
        if (maybePerformedBookings.Count > 0)
        {
        <li>
            <h3>Maybe performed bookings, because state is 'confirmed' and Service End Date is older than 2 days ago (@DateTime.Today.AddDays(2).ToShortDateString()):
                <span class="items-count bookings-number">@maybePerformedBookings.Count @(maybePerformedBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
            </h3>
            <ul class="bookings-list items-list maybe-performed-bookings">
                @foreach (var item in maybePerformedBookings)
                {
                    @printItem(item)
                }
            </ul>
        </li>
        }

        if (justMaybePerformedBookings.Count > 0)
        {
        <li>
            <h3>Maybe performed bookings, because state is 'confirmed' and Service End Date is between today and 3 days ago (@DateTime.Today.AddDays(3).ToShortDateString()):
                <span class="items-count bookings-number">@justMaybePerformedBookings.Count @(justMaybePerformedBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
            </h3>
            <ul class="bookings-list items-list maybe-performed-bookings maybe-today-performed-bookings">
                @foreach (var item in justMaybePerformedBookings)
                {
                    @printItem(item)
                }
            </ul>
        </li>
        }

        if (maybePerformedBookings.Count == 0 && justMaybePerformedBookings.Count == 0)
        {
            <li class="no-items">There are not bookings</li>
        }
    }
    else if (view == "dispute")
    {
        if (disputeBookings.Count > 0)
        {
        <li>
            <h3>Failed:
                <span class="items-count bookings-number">@disputeBookings.Count @(disputeBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
            </h3>
            <ul class="bookings-list items-list dispute-bookings">
                @foreach (var item in disputeBookings)
                {
                    @printItem(item)
                }
            </ul>
        </li>
        }
        else
        {
            <li class="no-items">There are not bookings</li>
        }
    }
</ul>