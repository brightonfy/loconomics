@using WebMatrix.Data;
@{
    if (!Request["BookingID"].IsInt()){
        ModelState.AddError("BookingID", "There is an error on the form: BookingID value is required (url param)");
    }
    var bookingID = Request["BookingID"].AsInt();
    dynamic booking = null;
    dynamic paymentdata = null;

    if (ModelState.IsValid) {
        if (IsPost) {
            if (Request.Form["change-booking-status-id"].IsInt()) {
                if (!Request["BookingID"].IsInt()){
                    ModelState.AddError("BookingID", "There is an error on the form: BookingID value is required (url param)");
                }
            
            
                var statusID = Request.Form["change-booking-status-id"].AsInt();
                if ((statusID == 2 || statusID == 3)){
                    if (!Request["TotalPricePaidByCustomer"].IsDecimal()) {
                        ModelState.AddError("TotalPricePaidByCustomer", "Change the state to 'performed' requires you specify price for TotalPricePaidByCustomer");
                    }
                    if (!Request["TotalServiceFeesPaidByCustomer"].IsDecimal()) {
                        ModelState.AddError("TotalServiceFeesPaidByCustomer", "Change the state to 'performed' requires you specify price for TotalServiceFeesPaidByCustomer");
                    }
                    if (!Request["TotalPaidToProvider"].IsDecimal()) {
                        ModelState.AddError("TotalPaidToProvider", "Change the state to 'performed' requires you specify price for TotalPaidToProvider");
                    }
                    if (!Request["TotalServiceFeesPaidByProvider"].IsDecimal()) {
                        ModelState.AddError("TotalServiceFeesPaidByProvider", "Change the state to 'performed' requires you specify price for TotalServiceFeesPaidByProvider");
                    }
                }

                if (ModelState.IsValid){
                    using (var db = Database.Open("sqlloco")) {
                        // Save data in DB
                        if (statusID == 2 || statusID == 3){
                            // Service performed status
                            db.Execute(@"
                                UPDATE Booking SET
                                    BookingStatusID = @1
                                    ,PricingAdjustmentApplied = @2
                                    ,TotalPricePaidByCustomer = @3
                                    ,TotalServiceFeesPaidByCustomer = @4
                                    ,TotalPaidToProvider = @5
                                    ,TotalServiceFeesPaidByProvider = @6
                                    ,UpdatedDate = getdate()
                                    ,ModifiedBy = 'sys'
                                WHERE BookingID = @0
                            ", bookingID,
                             statusID,
                             (statusID == 3),
                             Request["TotalPricePaidByCustomer"].AsDecimal(),
                             Request["TotalServiceFeesPaidByCustomer"].AsDecimal(),
                             Request["TotalPaidToProvider"].AsDecimal(),
                             Request["TotalServiceFeesPaidByProvider"].AsDecimal());
                            
                            // Send email for provider-customer reviews:
                            // TODO
                        } else {
                            db.Execute(@"
                                UPDATE Booking SET
                                    BookingStatusID = @1
                                    ,UpdatedDate = getdate()
                                    ,ModifiedBy = 'sys'
                                WHERE BookingID = @0
                            ", bookingID, statusID);
                        }
                        
                        // Send email notifying the booking status change/update
                        LcMessaging.SendBookingUpdate(bookingID, 's');

                        if (ModelState.IsValid) {
                            CommonHelpers.ReturnJsonResult(0, "Booking State Changed! An email was sent to provider and customer");
                        }
                    }
                }
            } else if (Request.Form["see-payment-data"] != null) {
                paymentdata = "This must a dynamic database row with payment data";
            }
        }

        using (var db = Database.Open("sqlloco")){
            booking = db.QuerySingle(@"
                SELECT  
                        B.BookingStatusID
                        ,BS.BookingStatusName
                        ,P.SubtotalPrice
                        ,P.FeePrice
                        ,P.TotalPrice
                FROM    Booking As B
                         INNER JOIN
                        BookingRequest As R
                          ON B.BookingRequestID = R.BookingRequestID
                         INNER JOIN
                        PricingEstimate As P
                          ON P.PricingEstimateID = R.PricingEstimateID
                         INNER JOIN
                        BookingStatus AS BS
                          ON BS.BookingStatusID = B.BookingStatusID
                WHERE
                        B.BookingID = @0
            ", Request["BookingID"].AsInt());
        }
    }
}
@if (paymentdata != null)
{
<div class="payment-data ajax-box">
    <p>TODO PAYMENT DATA</p>

    <button type="button" class="button fancy reload-action" data-reload-target=".edit-popup">Return to 'change booking state' form</button>
</div>
}
else
{
<form method="post" action="@(UrlUtil.LangPath)Admin/$ChangeBookingState/?BookingID=@(bookingID)" class="ajax ajax-box change-booking-status-form">
    @if (IsPost) { CommonHelpers.GetValidationScripts(); }
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    @if (bookingID > 0 && booking != null)
    {
        <input class="change-booking-state-action" type="hidden" />
        <fieldset>
            <legend>Change Booking Status:</legend>
            <ul>
                <li><strong>BookingID:</strong> <span class="booking-id">@Request["BookingID"]</span></li>
                <li><strong>Current Status:</strong> <span class="booking-status">@booking.BookingStatusName</span></li>
                <li><strong>What happens on changing booking state?</strong> 
                    <ul><li>Booking.StateID field value is changed</li>
                        <li>An email is sent both provider and customer to notify them, and on performed the review form link are sent.</li>
                        <li>On set service as 'performed' state, Booking table prices fields are filled, using following data to pre-fill the form:
                            <ul>
                                <li>TotalPricePaidByCustomer: PricingEstimate.TotalPrice</li>
                                <li>TotalServiceFeesPaidByCustomer: PricingEstimate.FeePrice</li>
                                <li>TotalPaidToProvider: PricingEstimate.SubtotalPrice</li>
                                <li>TotalServiceFeesPaidByProvider: 0</li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <li class="set-as-performed">
                    <strong>Set as Performed</strong>
                    <ul>
                        <li><label>TotalPricePaidByCustomer: <input name="TotalPricePaidByCustomer" value="@booking.TotalPrice" /></label></li>
                        <li><label>TotalServiceFeesPaidByCustomer: <input name="TotalServiceFeesPaidByCustomer" value="@booking.FeePrice" /></label></li>
                        <li><label>TotalPaidToProvider: <input name="TotalPaidToProvider" value="@booking.SubtotalPrice" /></label></li>
                        <li><label>TotalServiceFeesPaidByProvider: <input name="TotalServiceFeesPaidByProvider" value="0" /></label></li>
                        <li>
                            <button type="button" name="change-booking-status-id" value="2" class="button fancy set-status performed-without-status">Set as Performed With NO Pricing Adjustment</button>
                            <button type="button" name="change-booking-status-id" value="3" class="button fancy set-status performed-with-status">Set as Performed With Pricing Adjustment</button>
                        </li>
                    </ul>
                </li>
                <li>
                    <button type="button" name="change-booking-status-id" value="4" class="button fancy set-status complete-status">Set as Complete</button>
                </li>
                <li>
                    <button type="button" name="change-booking-status-id" value="5" class="button fancy set-status dispute-status">Set as Dispute</button>
                </li>
                <li>
                    <button type="button" name="see-payment-data" value="" class="button fancy see-payment-data">Click here to see the provider payment data (you will need it after set status 'performed' to pay to the provider!)</button>
                </li>
                <li>
                    <button type="button" class="button fancy close-edit-popup">Do nothing and close me!</button>
                </li>
            </ul>
        </fieldset>
    }
</form>
}
