@using WebMatrix.Data;
@{
    // Current position data record:
    var pos = DashboardFunctions.GetUserCurrentPos();
    var n = pos.PositionID;
    
    var idprefix = "position#" + n + "-services";
    
    var tplAttName = "positionservices-category[{0}]-attribute[{1}]";
    var tplCatName = "positionservices-category[{0}]";
    
    var specialCatIDs = LcData.SpecialServicesAttCats;
    var dataCats = LcData.GetServiceCatsAndItsAttributes(pos.PositionID, "provider-services", pos.UserID);
    
    if (IsPost) {
        var sqlSetAttribute = @"
            BEGIN TRAN
                UPDATE  userprofileserviceattributes WITH (serializable)
                SET     Active = 1,
                        UpdatedDate = getdate(),
                        ModifiedBy = 'sys'
                WHERE   UserId = @0 AND PositionID = @1
                         AND ServiceAttributeCategoryID = @2
                         AND ServiceAttributeID = @3
                         AND LanguageID = @4 AND CountryID = @5

                IF @@rowcount = 0
                BEGIN
                    INSERT INTO userprofileserviceattributes (UserID,
                        PositionID, ServiceAttributeCategoryID, ServiceAttributeID, LanguageID, CountryID, CreateDate, UpdatedDate, 
                        ModifiedBy, Active)
                    VALUES (@0, @1, @2, @3, @4, @5, getdate(), getdate(), 'sys', 1)
                END
            COMMIT TRAN
        ";
        var sqlDelAttribute = @"
            DELETE FROM userprofileserviceattributes
            WHERE       UserID = @0 AND PositionID = @1
                         AND ServiceAttributeCategoryID = @2
                         AND ServiceAttributeID = @3
                         AND LanguageID = @4 AND CountryID = @5
        ";
        var sqlSetLangLevel = @"
            BEGIN TRAN
                UPDATE  ServiceAttributeLanguageLevel WITH (serializable)
                SET     LanguageLevelID = @5,
                        UpdatedDate = getdate(),
                        ModifiedBy = 'sys'
                WHERE   UserId = @0 AND PositionID = @1
                         AND ServiceAttributeID = @2
                         AND LanguageID = @3 AND CountryID = @4

                IF @@rowcount = 0
                BEGIN
                    INSERT INTO ServiceAttributeLanguageLevel (UserID,
                        PositionID, ServiceAttributeID, LanguageID, CountryID, LanguageLevelID,
                        CreatedDate, UpdatedDate, ModifiedBy)
                    VALUES (@0, @1, @2, @3, @4, @5, getdate(), getdate(), 'sys')
                END
            COMMIT TRAN
        ";
        var sqlDelLangLevel = @"
            DELETE FROM ServiceAttributeLanguageLevel
            WHERE   UserId = @0 AND PositionID = @1
                         AND ServiceAttributeID = @2
                         AND LanguageID = @3 AND CountryID = @4
        ";
        
        using (var db = Database.Open("sqlloco")) {
            // Iterate categories and attributes, save what are checked and remove what not
            foreach (var cat in dataCats) {
                switch ((int)cat.Key) {
                    // Simple Check attributes:
                    default:
                        foreach (var att in cat.Value["ServiceAttributes"]) {
                            // Check if selection changes
                            bool wasChecked = (Request[String.Format(tplAttName, cat.Key, att.ServiceAttributeID)] != null);
                            // We check previous value with current to avoid do unneeded Database calls
                            if (att.UserChecked != wasChecked || (int)cat.Key == LcData.ServiceAttCatIDLanguages) {
                                // Value changed, update database
                                if (wasChecked) {
                                    // Set record (insert or update)
                                    db.Execute(sqlSetAttribute, pos.UserID, pos.PositionID, att.ServiceAttributeCategoryID, att.ServiceAttributeID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
                                    if ((int)cat.Key == LcData.ServiceAttCatIDLanguages) {
                                        // If is language, we must save the Language Level value too
                                        // name: positionservices-category[@(cat["ServiceAttributeCategoryID"])-attribute[@(att.ServiceAttributeID)]-level
                                        var langlevel = Request[String.Format(tplAttName, cat.Key, att.ServiceAttributeID) + "-level"];
                                        db.Execute(sqlSetLangLevel, pos.UserID, pos.PositionID, att.ServiceAttributeID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID(),
                                            langlevel);
                                    }
                                } else {
                                    // Delete record
                                    db.Execute(sqlDelAttribute, pos.UserID, pos.PositionID, att.ServiceAttributeCategoryID, att.ServiceAttributeID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
                                    if ((int)cat.Key == LcData.ServiceAttCatIDLanguages) {
                                        db.Execute(sqlDelLangLevel, pos.UserID, pos.PositionID, att.ServiceAttributeID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
                                    }
                                }
                            }
                        }
                        break;
                    // Select One attributes
                    case LcData.ServiceAttCatIDExperience:
                    case LcData.ServiceAttCatIDExperienceLevel:
                        // Get value selected by user
                        int selectedAttID = Request[String.Format(tplCatName, cat.Key)].AsInt();
                        // Iterate every attribute in category to unchecked except one was selected
                        foreach (var att in cat.Value) {
                            // We check previous value with current to avoid do unneded Database calls
                            // if value was checked previously and is the same as now, no call is needed
                            // if value was not checked previously and is not what was selected now, no call is needed
                            if (!att.UserChecked && att.ServiceAttributeID == selectedAttID ||
                                att.UserChecked && att.ServiceAttributeID != selectedAttID) {
                                if (att.ServiceAttributeID == selectedAttID) {
                                    db.Execute(sqlSetAttribute, pos.UserID, pos.PositionID, att.ServiceAttributeCategoryID, att.ServiceAttributeID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
                                } else {
                                    db.Execute(sqlDelAttribute, pos.UserID, pos.PositionID, att.ServiceAttributeCategoryID, att.ServiceAttributeID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
                                }
                            }
                        }
                        break;
                    // Check attribute and select a linked value
                    //case LcData.ServiceAttCatIDLanguages:
                        // TODO
                    //    break;
                }
            }

            // Check alert
            db.Execute("EXEC TestAlertPositionServices @0, @1", pos.UserID, pos.PositionID);
        }
        
        CommonHelpers.ReturnJsonResult(0, LcRessources.DataSaved);
    }
    
    dynamic langLevels = null;
    var userLangLevels = new Dictionary<int, int>();
    //, userExpLevels;
    using (var db = Database.Open("sqlloco")) {
        langLevels = db.Query(@"
            SELECT  LanguageLevelID, LanguageLevelName, LanguageLevelDescription
            FROM    LanguageLevel
            WHERE   LanguageID = @0 AND CountryID = @1
        ", LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID());
        foreach (var ulanglevel in db.Query(@"
            SELECT  LanguageLevelID, ServiceAttributeID
            FROM    ServiceAttributeLanguageLevel
            WHERE   UserID = @0 AND
                    PositionID = @1 AND
                    LanguageID = @2 AND
                    CountryID = @3
        ", pos.UserID, pos.PositionID, LcData.GetCurrentLanguageID(), LcData.GetCurrentCountryID())) {
            userLangLevels.Add(ulanglevel.ServiceAttributeID, ulanglevel.LanguageLevelID);
        };
    }
}
@helper getChecked(dynamic att){
    if (att.UserChecked) {
        @Html.Raw("checked='checked'")
    }
}
@helper printAttCheckList(int catId, dynamic atts){
    <ul>
        @foreach(var att in atts){
            <li>@printAttCheck(catId, att)</li>
        }
    </ul>
}
@helper printAttCheck(int catId, dynamic att){
    <label title="@att["ServiceAttribute"]" data-description="@att["ServiceAttributeDescription"]"><input type="checkbox" @getChecked(att) name="positionservices-category[@(catId)]-attribute[@(att["ServiceAttributeID"])]"/>@att["ServiceAttribute"]</label>
}
@helper printAttSelect(dynamic cat){
    <select title="@cat["ServiceAttributeCategoryName"]" data-description="@cat["ServiceAttributeCategoryDescription"]" name="positionservices-category[@(cat["ServiceAttributeCategoryID"])]">
        @foreach (var att in cat["ServiceAttributes"]){
        <option @getChecked(att) title="@att["ServiceAttribute"]" data-description="@att["ServiceAttributeDescription"]" value="@att["ServiceAttributeID"]">@att["ServiceAttribute"]</option>
        }
    </select>
}
@helper printCatLegend(dynamic cat){
    <legend data-description="@cat["ServiceAttributeCategoryDescription"]" title="@cat["ServiceAttributeCategoryName"]">@cat["ServiceAttributeCategoryName"]:</legend>
}
<p class="setting-instructions">
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer justo lorem, egestas quis fermentum a, rutrum sed justo. Duis nulla tellus.
</p>
<div>
<form action="@(UrlUtil.LangPath)Dashboard/$PositionsServices/" method="post" class="positionservices ajax ajax-box" id="@idprefix">
    <input type="hidden" name="position-number" value="@n"/>
    <input type="hidden" name="positionid" value="@pos.PositionID"/>
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)

    <div class="service-attribute-categories">
        @foreach (var cat in dataCats)
        {
            if (!specialCatIDs.Contains(cat.Key))
            {
                if (cat.Value["ServiceAttributes"].Count > 0)
                {
                    <fieldset class="positionservices-attributes @(cat.Value["RequiredInput"] ? "required-attribute-category" : "")">
                        @printCatLegend(cat.Value)
                        @printAttCheckList(cat.Key, cat.Value["ServiceAttributes"])
                    </fieldset>
                }
            }
        }
        @*
        <fieldset class="positionservices-attributes">
            <legend>Services regularly included:</legend>
            @printAttCheckList(servicesId, services)
        </fieldset>
        <fieldset class="positionservices-attributes">
            <legend>Services upon request:</legend>
            @printAttCheckList(serviceswithfeesId, serviceswithfees)
        </fieldset>*@
    </div>
    <div class="positionservices-sidebar">
        @if (dataCats.ContainsKey(LcData.ServiceAttCatIDExperienceLevel) && dataCats[LcData.ServiceAttCatIDExperienceLevel]["ServiceAttributes"].Count > 0)
        {
            var cat = dataCats[LcData.ServiceAttCatIDExperienceLevel];
        <fieldset class="positionservices-experiencelevel @(cat["RequiredInput"] ? "required-attribute-category" : "")">
            @*<legend>Experience Level</legend>*@
            @printCatLegend(cat)
            @printAttSelect(cat["ServiceAttributes"])
            @*<select name="positionservices-experiencelevel">
                <option>Expert</option>
                <option>Intermediate</option>
                <option>Novice</option>
            </select>*@
        </fieldset>
        }
        @if (dataCats.ContainsKey(LcData.ServiceAttCatIDExperience) && dataCats[LcData.ServiceAttCatIDExperience]["ServiceAttributes"].Count > 0)
        {
            var cat = dataCats[LcData.ServiceAttCatIDExperience];
        <fieldset class="positionservices-yearsexperience @(cat["RequiredInput"] ? "required-attribute-category" : "")">
            @*<legend>Years Experience</legend>*@
            @printCatLegend(cat)
            @printAttSelect(cat["ServiceAttributes"])
            @*
            <select name="positionservices-yearsexperience">
                <option>+10 years</option>
                <option>5 years</option>
                <option>1.5 years</option>
                <option>1 year</option>
                <option>-1 year</option>
            </select>*@
        </fieldset>
        }
        @if (dataCats.ContainsKey(LcData.ServiceAttCatIDLanguages) && dataCats[LcData.ServiceAttCatIDLanguages]["ServiceAttributes"].Count > 0)
        {
            var cat = dataCats[LcData.ServiceAttCatIDLanguages];
        <fieldset class="positionservices-languagesspoken @(cat["RequiredInput"] ? "required-attribute-category" : "")">
            @*<legend>Languages Spoken</legend>*@
            @printCatLegend(cat)
            <ul>
                @foreach (var att in dataCats[LcData.ServiceAttCatIDLanguages]["ServiceAttributes"])
                {
                    string selLangLevel = 
                        Request[String.Format(tplAttName, LcData.ServiceAttCatIDLanguages, att.ServiceAttributeID) + "-level"] ??
                        (userLangLevels.ContainsKey(att.ServiceAttributeID) ? userLangLevels[att.ServiceAttributeID] : 0).ToString();
                        
                <li>@printAttCheck(LcData.ServiceAttCatIDLanguages, att)
                    <select title="@cat["ServiceAttributeCategoryName"]" data-description="@cat["ServiceAttributeCategoryDescription"]" name="positionservices-category[@(cat["ServiceAttributeCategoryID"])]-attribute[@(att.ServiceAttributeID)]-level">
                        @foreach (var level in langLevels)
                        {
                            <option @CommonHelpers.IsSelected(level.LanguageLevelID.ToString(), selLangLevel) value="@level.LanguageLevelID" data-description="@level.LanguageLevelDescription" title="@level.LanguageLevelName">@level.LanguageLevelName</option>
                        }
                    </select>
                </li>
                }
            </ul>
            @*
            <ul>
                <li><label><input name="positionservices-languagespoken-english" type="checkbox"/>English</label>
                    <select name="positionservices-languagesspoken-englishlevel">
                        <option>Fluent</option>
                        <option>Begginer</option>
                        <option>N/A</option>
                    </select>
                </li>
                <li><label><input name="positionservices-languagespoken-spanish" type="checkbox"/>Spanish</label>
                    <select name="positionservices-languagesspoken-spanishlevel">
                        <option>Fluent</option>
                        <option>Begginer</option>
                        <option>N/A</option>
                    </select>
                </li>
                <li><label><input name="positionservices-languagespoken-catalan" type="checkbox"/>Catalan</label>
                    <select name="positionservices-languagesspoken-catalanlevel">
                        <option>Fluent</option>
                        <option>Begginer</option>
                        <option>N/A</option>
                    </select>
                </li>
                <li><label><input name="positionservices-languagespoken-galician" type="checkbox"/>Galician</label>
                    <select name="positionservices-languagesspoken-galicianlevel">
                        <option>Fluent</option>
                        <option>Begginer</option>
                        <option>N/A</option>
                    </select>
                </li>
            </ul>*@
        </fieldset>
        }
        @if (dataCats.ContainsKey(LcData.ServiceAttCatIDClientTypes) && dataCats[LcData.ServiceAttCatIDClientTypes]["ServiceAttributes"].Count > 0)
        {
            var cat = dataCats[LcData.ServiceAttCatIDClientTypes];
        <fieldset class="positionservices-clientstypes @(cat["RequiredInput"] ? "required-attribute-category" : "")">
            @*<legend>Clients Types</legend>*@
            @printCatLegend(cat)
            @printAttCheckList(LcData.ServiceAttCatIDClientTypes, dataCats[LcData.ServiceAttCatIDClientTypes]["ServiceAttributes"])
            @*<label><input type="checkbox" name="positionservices-clientstypes-residential"/>Residential</label>
            <label><input type="checkbox" name="positionservices-clientstypes-business"/>Business</label>*@
        </fieldset>
        }
    </div>
    <div class="required-attribute-category-footnote">* This category require data in order to enable your profile</div>
    <fieldset class="actions">
        <button class="save main-action" type="submit">Save</button>
    </fieldset>
</form>
</div>