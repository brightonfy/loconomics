@using WebMatrix.Data;
@{
    // Current position data record:
    var pos = DashboardFunctions.GetUserCurrentPos();
    var n = pos.PositionID;
    
    var idprefix = "position#" + n + "-services";
    
    var tplAttName = "positionservices-category[{0}]-attribute[{1}]";
    var tplCatName = "positionservices-category[{0}]";
    
    var sqlattribute = "exec GetServiceAttributes @0,@1,1,1,@2";
    
    dynamic services, serviceswithfees, attsExperience, attsExperienceLevel, attsClientTypes, attsLanguages;
    int servicesId = 2, serviceswithfeesId = 3, attsExperienceID = 1, attsExperienceLevelID = 4, attsClientTypesID = 7,
        attsLanguagesID = 5;
    
    using (var db = Database.Open("sqlloco")){
        // Getting the 'Services routinely included' (cat=2)
        services = db.Query(sqlattribute, pos.PositionID, servicesId, pos.UserID);
        
        // Getting the 'Services upon request' (cat=3)
        serviceswithfees = db.Query(sqlattribute, pos.PositionID, serviceswithfeesId, pos.UserID);
        
        attsExperience = db.Query(sqlattribute, pos.PositionID, attsExperienceID, pos.UserID);
        
        attsExperienceLevel = db.Query(sqlattribute, pos.PositionID, attsExperienceLevelID, pos.UserID);
        
        attsClientTypes = db.Query(sqlattribute, pos.PositionID, attsClientTypesID, pos.UserID);
        
        attsLanguages = db.Query(sqlattribute, pos.PositionID, attsLanguagesID, pos.UserID);
    }
    
    if (IsPost) {
        // Iterate categories and attributes, save what are checked and remove what not
        // List of categories to iterate and check every attribute
        var cats = new Dictionary<int, dynamic>();
        cats.Add(servicesId, services);
        cats.Add(serviceswithfeesId, serviceswithfees);
        cats.Add(attsClientTypesID, attsClientTypes);
        cats.Add(attsLanguagesID, attsLanguages);
        // List of categories that can only select one attribute of all possible in that category
        var catsSelectOne = new Dictionary<int, dynamic>();
        catsSelectOne.Add(attsExperienceID, attsExperience);
        catsSelectOne.Add(attsExperienceLevelID, attsExperienceLevel);
        
        var sqlSetAttribute = @"
            BEGIN TRAN
                UPDATE  userprofileserviceattributes WITH (serializable)
                SET     Active = 1,
                        UpdatedDate = getdate(),
                        ModifiedBy = 'sys'
                WHERE   UserId = @0 AND PositionID = @1 AND SCAMID = @2
                         AND LanguageID = @3 AND CountryID = @4

                IF @@rowcount = 0
                BEGIN
                    INSERT INTO userprofileserviceattributes (UserID,
                        PositionID, SCAMID, LanguageID, CountryID, CreateDate, UpdatedDate, 
                        ModifiedBy, Active)
                    VALUES (@0, @1, @2, @3, @4, getdate(), getdate(), 'sys', 1)
                END
            COMMIT TRAN
        ";
        var sqlDelAttribute = @"
            DELETE FROM userprofileserviceattributes
            WHERE       UserID = @0 AND PositionID = @1 AND SCAMID = @2
                         AND LanguageID = @3 AND CountryID = @4
        ";
        
        using (var db = Database.Open("sqlloco")) {
            foreach (var cat in cats) {
                foreach (var att in cat.Value) {
                    // Check if selection changes
                    bool wasChecked = (Request[String.Format(tplAttName, cat.Key, att.ServiceAttributeID)] != null);
                    // We check previous value with current to avoid do unneeded Database calls
                    if (att.UserChecked != wasChecked) {
                        // Value changed, update database
                        if (wasChecked) {
                            // Set record (insert or update)
                            db.Execute(sqlSetAttribute, pos.UserID, pos.PositionID, att.SCAMID, 1, 1);
                        } else {
                            // Delete record
                            db.Execute(sqlDelAttribute, pos.UserID, pos.PositionID, att.SCAMID, 1, 1);
                        }
                    }
                }
            }
            foreach (var cat in catsSelectOne) {
                // Get value selected by user
                int selectedAttID = Request[String.Format(tplCatName, cat.Key)].AsInt();
                // Iterate every attribute in category to unchecked except one was selected
                foreach (var att in cat.Value) {
                    // We check previous value with current to avoid do unneded Database calls
                    // if value was checked previously and is the same as now, no call is needed
                    // if value was not checked previously and is not what was selected now, no call is needed
                    if (!att.UserChecked && att.ServiceAttributeID == selectedAttID ||
                        att.UserChecked && att.ServiceAttributeID != selectedAttID) {
                        if (att.ServiceAttributeID == selectedAttID) {
                            db.Execute(sqlSetAttribute, pos.UserID, pos.PositionID, att.SCAMID, 1, 1);
                        } else {
                            db.Execute(sqlDelAttribute, pos.UserID, pos.PositionID, att.SCAMID, 1, 1);
                        }
                    }
                }
            }
        }
        
        CommonHelpers.ReturnJsonResult(0, LcRessources.DataSaved);
    }
}
@helper getChecked(dynamic att){
    if (att.UserChecked) {
        @Html.Raw("checked='checked'")
    }
}
@helper printAttCheckList(int catId, dynamic atts){
    <ul>
        @foreach(var att in atts){
            <li>@printAttCheck(catId, att)</li>
        }
    </ul>
}
@helper printAttCheck(int catId, dynamic att){
    <label title="@att.ServiceAttribute"><input type="checkbox" @getChecked(att) name="positionservices-category[@(catId)]-attribute[@(att.ServiceAttributeID)]"/>@att.ServiceAttribute</label>
}
@helper printAttSelect(int catId, dynamic atts){
    <select name="positionservices-category[@(catId)]">
        @foreach (var att in atts){
        <option @getChecked(att) value="@att.ServiceAttributeID">@att.ServiceAttribute</option>
        }
    </select>
}
<p class="setting-instructions">
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer justo lorem, egestas quis fermentum a, rutrum sed justo. Duis nulla tellus.
</p>
<form action="@(UrlUtil.LangPath)Dashboard/$PositionsServices/" method="post" class="positionservices ajax ajax-box" id="@idprefix">
    <input type="hidden" name="position-number" value="@n"/>
    <input type="hidden" name="positionid" value="@pos.PositionID"/>
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="positionservices-attributes">
        <legend>Services regularly included:</legend>
        @printAttCheckList(servicesId, services)
    </fieldset>
    <fieldset class="positionservices-attributes">
        <legend>Services upon request:</legend>
        @printAttCheckList(serviceswithfeesId, serviceswithfees)
    </fieldset>
    <div class="positionservices-sidebar">
        @if (attsExperienceLevel.Count > 0)
        {
        <fieldset class="positionservices-experiencelevel">
            <legend>Experience Level</legend>
                @printAttSelect(attsExperienceLevelID, attsExperienceLevel)
                @*<select name="positionservices-experiencelevel">
                <option>Expert</option>
                <option>Intermediate</option>
                <option>Novice</option>
            </select>*@
        </fieldset>
        }
        @if (attsExperience.Count > 0)
        {
        <fieldset class="positionservices-yearsexperience">
            <legend>Years Experience</legend>
            @printAttSelect(attsExperienceID, attsExperience)
            @*
            <select name="positionservices-yearsexperience">
                <option>+10 years</option>
                <option>5 years</option>
                <option>1.5 years</option>
                <option>1 year</option>
                <option>-1 year</option>
            </select>*@
        </fieldset>
        }
        @if (attsLanguages.Count > 0)
        {
        <fieldset class="positionservices-languagesspoken">
            <legend>Languages Spoken</legend>
            <ul>
                @foreach (var att in attsLanguages)
                {
                <li>@printAttCheck(attsLanguagesID, att)
                    @*TODO: printAttSelect, where are language level atts? *@
                    <select name="positionservices-category[@(attsLanguagesID)]-attribute[@(att.ServiceAttributeID)]-level">
                        <option>Fluent</option>
                        <option>Begginer</option>
                        <option>N/A</option>
                    </select>
                </li>
                }
            </ul>
            @*
            <ul>
                <li><label><input name="positionservices-languagespoken-english" type="checkbox"/>English</label>
                    <select name="positionservices-languagesspoken-englishlevel">
                        <option>Fluent</option>
                        <option>Begginer</option>
                        <option>N/A</option>
                    </select>
                </li>
                <li><label><input name="positionservices-languagespoken-spanish" type="checkbox"/>Spanish</label>
                    <select name="positionservices-languagesspoken-spanishlevel">
                        <option>Fluent</option>
                        <option>Begginer</option>
                        <option>N/A</option>
                    </select>
                </li>
                <li><label><input name="positionservices-languagespoken-catalan" type="checkbox"/>Catalan</label>
                    <select name="positionservices-languagesspoken-catalanlevel">
                        <option>Fluent</option>
                        <option>Begginer</option>
                        <option>N/A</option>
                    </select>
                </li>
                <li><label><input name="positionservices-languagespoken-galician" type="checkbox"/>Galician</label>
                    <select name="positionservices-languagesspoken-galicianlevel">
                        <option>Fluent</option>
                        <option>Begginer</option>
                        <option>N/A</option>
                    </select>
                </li>
            </ul>*@
        </fieldset>
        }
        @if (attsClientTypes.Count > 0)
        {
        <fieldset class="positionservices-clientstypes">
            <legend>Clients Types</legend>
            @printAttCheckList(attsClientTypesID, attsClientTypes)
            @*<label><input type="checkbox" name="positionservices-clientstypes-residential"/>Residential</label>
            <label><input type="checkbox" name="positionservices-clientstypes-business"/>Business</label>*@
        </fieldset>
        }
    </div>
    <fieldset class="actions">
        <button class="save main-action" type="submit">Save</button>
    </fieldset>
</form>