@using WebMatrix.Data;
@{
    var idprefix = "bookings";
    var u = DashboardFunctions.GetUserRow();
    
    var sqlGetPendingBookingRequest = @"
        SELECT  R.BookingRequestID,
                0 As BookingID,
                R.CustomerUserID,
                R.PricingEstimateID,
                C.FirstName As CustomerFirstName,
                C.LastName As CustomerLastName,
                E.StartTime,
                E.EndTime,
                E.TimeZone,
                Pos.PositionSingular,
                Pr.TotalPrice
        FROM    BookingRequest As R
                 INNER JOIN
                PricingEstimate As Pr
                  ON Pr.PricingEstimateID = R.PricingEstimateID
                 INNER JOIN
                Users As C
                  ON C.UserID = R.CustomerUserID
                 INNER JOIN
                CalendarEvents As E
                  ON E.Id = R.PreferredDateID
                 INNER JOIN
                Positions As Pos
                  ON Pos.PositionID = R.PositionID
        WHERE   R.ProviderUserID=@0
                 AND
                R.BookingRequestStatusID = 2
    ";
    var sqlGetBookingsByDateRange = @"
        SELECT  R.BookingRequestID,
                B.BookingID,
                R.CustomerUserID,
                R.PricingEstimateID,
                C.FirstName As CustomerFirstName,
                C.LastName As CustomerLastName,
                E.StartTime,
                E.EndTime,
                E.TimeZone,
                Pos.PositionSingular,
                Pr.TotalPrice
        FROM    Booking As B
                 INNER JOIN
                BookingRequest As R
                  ON B.BookingRequestID = R.BookingRequestID
                 INNER JOIN
                PricingEstimate As Pr
                  ON Pr.PricingEstimateID = R.PricingEstimateID
                 INNER JOIN
                Users As C
                  ON C.UserID = R.CustomerUserID
                 INNER JOIN
                CalendarEvents As E
                  ON E.Id = B.ConfirmedDateID
                 INNER JOIN
                Positions As Pos
                  ON Pos.PositionID = R.PositionID
        WHERE   R.ProviderUserID=@0
                 AND
                E.StartTime >= @1
                 AND
                E.StartTime <= @2
    ";
    dynamic pendingBookingRequests, todayBookings, tomorrowBookings, thisweekBookings, 
        upcomingBookings, pastBookings;
    using (var db = Database.Open("sqlloco")) {
        pendingBookingRequests = db.Query(sqlGetPendingBookingRequest, u.UserID);
        
        // Preparing dates for further filtering
        var today = DateTime.Today;
        var tomorrow = today.AddDays(1);
        var thisweekFirstDay = today.AddDays(0 - today.DayOfWeek);
        var thisweekLastDay = thisweekFirstDay.AddDays(6);
        var upcomingFirstDay = tomorrow.AddDays(1);
        var upcomingLastDay = System.Data.SqlTypes.SqlDateTime.MaxValue; // DateTime.MaxValue;
        var pastFirstDay = System.Data.SqlTypes.SqlDateTime.MinValue; // DateTime.MinValue (this is not valid at SQLServer!)
        var pastLastDay = thisweekFirstDay.AddDays(-1);
        
        todayBookings = db.Query(sqlGetBookingsByDateRange, u.UserID, today, today);
        tomorrowBookings = db.Query(sqlGetBookingsByDateRange, u.UserID, tomorrow, tomorrow);
        thisweekBookings = db.Query(sqlGetBookingsByDateRange, u.UserID, thisweekFirstDay, thisweekLastDay);
        upcomingBookings = db.Query(sqlGetBookingsByDateRange, u.UserID, upcomingFirstDay, upcomingLastDay);
        pastBookings = db.Query(sqlGetBookingsByDateRange, u.UserID, pastFirstDay, pastLastDay);
    }
    
    /* Some static strings */
    string strNewBookingRequestSingular = "new booking request";
    string strNewBookingRequestPlural = "new booking requests";
    string strBookingSingular = "booking";
    string strBookingPlural = "bookings";
}
@functions{
    string getInitialLetter(string text) {
        if (!String.IsNullOrEmpty(text)) {
            // Is not empty, have almost 1 char:
            return text.Substring(0, 1);
        } else {
            return "";
        }
    }
}
@* Print a Booking or BookingRequest *@
@helper printItem(dynamic item) {
    <div class="customer mini-user-info">
        <h5>@item.CustomerFirstName @(getInitialLetter(item.CustomerLastName).ToUpper()).</h5>
        <img class="avatar" alt="Customer Photo" src="@(UrlUtil.LangPath)Profile/Photo/@item.CustomerUserID" width="55" height="55" />
        <a class="view-profile" href="@(UrlUtil.LangPath)Profile/?UserID=@item.CustomerUserID">View profile</a>
    </div>
    <ul class="mini-booking-summary">
        <li>
            <h5>Time:</h5> @*Monday, April 15th, 2012, 11:00am to 2:00pm*@
                    @(item.StartTime.ToLongDateString()),
                    @item.StartTime.ToShortTimeString() to
                    @item.EndTime.ToShortTimeString()
        </li>
        <li>
            <h5>Position:</h5> @item.PositionSingular
        </li>
        <li>
            <h5>Details:</h5> @printItemDetails(item)
        </li>
    </ul>
    <div class="actions">
        <button class="respond">Respond</button>
        <div class="total-price">$@item.TotalPrice</div>
    </div>
}
@helper printItemDetails(dynamic item) {
    /* Copied from Booking/$Payment */
    var sqlGetPricingVars = @"
        SELECT  V.CustomerPricingVariableDisplayText As Name, P.CustomerPricingDataInput As Quantity
        FROM    PricingEstimateDetail As P
                 INNER JOIN
                PricingVariable As V
                  ON V.PricingVariableID = P.PricingVariableID
        WHERE   P.PricingEstimateID = @0
                 AND V.CountryId = @1 AND V.LanguageID = @2
    ";
    var db = Database.Open("sqlloco");
    var i = 0;
    var iprint = "";
    foreach (var pitem in db.Query(sqlGetPricingVars, item.PricingEstimateID, 1, 1)) {
        if (i > 0) {
            iprint = "; ";
        }
        i++;
        @(iprint + pitem.Name + " " + pitem.Quantity)
    }
}

@if (pendingBookingRequests.Count > 0) {
<h3>Need response: 
    <span class="bookings-number">@pendingBookingRequests.Count @(pendingBookingRequests.Count == 1 ? strNewBookingRequestSingular : strNewBookingRequestPlural)</span>
</h3>
<ul class="bookings-list pending-booking-requests">
    @foreach (var item in pendingBookingRequests) {
        @printItem(item)
    }
</ul>
}

@if (todayBookings.Count > 0) {
<h3>Today: 
    <span class="bookings-number">@todayBookings.Count @(todayBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
</h3>
<ul class="bookings-list today-bookings">
    @foreach (var item in todayBookings) {
        @printItem(item)
    }
</ul>
}

@if (tomorrowBookings.Count > 0) {
<h3>Tomorrow: 
    <span class="bookings-number">@tomorrowBookings.Count @(tomorrowBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
</h3>
<ul class="bookings-list tomorrow-bookings">
    @foreach (var item in tomorrowBookings) {
        @printItem(item)
    }
</ul>
}

@if (thisweekBookings.Count > 0) {
<h3>This week: 
    <span class="bookings-number">@thisweekBookings.Count @(thisweekBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
</h3>
<ul class="bookings-list this-week-bookings">
    @foreach (var item in thisweekBookings) {
        @printItem(item)
    }
</ul>
}

@if (upcomingBookings.Count > 0) {
<h3>Upcoming: 
    <span class="bookings-number">@upcomingBookings.Count @(upcomingBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
</h3>
<ul class="bookings-list upcoming-bookings">
    @foreach (var item in upcomingBookings) {
        @printItem(item)
    }
</ul>
}

@if (pastBookings.Count > 0) {
<h3>Past: 
    <span class="bookings-number">@pastBookings.Count @(pastBookings.Count == 1 ? strBookingSingular : strBookingPlural)</span>
</h3>
<ul class="bookings-list past-bookings">
    @foreach (var item in pastBookings) {
        @printItem(item)
    }
</ul>
}