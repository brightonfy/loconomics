@using Braintree;
@using WebMatrix.Data;
@{
    var idprefix = "account-payments-bankinfo";
    var user = DashboardFunctions.GetUserRow();
    
    BraintreeGateway gateway = null;
    dynamic bankinfo = null, paymentpreferences = null;
    
    Validation.RequireField("bank_fullname", LcRessources.RequiredField("Full name"));
    Validation.RequireField("bank_accounttype", LcRessources.RequiredField("Account type"));
    Validation.RequireField("bank_abanumber", LcRessources.RequiredField("ABA Number"));
    Validation.RequireField("bank_accountnumber", LcRessources.RequiredField("Account Number"));
    Validation.Add("bank_abanumber", Validator.Integer("The ABA Number must be a nine digit number"));
    Validation.Add("bank_abanumber", Validator.StringLength(9, 9, "The ABA Number must be a nine digit number"));
    Validation.Add("bank_accountnumber", Validator.StringLength(40, 9, "Invalid Account number"));
       
    if (IsPost && Validation.IsValid()) {
        
        try{
            gateway = LcPayment.NewBraintreeGateway();
        } catch {
            ModelState.AddFormError("There was an error communicating with our secure data store, please try again later.");
        }
                    
        if (ModelState.IsValid) {

            // We save data on our database
            var sqlSetProviderTaxForm = @"
            BEGIN TRAN
                UPDATE  providerpaymentpreference WITH (serializable)
                SET     AccountName = @1,
                        ABANumber = @2,
                        LastThreeAccountDigits = @3,
                        ProviderPaymentPreferencyTypeID = @4,
                        Verified = 0,
                        UpdatedDate = getdate(),
                        ModifiedBy = 'sys'
                WHERE   ProviderUserId = @0

                IF @@rowcount = 0
                BEGIN
                    INSERT INTO providerpaymentpreference (ProviderUserId,
                        AccountName, ABANumber, LastThreeAccountDigits,
                        ProviderPaymentPreferencyTypeID, Verified,
                        CreatedDate, UpdatedDate, ModifiedBy)
                    VALUES (@0, @1, @2, @3, @4, 0, getdate(), getdate(), 'sys')
                END
            COMMIT TRAN
            EXEC TestAlertPayment @0
            ";
                
            using (var db = Database.Open("sqlloco")) {
                db.Execute(sqlSetProviderTaxForm, user.UserID,
                    Request["bank_fullname"],
                    Request["bank_abanumber"],
                    // Bank Account Number: ONLY THE THREE LAST DIGITS
                    LcEncryptor.Encrypt(CommonHelpers.GetLastStringChars(Request["bank_accountnumber"], 3)),
                    Request["bank_accounttype"].AsInt()
                );
            }
            
            // Save Bank account number on Braintree
            CustomerRequest request = new CustomerRequest{
                //need to pass in the userid from the cookie
                Id = user.UserID.ToString(),
                CustomerId = user.UserID.ToString(),
                CustomFields = new Dictionary<string,string>{
                    { "loco_bank_account", Request["bank_accountnumber"] }
                }
            };
            // Check if user exists and must be updated, or be created
            Customer customer = null;
            try {
                customer = gateway.Customer.Find(user.UserID.ToString());
            } catch (Braintree.Exceptions.NotFoundException ex){
            }
            Result<Customer> result = null;
            if (customer != null) {
                result = gateway.Customer.Update(user.UserID.ToString(), request);
            } else {
                result = gateway.Customer.Create(request);
            }
            if (result.IsSuccess()){
                CommonHelpers.ReturnJsonResult(0, "Data saved!");
            } else {
                foreach (var row in result.Errors.DeepAll())
                {
                    if (Context.IsDebuggingEnabled) {
                        ModelState.AddFormError(row.Code.ToString() + ": " + row.Message);
                    } else {
                        ModelState.AddFormError(row.Message);
                    }
                }
            }
        }
    }
@*// Try to get the data from this customer, if was previosly saved or user exist at Braintree
try {
    customer = gateway.Customer.Find(user.UserID.ToString());
    PageData["customer"] = customer;
}
//} catch (Braintree.Exceptions.NotFoundException ex){ // Customer don't exist exception
catch { }*@
    using (var db = Database.Open("sqlloco")) {
        paymentpreferences = db.Query(@"
            SELECT  *
            FROM    providerpaymentpreferencetype
            WHERE   Active=1
        ");
        bankinfo = db.QuerySingle(@"
            SELECT  TOP 1 *
            FROM    providerpaymentpreference
            WHERE   ProviderUserID = @0
        ", user.UserID);
    }
}
<p class="setting-instructions">
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer justo lorem, egestas quis fermentum a, rutrum sed justo. Duis nulla tellus.
</p>
<div>
<form method="post" id="@idprefix-form" action="@(UrlUtil.LangPath)Dashboard/$AccountPaymentsBankInfo/" class="ajax ajax-box">
    @CommonHelpers.GetValidationScripts()
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <div class="warning">
        @if (bankinfo != null)
        {
            if (bankinfo.Verified)
            {
            <p>Your bank account was succesfull verified.</p>
            <p>Remember that if you modify some of this data now it will appear as 'not verified' until we verify it again.</p>
            }
            else
            {
                <p>Your bank account was not verified still.</p>
            }
        }
    </div>
    <div class="col col-2 col-2-1">
        <fieldset id="@idprefix-fs-contactinfo" class="contact-info">
            <legend>Name on account:</legend>
            <ul>
                <li><label for="@idprefix-fullname">Full Name:</label><input @Validation.GetHtml("bank_fullname") id="@idprefix-fullname" type="text" name="bank_fullname" value="@(Request["bank_fullname"] ?? (bankinfo != null ? bankinfo.AccountName : ""))"/></li>
            </ul>
        </fieldset>
        <fieldset id="@idprefix-fs-accounttype">
            <legend>Bank Account Type:</legend>
            <ul>
                @foreach (var paymentpreference in paymentpreferences)
                {
                <li><input type="radio" id="@idprefix-accounttype[@paymentpreference.ProviderPaymentPreferenceTypeID]" @Validation.GetHtml("bank_accounttype") name="bank_accounttype" @CommonHelpers.IsChecked(Request["bank_accounttype"] ?? (bankinfo != null ? bankinfo.ProviderPaymentPreferencyTypeID.ToString() : ""), paymentpreference.ProviderPaymentPreferenceTypeID.ToString()) value="@paymentpreference.ProviderPaymentPreferenceTypeID"/>
                <label for="@idprefix-accounttype[@paymentpreference.ProviderPaymentPreferenceTypeID]"><abbr title="@paymentpreference.ProviderPaymentPreferenceTypeDescription">@paymentpreference.ProviderPaymentPreferenceTypeName</abbr></label></li>
                }
            </ul>
        </fieldset>
    </div>
    <div class="col col-2 col-2-2">
        <fieldset id="@idprefix-fs-accountnumber">
            <legend>Bank Account Number:</legend>
            <ul>
                <li><label for="@idprefix-abanumber">ABA Routing Number (9 digits):</label><input type="text" id="@idprefix-abanumber" @Validation.GetHtml("bank_abanumber") name="bank_abanumber" value="@(Request["bank_abanumber"] ?? (bankinfo != null ? bankinfo.ABANumber : ""))"/></li>
                <li><label for="@idprefix-accountnumber">Account Number:</label><input type="text" id="@idprefix-accountnumber" @Validation.GetHtml("bank_accountnumber") name="bank_accountnumber" value="@(Request["bank_accountnumber"] ?? (bankinfo != null ? "*****" + LcEncryptor.Decrypt((string)bankinfo.LastThreeAccountDigits) : ""))"/></li>
            </ul>
        </fieldset>
    </div>
    <fieldset class="actions">
        <button class="save main-action" type="submit">Submit</button>
    </fieldset>
</form>
</div>