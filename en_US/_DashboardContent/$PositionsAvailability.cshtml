@using WebMatrix.Data;
@{
    // Current user data
    var u = DashboardFunctions.GetUserRow();
    // Current position data record:
    var p = DashboardFunctions.GetUserCurrentPos();
    var n = p.PositionID;
    var mDay ="";
    var tDay ="";
    var wDay ="";
    var thDay ="";
    var fDay ="";
    var saDay ="";
    var suDay ="";

    var varSqlInsertAvailFreetime = "EXEC InsertProviderAvailabilityFreeTime @0,@1,@2,@3";
    var varSqlGetAvailTime = "EXEC GetProviderAvailabilityFullSet @0, @1";
    
    // Validation rules go here
    // Validation.AddRequiredField("", "");
    
    if (IsPost && Validation.IsValid()) {
        // Some extra validations with ModelState.AddError("field", "error message")
        // If there are not extra validations, next if-block can be removed
        if (ModelState.IsValid) {
            
            mDay = Request["positionavailability-days-mondays"];
            tDay = Request["positionavailability-days-tuesdays"];
            wDay = Request["positionavailability-days-wednesdays"];
            thDay = Request["positionavailability-days-thursdays"];
            fDay = Request["positionavailability-days-fridays"];
            saDay = Request["positionavailability-days-saturdays"];
            suDay = Request["positionavailability-days-sundays"];
            
            
            
            
            using (var db = Database.Open("sqlloco")) {
                // Save data
                
                if(mDay=="yes" ){

                    db.Execute(varSqlInsertAvailFreetime, u.UserID, 1, Request["positionavailability-hours-mondays-since"], Request["positionavailability-hours-mondays-to"]);
                }

                if (tDay == "yes")
                {

                    db.Execute(varSqlInsertAvailFreetime, u.UserID, 2, Request["positionavailability-hours-tuesdays-since"], Request["positionavailability-hours-tuesdays-to"]);
                }

                if (wDay == "yes")
                {

                    db.Execute(varSqlInsertAvailFreetime, u.UserID, 3, Request["positionavailability-hours-wednesdays-since"], Request["positionavailability-hours-wednesdays-to"]);
                }


                if (thDay == "yes")
                {

                    db.Execute(varSqlInsertAvailFreetime, u.UserID, 4, Request["positionavailability-hours-thursdays-since"], Request["positionavailability-hours-thursdays-to"]);
                }

                if (fDay == "yes")
                {

                    db.Execute(varSqlInsertAvailFreetime, u.UserID, 5, Request["positionavailability-hours-fridays-since"], Request["positionavailability-hours-fridays-to"]);
                }

                if (saDay == "yes")
                {

                    db.Execute(varSqlInsertAvailFreetime, u.UserID, 6, Request["positionavailability-hours-saturdays-since"], Request["positionavailability-hours-saturdays-to"]);
                }

                if (suDay == "yes")
                {

                    db.Execute(varSqlInsertAvailFreetime, u.UserID, 7, Request["positionavailability-hours-sundays-since"], Request["positionavailability-hours-sundays-to"]);
                }      
                // All was fine, AJAX-JSON response
                CommonHelpers.ReturnJsonResult(0, "Availability data was succesful saved!");
            }
        }
    }
    
    // Load availability data to show to the user
    dynamic data = null;
    using (var db = Database.Open("sqlloco")) {
        data = db.Execute(varSqlGetAvailTime, u.UserID, DateTime.Now);
            
        
        
        
        
        
    }
}
@helper printOptionsHours(){
    var firstHour = new TimeSpan(9, 0, 0);
    var lastHour = new TimeSpan(18, 30, 0);
    var interval = new TimeSpan(0, 30, 0);
    for (var hour = firstHour; hour <= lastHour; hour += interval)
    {
        <option value="@hour.ToString("c")">@((new DateTime(hour.Ticks)).ToShortTimeString())</option>
    }
}
@helper printHourPerDayElements(){
    var days = new string[]{"Mondays", "Tuesdays", "Wednesdays", "Thursdays", "Fridays", "Saturdays", "Sundays"};
    foreach (var day in days){
    <li>
        <span class="day">@day</span>
        <select name="positionavailability-hours-@day.ToLower()-since">@printOptionsHours()</select>
        and
        <select name="positionavailability-hours-@day.ToLower()-to">@printOptionsHours()</select>
    </li>
    }
}
@helper printDaysElements(){
    var days = new string[]{"Mondays", "Tuesdays", "Wednesdays", "Thursdays", "Fridays", "Saturdays", "Sundays"};
    foreach (var day in days){
    <li>
        <span class="day">@day</span>
        <label>Yes<input name="positionavailability-days-@day.ToLower()" value="yes" type="radio"/></label>
        <label>No<input name="positionavailability-days-@day.ToLower()" value="no" type="radio"/></label>
    </li>
    }
}
@helper printHoursBooking(string what){
    <select name="positionsavailability-booking-@what">
        <option value="1">1 Hour</option>
        <option value="2">2 Hours</option>
        <option value="3">3 Hours</option>
        <option value="4">4 Hours</option>
        <option value="5">5 Hours</option>
        <option value="6">6 Hours</option>
    </select>
}

<p class="setting-instructions">
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer justo lorem, egestas quis fermentum a, rutrum sed justo. Duis nulla tellus.
</p>
<div>
<form action="@(UrlUtil.LangPath)Dashboard/$PositionsAvailability/" method="post" class="positionavailability ajax ajax-box" id="position#@(n)-availability">
    <input type="hidden" name="PositionID" value="@p.PositionID"/>
    @CommonHelpers.GetValidationScripts()
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="positionavailability-days">
        <legend>I'm available these days:</legend>
        <ul>
            @printDaysElements()
        </ul>
    </fieldset>
    <fieldset class="positionavailability-hours">
        <legend>Generally between these hours:</legend>
        <ul>
            @printHourPerDayElements()
        </ul>
    </fieldset>
    <fieldset class="positionavailability-program has-confirm">
        <legend>I already use a calendar program:</legend>
        <div class="confirm positionavailability-use-program">
            <label>Yes<input type="radio" name="positionavailability-use-program" value="yes"/></label>
            <label>No<input type="radio" name="positionavailability-use-program" value="no"/></label>
        </div>
        <ul>
            <li class="positionavailability-program-type">
                <label for="position#@(n)-availability-program-type">Which type?</label>
                <select name="positionavailability-program-type" id="position#@(n)-availability-program-type">
                    <option value="gmail">Gmail</option>
                </select>
            </li>
            <li class="positionavailability-program-url">
                <label for="position#@(n)-availability-program-url">Public URL:</label>
                <input type="text" name="positionavailability-program-url" id="position#@(n)-availability-program-url"/>
            </li>
        </ul>
    </fieldset>
    <fieldset class="positionavailability-booking">
        <legend>I require:</legend>
        <label>Time in advance of bookings:@printHoursBooking("advance")</label>
        <label>Minimun booking time:@printHoursBooking("min")</label>
        <label>Maximum booking time:@printHoursBooking("max")</label>
        <label>Minimun time between bookings:@printHoursBooking("between")</label>
    </fieldset>
    <fieldset class="actions">
        <button class="save main-action" type="submit">Save</button>
    </fieldset>
</form>
</div>