@using WebMatrix.Data;
@{
    // Current user data
    var u = DashboardFunctions.GetUserRow();
    // Current position data record:
    var p = DashboardFunctions.GetUserCurrentPos();
    var n = p.PositionID;
    // From 0 (sunday) to 6 (saturday), true: is available
    bool[] availDates = new bool[7];
    // From 0 (sunday) to 6 (saturday), sub-index 0: start time, sub-index 1: end time
    TimeSpan[,] dateHours = new TimeSpan[7,2];
    bool useCalendarProgram = false;
    var programType = "";
    var programURL = "";
    var advanceTime = 0;
    var minTime = 0;
    var maxTime = 0;
    var betweenTime = 0;

    // fullset needed?
    //var varSqlGetAvailTime = "EXEC GetProviderAvailabilityFullSet @0, @1";
    var varSQLGetUserFreeTimeSettings = "EXEC GetUserFreeTimeSettings @0";
    var varSQLGetUserCalendarProviderAttributes = "EXEC GetUserCalendarProviderAttributes @0";
    
    if (!IsPost) {
        dynamic hoursData = null, atts = null;
        using (var db = Database.Open("sqlloco")) {
            //data = db.Query(varSqlGetAvailTime, u.UserID, DateTime.Now);
            hoursData = db.Query(varSQLGetUserFreeTimeSettings ,u.UserID);
            atts = db.QuerySingle(varSQLGetUserCalendarProviderAttributes, u.UserID);  
        }
        foreach (var dayHours in hoursData) {
            if (dayHours.DayofWeek != null && 
                dayHours.DayofWeek > -1 &&
                dayHours.DayofWeek < 7) {
                availDates[dayHours.DayofWeek] = true;
                dateHours[dayHours.DayofWeek, 0] = dayHours.StartTime;
                dateHours[dayHours.DayofWeek, 1] = dayHours.EndTime;
            }
        }
        if (atts != null) {
            useCalendarProgram      = atts.UseCalendarProgram;
            programType             = atts.CalendarType;
            programURL              = atts.CalendarURL;
            advanceTime             = atts.AdvanceTime;
            minTime                 = atts.MinTime;
            maxTime                 = atts.MaxTime;
            betweenTime             = atts.BetweenTime;
        }
    } else {
        for (int d = 0; d < 7; d++) {
            availDates[d]   = Request["availday-" + d.ToString()].AsBool();
            dateHours[d, 0] = Request["day-" + d.ToString() + "-since-hour"].AsDateTime().TimeOfDay;
            dateHours[d, 1] = Request["day-" + d.ToString() + "-to-hour"].AsDateTime().TimeOfDay;
        }
        useCalendarProgram      = Request["use-program"].AsBool();
        programType             = Request["program-type"];
        programURL              = Request["program-url"];
        advanceTime             = Request["advance-time"].AsInt();
        minTime                 = Request["min-time"].AsInt();
        maxTime                 = Request["max-time"].AsInt();
        betweenTime             = Request["between-time"].AsInt();
        
        if (Validation.IsValid()) {
            
            var varSqlInsertAvailFreetime = "EXEC InsertProviderAvailabilityFreeTime @0,@1,@2,@3";
            var varSqlInsertCalendarProviderAttributes = "EXEC dbo.InsertCalendarProviderAttributes @0,@1,@2,@3,@4, @5,@6,@7";

            using (var db = Database.Open("sqlloco")) {
                // Save data

                db.Execute(varSqlInsertCalendarProviderAttributes, u.UserID, 
                    advanceTime,
                    minTime,
                    maxTime,
                    betweenTime,
                    useCalendarProgram,
                    programType,
                    programURL);

                for (int d = 0; d < 7; d++) {
                    if (availDates[d]) {
                        db.Execute(varSqlInsertAvailFreetime, u.UserID,
                            d,
                            dateHours[d, 0],
                            dateHours[d, 1]);
                    }
                }

                // All was fine, AJAX-JSON response
                CommonHelpers.ReturnJsonResult(0, "Availability data was succesful saved!");
            }
        }
    }
}
@helper printOptionsHours(TimeSpan selectedHour){
    var firstHour = new TimeSpan(9, 0, 0);
    var lastHour = new TimeSpan(18, 30, 0);
    var interval = new TimeSpan(0, 30, 0);
    for (var hour = firstHour; hour <= lastHour; hour += interval)
    {
        <option @CommonHelpers.IsSelected(selectedHour.ToString("c"), hour.ToString("c")) value="@hour.ToString("c")">@((new DateTime(hour.Ticks)).ToShortTimeString())</option>
    }
}
@helper printHourPerDayElements(dynamic dateHours){
    var days = new string[]{"Sundays", "Mondays", "Tuesdays", "Wednesdays", "Thursdays", "Fridays", "Saturdays"};

    for (var d = 0; d < 7; d++){
    <li>
        <span class="day">@days[d]</span>
        <select name="day-@d-since-hour">@printOptionsHours(dateHours[d, 0])</select>
        and
        <select name="day-@d-to-hour">@printOptionsHours(dateHours[d, 1])</select>
    </li>
    }
}
@helper printDaysElements(dynamic availDates){
    var days = new string[]{"Sundays",  "Mondays", "Tuesdays", "Wednesdays", "Thursdays", "Fridays", "Saturdays"};
    for (var d = 0; d < 7; d++){
        <li>
            <span class="day">@days[d]</span>
            <label>Yes<input @CommonHelpers.IsChecked(availDates[d].ToString(), "True") name="availday-@d" value="True" type="radio"/></label>
            <label>No<input @CommonHelpers.IsChecked(availDates[d].ToString(), "False") name="availday-@d" value="False" type="radio"/></label>
        </li>
    }
}
@helper printHoursBooking(string what, string selected){
    <select name="@(what)-time">
        <option value="1">1 Hour</option>
        @for(var h = 2; h < 10; h++) {
            <option @CommonHelpers.IsSelected(selected, h.ToString()) value="@h">@h Hours</option>
        }
    </select>
}

<p class="setting-instructions">
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer justo lorem, egestas quis fermentum a, rutrum sed justo. Duis nulla tellus.
</p>
<div>
<form action="@(UrlUtil.LangPath)Dashboard/$PositionsAvailability/" method="post" class="positionavailability ajax ajax-box" id="position#@(n)-availability">
    <input type="hidden" name="PositionID" value="@p.PositionID"/>
    @CommonHelpers.GetValidationScripts()
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset class="positionavailability-days">
        <legend>I'm available these days:</legend>
        <ul>
            @printDaysElements(availDates)
        </ul>
    </fieldset>
    <fieldset class="positionavailability-hours">
        <legend>Generally between these hours:</legend>
        <ul>
            @printHourPerDayElements(dateHours)
        </ul>
    </fieldset>
    <fieldset class="positionavailability-program has-confirm">
        <legend>I already use a calendar program:</legend>

        <div class="confirm positionavailability-use-program">
            <label>Yes<input @CommonHelpers.IsChecked(useCalendarProgram.ToString(), "True") type="radio" name="use-program" value="True"/></label>
            <label>No<input @CommonHelpers.IsChecked(useCalendarProgram.ToString(), "False") type="radio" name="use-program" value="False"/></label>
        </div>
        <ul>
            <li class="positionavailability-program-type">
                <label for="position#@(n)-availability-program-type">Which type?</label>
                <select name="program-type" id="position#@(n)-availability-program-type">
                    <option @CommonHelpers.IsSelected(programType, "gmail") value="gmail">Gmail</option>
                </select>
            </li>
            <li class="positionavailability-program-url">
                <label for="position#@(n)-availability-program-url">Public URL:</label>
                <input type="text" name="program-url" value="@programURL" id="position#@(n)-availability-program-url"/>
            </li>
        </ul>
    </fieldset>
    <fieldset class="positionavailability-booking">
        <legend>I require:</legend>
        <label>Time in advance of bookings:@printHoursBooking("advance", advanceTime.ToString())</label>
        <label>Minimun booking time:@printHoursBooking("min", minTime.ToString())</label>
        <label>Maximum booking time:@printHoursBooking("max", maxTime.ToString())</label>
        <label>Minimun time between bookings:@printHoursBooking("between", betweenTime.ToString())</label>
    </fieldset>
    <fieldset class="actions">
        <button class="save main-action" type="submit">Save</button>
    </fieldset>
</form>
</div>