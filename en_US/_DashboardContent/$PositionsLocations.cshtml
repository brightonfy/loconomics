@using WebMatrix.Data;
@{
    var u = DashboardFunctions.GetUserRow();
    // Current position data record:
    var p = DashboardFunctions.GetUserCurrentPos();
    var n = p.PositionID;
    
    if (IsPost) {
        var sqlRemoveLoc = @"
            DELETE FROM ServiceAddress
            WHERE ServiceAddressID = @0

            IF @@ERROR <> 0 BEGIN
                -- Non deletable serviceaddress, because is linked, simply 'unactive'
                UPDATE ServiceAddress SET
                    Active = 0
                WHERE   ServiceAddressID = @0
            END
        ";
        var sqlInsLoc = @"
            INSERT INTO ServiceAddress (
                UserID, PositionID, AddressTypeID, NickName, AddressLine1, AddressLine2,
                City, StateProvinceID, PostalCodeID, CountryID, 
                ServicesPerformedAtLocation, TravelFromLocation,
                CreatedDate, UpdatedDate, ModifiedBy, Active
            ) VALUES (
                @0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, getdate(), getdate(), 'sys', 1
            )
        ";
        var sqlUpdLoc = @"
            UPDATE ServiceAddress SET
                NickName = @1,
                AddressLine1 = @2,
                AddressLine2 = @3,
                City = @4,
                StateProvinceID = @5,
                PostalCodeID = @6,
                CountryID = @7
            WHERE   ServiceAddressID = @0
        ";
        var removedLocs = Request.Form.GetValues("remove-locations");
        var locs = Request.Form.GetValues("locations");
        using (var db = Database.Open("sqlloco")) {
            if (locs != null) {
                foreach (string loc in locs) {
                    var locdata = HttpUtility.ParseQueryString(loc, System.Text.Encoding.UTF8);
                
                    try{
                        var locid = locdata["location-id"].AsInt();
                        locdata["location-zipcode"].AsInt();
                        // Validate Postal Code
                        var state = locdata["location-state"].AsInt();
                        var zip = LcValidators.ValidateZipCode(locdata["location-zipcode"], state);
                        if (zip == 0) {
                            ModelState.AddFormError("Location '" + locdata["location-name"] + "': Postal Code not valid");
                        } else {
                            if (locid == 0) {
                                // @2 = 12 --others
                                db.Execute(sqlInsLoc,
                                    u.UserID, p.PositionID, 12, 
                                    locdata["location-name"],
                                    locdata["location-addressline1"],
                                    locdata["location-addressline2"],
                                    locdata["location-city"],
                                    state,
                                    zip,
                                    1, // CountryID
                                    locdata["location-type"] == "work",
                                    locdata["location-type"] == "travel"
                                );
                            } else {
                                db.Execute(sqlUpdLoc,
                                    locdata["location-id"].AsInt(),
                                    locdata["location-name"],
                                    locdata["location-addressline1"],
                                    locdata["location-addressline2"],
                                    locdata["location-city"],
                                    state,
                                    zip,
                                    1 // CountryID
                                );
                            }
                        }
                    }catch{}
                }
            }
            if (removedLocs != null) {
                foreach (string loc in removedLocs) {
                    db.Execute(sqlRemoveLoc, loc);
                }
            }
        }
        
        if (ModelState.IsValid) {
            CommonHelpers.ReturnJsonResult(0, "Locations saved");
        }
    }

    var sqlGetLocations = @"
        SELECT  L.*,
                PC.PostalCode,
                SP.StateProvinceCode,
                SP.StateProvinceName
        FROM    ServiceAddress As L
                 INNER JOIN
                StateProvince As SP
                  ON L.StateProvinceID = SP.StateProvinceID
                 INNER JOIN
                PostalCode As PC
                  On PC.PostalCodeID = L.PostalCodeID
        WHERE   L.UserID = @0 AND Active = 1
                 AND L.NickName is not null AND L.NickName not like ''
    ";
    var sqlcondWorkLocations = " AND ServicesPerformedAtLocation = 1";
    var sqlcondTravelLocations = " AND TravelFromLocation = 1";
    dynamic workLocations = null, travelLocations = null;
    using (var db = Database.Open("sqlloco")) {
        workLocations = db.Query(sqlGetLocations + sqlcondWorkLocations, u.UserID);
        travelLocations = db.Query(sqlGetLocations + sqlcondTravelLocations, u.UserID);
    }
}
@helper printDistanceSelect(){
    <select name="positionlocations-maxdistance">
        <option value="1">1 mile</option>
        <option value="5">5 miles</option>
        <option value="10">10 miles</option>
        <option value="25">25 miles</option>
    </select>
}
@helper printAddress(IDictionary<string, object> addressDetails){
        <div class="address" data-location-id="@addressDetails["id"]" data-location-name="@addressDetails["name"]">
            <span class="address-name">@addressDetails["name"]</span>
            <span class="address-line">
                <span class="address-line1">@addressDetails["addressline1"]</span>
                <span class="address-line2">@addressDetails["addressline2"]</span>
            </span>
            <span class="address-city">@addressDetails["city"]</span>
            <span class="address-state">@addressDetails["state"]</span>
            <span class="address-zipcode">@addressDetails["zipcode"]</span>
            <div class="tools">
                <a href="#" class="edit">Edit</a>
                <a href="#" class="map">Map</a>
                <a href="#" class="remove">Remove</a>
            </div>
        </div>
}
<p class="setting-instructions">
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer justo lorem, egestas quis fermentum a, rutrum sed justo. Duis nulla tellus.
</p>
<div class="edit-popup-container">
    <form action="@(UrlUtil.LangPath)Dashboard/$PositionsLocations/" method="post" class="positionlocations ajax ajax-box" id="position#@(n)-locations">
        <input type="hidden" name="PositionID" value="@p.PositionID"/>
        @* 
        In javascript will be created hidden elements with location data to be created or updated with name=locations as next example
        <input type="hidden" name="locations" value="location-edit-form data as form-query-string serialized format"/>
        In javascript, will be created hidden elements with location id's to be deleted as next example
        <input type="hidden" name="remove-locations" value="32"/>
         *@
        @CommonHelpers.GetValidationScripts()
        @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
        <div class="col col-2 col-2-1">
            <fieldset class="positionlocations-itravel has-confirm">
                <legend>I travel to clients:</legend>
                <div class="confirm positionlocations-itravel-confirm">
                    <label>Yes<input type="radio" @CommonHelpers.IsChecked("True", (travelLocations.Count > 0).ToString()) name="positionlocations-itravel" value="True"/></label>
                    <label>No<input type="radio" @CommonHelpers.IsChecked("True", (travelLocations.Count == 0).ToString()) name="positionlocations-itravel" value="False"/></label>
                </div>
                <a href="#" class="addlocation" data-location-type="travel">Add location</a>
                <fieldset class="positionlocations-itravelfrom">
                    <legend>I travel from this location (one only):</legend>
                    <ul class="travel-locations">
                    @foreach (var location in travelLocations)
                    {
                        <li>
                        @printAddress(new Dictionary<string, object>() {
                            { "id", location.ServiceAddressID },
                            { "name", location.NickName }, 
                            { "addressline1", location.AddressLine1},
                            { "addressline2", location.AddressLine2},
                            { "city", location.City }, 
                            { "state", location.StateProvinceCode },
                            { "zipcode", location.PostalCode }
                        })
                        </li>
                    }
                    </ul>
                    <label>I will travel up to @printDistanceSelect() from this location.</label>
                </fieldset>
                <fieldset class="positionlocations-itravelusing">
                    <legend>I travel to jobs using primarily:</legend>
                    <label><input type="radio" name="positionlocations-itravelusing" value="public"/>Public transport</label>
                    <label><input type="radio" name="positionlocations-itravelusing" value="walk"/>Walk</label>
                    <label><input type="radio" name="positionlocations-itravelusing" value="automobile"/>Automobile</label>
                </fieldset>
            </fieldset>
        </div>
        <div class="col col-2 col-2-2">
            <fieldset class="positionlocations-servicelocations has-confirm">
                <legend>I perform services at specific locations:</legend>
                <div class="positionlocations-servicelocations-confirm confirm">
                    <label>Yes<input @CommonHelpers.IsChecked("True", (workLocations.Count > 0).ToString()) type="radio" name="positionlocations-iworkon" value="True"/></label>
                    <label>No<input @CommonHelpers.IsChecked("True", (workLocations.Count == 0).ToString()) type="radio" name="positionlocations-iworkon" value="False"/></label>
                </div>
                <a href="#" class="addlocation" data-location-type="work">Add location</a>
                <ul class="work-locations">
                    @foreach (var location in workLocations)
                    {
                        <li>
                        @printAddress(new Dictionary<string, object>() {
                            { "id", location.ServiceAddressID },
                            { "name", location.NickName }, 
                            { "addressline1", location.AddressLine1},
                            { "addressline2", location.AddressLine2},
                            { "city", location.City }, 
                            { "state", location.StateProvinceCode },
                            { "zipcode", location.PostalCode }
                        })
                        </li>
                    }
                </ul>
            </fieldset>
        </div>
        <fieldset class="actions">
            <button class="save main-action" type="submit">Save</button>
        </fieldset>
    </form>
    <form action="#" method="post" class="location-edit-form">
        <fieldset class="location-edit-panel edit-popup">
            <div class="readonly-location-base">
                @printAddress(new Dictionary<string, object>() {
                    { "id", 0 },
                    { "name", "" }, 
                    { "addressline1", ""},
                    { "addressline2", ""},
                    { "city", "" }, 
                    { "state", "" },
                    { "zipcode", "" }
                })
            </div>
            <div class="edit-location">
                <input type="hidden" name="location-id" value="0" />
                <input type="hidden" name="location-type" value="" />
                <ul>
                    <li class="location-name">
                        <label>Name: <input type="text" name="location-name" data-val="true" data-val-required="Location Name is required"/></label>
                        <span data-valmsg-replace="true" data-valmsg-for="location-name" class="field-validation-valid"></span>
                    </li>
                    <li class="location-addressline location-addressline1">
                        <label>Address Line 1: <input type="text" name="location-addressline1" data-val="true" data-val-required="Address Line 1 is required"/></label>
                        <span data-valmsg-replace="true" data-valmsg-for="location-addressline1" class="field-validation-valid"></span>
                    </li>
                    <li class="location-addressline location-addressline2">
                        <label>Address Line 2: <input type="text" name="location-addressline2" /></label>
                    </li>
                    <li class="location-city">
                        <label>City: <input type="text" name="location-city" data-val="true" data-val-required="City is required"/></label>
                        <span data-valmsg-replace="true" data-valmsg-for="location-city" class="field-validation-valid"></span>
                    </li>
                    <li class="location-state">
                        <label>State: 
                            <select name="location-state" data-val="true" data-val-required="State is required">
                                @CommonHelpers.StateProvinceOptions(0)
                            </select>
                            <span data-valmsg-replace="true" data-valmsg-for="location-state" class="field-validation-valid"></span>
                        </label>
                    </li>
                    <li class="location-zipcode">
                        <label>Zip Code: <input type="text" name="location-zipcode" data-val="true" data-val-required="Zip Code is required"/></label>
                        <span data-valmsg-replace="true" data-valmsg-for="location-zipcode" class="field-validation-valid"></span>
                    </li>
                </ul>
                <div class="actions">
                    <button class="button cancel fancy" type="button">Cancel</button>
                    <button class="button save item-action" type="button">Save location</button>        
                </div>
            </div>
        </fieldset>
    </form>
</div>