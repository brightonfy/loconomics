@using WebMatrix.Data;
@{
    var u = DashboardFunctions.GetUserRow();
    // Current position data record:
    var p = DashboardFunctions.GetUserCurrentPos();
    var n = p.PositionID;
    dynamic workLocations = null, travelLocations = null;
    var postedLocations = new Dictionary<string,System.Collections.Specialized.NameValueCollection>();
    var postedRemovedLocs = new List<int>();
    
    if (IsPost) {
        var sqlRemoveLoc = @"
            DELETE FROM ServiceAddress
            WHERE ServiceAddressID = @0

            IF @@ERROR <> 0 BEGIN
                -- Non deletable serviceaddress, because is linked, simply 'unactive'
                UPDATE ServiceAddress SET
                    Active = 0
                WHERE   ServiceAddressID = @0
            END
        ";
        var sqlInsLoc = @"
            INSERT INTO ServiceAddress (
                UserID, PositionID, AddressTypeID, NickName, AddressLine1, AddressLine2,
                City, StateProvinceID, PostalCodeID, CountryID, 
                ServicesPerformedAtLocation, TravelFromLocation,
                CreatedDate, UpdatedDate, ModifiedBy, Active
            ) VALUES (
                @0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, getdate(), getdate(), 'sys', 1
            )
        ";
        var sqlUpdLoc = @"
            UPDATE ServiceAddress SET
                NickName = @1,
                AddressLine1 = @2,
                AddressLine2 = @3,
                City = @4,
                StateProvinceID = @5,
                PostalCodeID = @6,
                CountryID = @7
            WHERE   ServiceAddressID = @0
        ";
        var sqlSetLocationPreferences = @"
            UPDATE ServiceAddress SET
                ServiceRadiusFromLocation = @2,
                TransportType = @3
            WHERE   UserID = @0
                     AND
                    PositionID = @1
                     AND
                    TravelFromLocation = 1
        ";
        var removedLocs = Request.Form.GetValues("remove-locations");
        var locs = Request.Form.GetValues("locations");
        using (var db = Database.Open("sqlloco")) {
            if (locs != null) {
                foreach (string loc in locs) {
                    var locdata = HttpUtility.ParseQueryString(loc, System.Text.Encoding.UTF8);
                    var locid = locdata["location-id"].AsInt();
                    bool locerror = false;
                    
                    try{
                        // Validate Postal Code
                        var state = locdata["location-state"].AsInt();
                        var zip = LcValidators.ValidateZipCode(locdata["location-zipcode"], state);
                        if (zip == 0) {
                            ModelState.AddFormError("Location '" + locdata["location-name"] + "': Postal Code not valid");
                            locerror = true;
                        } else {
                            if (locid == 0) {
                                // @2 = 12 --others
                                db.Execute(sqlInsLoc,
                                    u.UserID, p.PositionID, 12, 
                                    locdata["location-name"],
                                    locdata["location-addressline1"],
                                    locdata["location-addressline2"],
                                    locdata["location-city"],
                                    state,
                                    zip,
                                    1, // CountryID
                                    locdata["location-type"] == "work" ? 1 : 0,
                                    locdata["location-type"] == "travel" ? 1 : 0
                                );
                            } else {
                                db.Execute(sqlUpdLoc,
                                    locdata["location-id"].AsInt(),
                                    locdata["location-name"],
                                    locdata["location-addressline1"],
                                    locdata["location-addressline2"],
                                    locdata["location-city"],
                                    state,
                                    zip,
                                    1 // CountryID
                                );
                            }
                        }
                    }catch (Exception ex){
                        ModelState.AddFormError("There was an error saving the data " + ex.Message);
                        locerror = true;
                    }
                    if (locerror) {
                        // Saving location in an index for post-error recovering
                        locdata.Add("original-posted-value", loc);
                        if (locid > 0) {
                            postedLocations.Add("LOCID" + locid.ToString(), locdata);
                        } else {
                            postedLocations.Add(locdata["location-editor-id"], locdata);
                        }
                    }
                }
            }
            if (removedLocs != null) {
                foreach (string loc in removedLocs) {
                    db.Execute(sqlRemoveLoc, loc);
                    // Saving removed ID for post-error recovering
                    postedRemovedLocs.Add(loc.AsInt());
                }
            }
            // Save location preferences:
            var transportTypeId = Request["positionlocations-itravelusing"].AsInt();
            var travelRadius = Request["positionlocations-maxdistance"];
            db.Execute(sqlSetLocationPreferences, u.UserID, p.PositionID, travelRadius, transportTypeId);
        }
        
        if (ModelState.IsValid) {
            // To avoid duplications when posting form several times, this needs to be
            // reset after every change posted, return html with a saved message instead json
            //CommonHelpers.ReturnJsonResult(0, "Locations saved");
        }
    }

    var sqlGetLocations = @"
        SELECT  L.*,
                PC.PostalCode,
                SP.StateProvinceCode,
                SP.StateProvinceName
        FROM    ServiceAddress As L
                 INNER JOIN
                StateProvince As SP
                  ON L.StateProvinceID = SP.StateProvinceID
                 INNER JOIN
                PostalCode As PC
                  On PC.PostalCodeID = L.PostalCodeID
        WHERE   L.UserID = @0
                 AND L.PositionID = @1
                 AND Active = 1
                 AND L.NickName is not null AND L.NickName not like ''
    ";
    var sqlGetLocationPreferences = @"
        SELECT  TOP 1 ServiceRadiusFromLocation, TransportType
        FROM    ServiceAddress
        WHERE   Active = 1
                    AND
                UserID = @0
                    AND
                PositionID = @1
                    AND
                TravelFromLocation = 1
    ";
    var sqlcondWorkLocations = " AND ServicesPerformedAtLocation = 1";
    var sqlcondTravelLocations = " AND TravelFromLocation = 1";
    var sqlgetTransports = @"
        SELECT *
        FROM    TransportType
        WHERE   Active = 1
    ";
    dynamic transports = null, preferences = null;
    using (var db = Database.Open("sqlloco")) {
        workLocations = db.Query(sqlGetLocations + sqlcondWorkLocations, u.UserID, p.PositionID);
        travelLocations = db.Query(sqlGetLocations + sqlcondTravelLocations, u.UserID, p.PositionID);
        transports = db.Query(sqlgetTransports);
        preferences = db.QuerySingle(sqlGetLocationPreferences, u.UserID, p.PositionID);
    }
    var transportType = preferences == null ? "" : preferences.TransportType.ToString();
    var serviceradius = preferences == null ? "" : preferences.ServiceRadiusFromLocation.ToString();
}
@helper printDistanceSelect(string selected){
    <select name="positionlocations-maxdistance">
        <option @CommonHelpers.IsSelected(selected, "1") value="1">1 mile</option>
        <option @CommonHelpers.IsSelected(selected, "5") value="5">5 miles</option>
        <option @CommonHelpers.IsSelected(selected, "10") value="10">10 miles</option>
        <option @CommonHelpers.IsSelected(selected, "25") value="25">25 miles</option>
    </select>
}
@helper printAddress(IDictionary<string, object> addressDetails){
    var contId = (string)addressDetails["container-id"];
    var cid = String.IsNullOrWhiteSpace(contId) ? "" : "id='" + contId + "'";
        <div class="address" @Html.Raw(cid) data-location-id="@addressDetails["id"]" data-location-name="@addressDetails["name"]">
            <span class="address-name">@addressDetails["name"]</span>
            <span class="address-line">
                <span class="address-line1">@addressDetails["addressline1"]</span>
                <span class="address-line2">@addressDetails["addressline2"]</span>
            </span>
            <span class="address-city">@addressDetails["city"]</span>
            <span class="address-state">@addressDetails["state"]</span>
            <span class="address-zipcode">@addressDetails["zipcode"]</span>
            <div class="tools">
                <a href="#" class="edit">Edit</a>
                <a href="#" class="map">Map</a>
                <a href="#" class="remove">Remove</a>
            </div>
        </div>
}
<p class="setting-instructions">
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer justo lorem, egestas quis fermentum a, rutrum sed justo. Duis nulla tellus.
</p>
<div class="edit-popup-container">
    <form action="@(UrlUtil.LangPath)Dashboard/$PositionsLocations/" method="post" class="positionlocations ajax ajax-box" id="position#@(n)-locations">
        <input type="hidden" name="PositionID" value="@p.PositionID"/>
        @* 
        In javascript will be created hidden elements with location data to be created or updated with name=locations as next example
        <input type="hidden" name="locations" value="location-edit-form data as form-query-string serialized format"/>
        In javascript, will be created hidden elements with location id's to be deleted as next example
        <input type="hidden" name="remove-locations" value="32"/>
        If we are in IsPost, we restore posted values:
         *@
        @foreach (var l in postedLocations)
        {
            <input type="hidden" name="locations" value="@l.Value["original-posted-value"]" id="HIDE-@l.Value["location-editor-id"]" />
        }
        @foreach (var l in postedRemovedLocs)
        {
            <input type="hidden" name="remove-locations" value="@l.ToString()" id="HIDE-REMOVED-LOCATION-@l.ToString()" />
        }
        @CommonHelpers.GetValidationScripts()
        @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
        @if (IsPost && ModelState.IsValid)
        {
            <div class="saved info success">Locations saved!</div>
        }
        <div class="col col-2 col-2-1">
            <fieldset class="positionlocations-itravel has-confirm locations-set" data-location-type="travel">
                <legend>I travel to clients:</legend>
                <div class="confirm positionlocations-itravel-confirm">
                    <label>Yes<input type="radio" @CommonHelpers.IsChecked("True", (travelLocations.Count > 0).ToString()) name="positionlocations-itravel" value="True"/></label>
                    <label>No<input type="radio" @CommonHelpers.IsChecked("True", (travelLocations.Count == 0).ToString()) name="positionlocations-itravel" value="False"/></label>
                </div>
                <a href="#" class="addlocation">Add location</a>
                <fieldset class="positionlocations-itravelfrom">
                    <legend>I travel from this location:</legend>
                    <ul class="travel-locations">
                    @foreach (var location in travelLocations)
                    {
                        <li>
                        @* Must be checked the posted data too, to recover data when a post error happen.
                            If there is not posted data, database location is showed.
                         *@
                        @if (!postedRemovedLocs.Contains((int)location.ServiceAddressID))
                        {
                            if (postedLocations.ContainsKey("LOCID" + location.ServiceAddressID.ToString()))
                            {
                                var l = postedLocations["LOCID" + location.ServiceAddressID.ToString()];
                                @printAddress(new Dictionary<string, object>() {
                                    { "container-id", l["location-editor-id"] },
                                    { "id", l["location-id"] },
                                    { "name", l["location-name"] },
                                    { "addressline1", l["location-addressline1"]},
                                    { "addressline2", l["location-addressline2"]},
                                    { "city", l["location-city"] },
                                    { "state", l["location-state-code"] },
                                    { "zipcode", l["location-zipcode"] }
                                })
                                postedLocations.Remove("LOCID" + location.ServiceAddressID.ToString());
                            }
                            else
                            {
                                @printAddress(new Dictionary<string, object>() {
                                    { "container-id", "" },
                                    { "id", location.ServiceAddressID },
                                    { "name", location.NickName },
                                    { "addressline1", location.AddressLine1},
                                    { "addressline2", location.AddressLine2},
                                    { "city", location.City },
                                    { "state", location.StateProvinceCode },
                                    { "zipcode", location.PostalCode }
                                })
                            }
                        }
                        </li>
                    }
                    @foreach (var location in postedLocations)
                    {
                        var l = location.Value;
                        // Only type 'travel' locations
                        if (l["location-type"] == "travel")
                        {
                            <li>
                            @printAddress(new Dictionary<string, object>() {
                                { "container-id", l["location-editor-id"] },
                                { "id", l["location-id"] },
                                { "name", l["location-name"] },
                                { "addressline1", l["location-addressline1"]},
                                { "addressline2", l["location-addressline2"]},
                                { "city", l["location-city"] },
                                { "state", l["location-state-code"] },
                                { "zipcode", l["location-zipcode"] }
                            })
                            </li>
                        }
                    }
                    </ul>
                    <label>I will travel up to @printDistanceSelect(Request["positionlocations-maxdistance"] ?? serviceradius) from this location.</label>
                </fieldset>
                <fieldset class="positionlocations-itravelusing">
                    <legend>I travel to jobs using primarily:</legend>
                    @foreach (var t in transports)
                    {
                    <label><input type="radio" @CommonHelpers.IsChecked(t.TransportTypeID.ToString(), Request["positionlocations-itravelusing"] ?? transportType) name="positionlocations-itravelusing" value="@t.TransportTypeID"/>@t.TransportTypeName</label>
                    }
                </fieldset>
            </fieldset>
        </div>
        <div class="col col-2 col-2-2">
            <fieldset class="positionlocations-servicelocations has-confirm locations-set" data-location-type="work">
                <legend>I perform services at specific locations:</legend>
                <div class="positionlocations-servicelocations-confirm confirm">
                    <label>Yes<input @CommonHelpers.IsChecked("True", (workLocations.Count > 0).ToString()) type="radio" name="positionlocations-iworkon" value="True"/></label>
                    <label>No<input @CommonHelpers.IsChecked("True", (workLocations.Count == 0).ToString()) type="radio" name="positionlocations-iworkon" value="False"/></label>
                </div>
                <a href="#" class="addlocation">Add location</a>
                <ul class="work-locations">
                    @foreach (var location in workLocations)
                    {
                        <li>
                        @* Must be checked the posted data too, to recover data when a post error happen.
                            If there is not posted data, database location is showed.
                         *@
                        @if (!postedRemovedLocs.Contains((int)location.ServiceAddressID))
                        {
                            if (postedLocations.ContainsKey("LOCID" + location.ServiceAddressID.ToString()))
                            {
                                var l = postedLocations["LOCID" + location.ServiceAddressID.ToString()];
                                @printAddress(new Dictionary<string, object>() {
                                    { "container-id", l["location-editor-id"] },
                                    { "id", l["location-id"] },
                                    { "name", l["location-name"] },
                                    { "addressline1", l["location-addressline1"]},
                                    { "addressline2", l["location-addressline2"]},
                                    { "city", l["location-city"] },
                                    { "state", l["location-state-code"] },
                                    { "zipcode", l["location-zipcode"] }
                                })
                                postedLocations.Remove("LOCID" + location.ServiceAddressID.ToString());
                            }
                            {
                                @printAddress(new Dictionary<string, object>() {
                                   { "container-id", "" },
                                   { "id", location.ServiceAddressID },
                                    { "name", location.NickName },
                                    { "addressline1", location.AddressLine1},
                                    { "addressline2", location.AddressLine2},
                                    { "city", location.City },
                                    { "state", location.StateProvinceCode },
                                    { "zipcode", location.PostalCode }
                                })
                            }
                        }
                        </li>
                    }
                    @foreach (var location in postedLocations)
                    {
                        var l = location.Value;
                        // Only type 'work' locations
                        if (l["location-type"] == "work")
                        {
                            <li>
                            @printAddress(new Dictionary<string, object>() {
                                { "container-id", l["location-editor-id"] },
                                { "id", l["location-id"] },
                                { "name", l["location-name"] },
                                { "addressline1", l["location-addressline1"]},
                                { "addressline2", l["location-addressline2"]},
                                { "city", l["location-city"] },
                                { "state", l["location-state-code"] },
                                { "zipcode", l["location-zipcode"] }
                            })
                            </li>
                        }
                    }
                </ul>
            </fieldset>
        </div>
        <fieldset class="actions">
            <button class="save main-action" type="submit">Save</button>
        </fieldset>
    </form>
    <form action="#" method="post" class="location-edit-form">
        <fieldset class="location-edit-panel edit-popup">
            <div class="readonly-location-base">
                @printAddress(new Dictionary<string, object>() {
                    { "container-id", "" },
                    { "id", 0 },
                    { "name", "" }, 
                    { "addressline1", ""},
                    { "addressline2", ""},
                    { "city", "" }, 
                    { "state", "" },
                    { "zipcode", "" }
                })
            </div>
            <div class="edit-location">
                <input type="hidden" name="location-editor-id" value="" />
                <input type="hidden" name="location-id" value="0" />
                <input type="hidden" name="location-type" value="" />
                <ul>
                    <li class="location-name">
                        <label>Name: <input type="text" name="location-name" data-val="true" data-val-required="Location Name is required"/></label>
                        <span data-valmsg-replace="true" data-valmsg-for="location-name" class="field-validation-valid"></span>
                    </li>
                    <li class="location-addressline location-addressline1">
                        <label>Address Line 1: <input type="text" name="location-addressline1" data-val="true" data-val-required="Address Line 1 is required"/></label>
                        <span data-valmsg-replace="true" data-valmsg-for="location-addressline1" class="field-validation-valid"></span>
                    </li>
                    <li class="location-addressline location-addressline2">
                        <label>Address Line 2: <input type="text" name="location-addressline2" /></label>
                    </li>
                    <li class="location-city">
                        <label>City: <input type="text" name="location-city" data-val="true" data-val-required="City is required"/></label>
                        <span data-valmsg-replace="true" data-valmsg-for="location-city" class="field-validation-valid"></span>
                    </li>
                    <li class="location-state">
                        <label>State:
                            <select name="location-state" data-val="true" data-val-required="State is required">
                                @CommonHelpers.StateProvinceOptions(0)
                            </select>
                            <input type="hidden" name="location-state-code" />
                            <span data-valmsg-replace="true" data-valmsg-for="location-state" class="field-validation-valid"></span>
                        </label>
                    </li>
                    <li class="location-zipcode">
                        <label>Zip Code: <input type="text" name="location-zipcode" data-val="true" data-val-required="Zip Code is required"/></label>
                        <span data-valmsg-replace="true" data-valmsg-for="location-zipcode" class="field-validation-valid"></span>
                    </li>
                </ul>
                <div class="actions">
                    <button class="button cancel fancy" type="button">Cancel</button>
                    <button class="button save item-action" type="submit">Save location</button>        
                </div>
            </div>
        </fieldset>
    </form>
</div>