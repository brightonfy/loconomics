@using WebMatrix.Data;
@{
    LcHelpers.ProviderPage();
    
    var u = LcData.UserInfo.GetUserRow();
    var locationID = Request["LocationID"].AsInt();
    // Current position data record:
    var p = LcData.UserInfo.GetUserCurrentPos();
    var n = p.PositionID;
    var action = Request["action"] ?? "edit"; // Possible values: delete, edit (by default, no checked)

    if (action == "delete") {
        string addressUse = Request["use"];
        if (addressUse != "work" && addressUse != "travel") {
            LcHelpers.ReturnJsonError(-1, "Parameter 'use' is required (address must be removed as 'travel' or 'work', not both at time)");
        }
        using (var db = Database.Open("sqlloco")) {
            db.Execute(LcData.sqlDelServiceAddress, locationID, p.UserID, p.PositionID, Request["use"]);
            
            LcHelpers.ReturnJsonResult(0, "Location removed succesfully");
        }
    }

    Validation.RequireField("name", LcRessources.RequiredField("Name"));
    Validation.RequireField("addressline1", LcRessources.RequiredField("Address Line 1"));
    Validation.RequireField("city", LcRessources.RequiredField("City"));
    Validation.RequireField("state", LcRessources.RequiredField("State"));
    Validation.RequireField("postalcode", LcRessources.RequiredField("Zip Code"));
    Validation.RequireField("iworkon", "Are services performed at this location?");
    Validation.RequireField("itravel", "Do you travel to clients from this location?");
    Validation.Add("latitude", Validator.Decimal("Latitude must be a number"));
    Validation.Add("longitude", Validator.Decimal("Longitude must be a number"));
    Validation.Add("google-map-url", Validator.Url("Google Maps URL is not valid"));
    Validation.Add("travel-radius", Validator.Decimal("Service Radius must be a number"));

    if (IsPost && Validation.IsValid()) {

        using (var db = Database.Open("sqlloco")) {

            // Validate Postal Code
            var state = Request["state"].AsInt();
            var postalCodeID = LcData.GetPostalCodeID(Request["postalcode"], state);
            if (postalCodeID == 0) {
                ModelState.AddFormError("Postal Code not valid");
            }
            
            // Validate that 'travel from location' is unique
            // Issue #86, details. for now, only allow one 'travel from' location for a simpler customer visualization of provider working zones.
            if (Request["itravel"].AsBool() &&
                db.QueryValue(@"
                    SELECT count(*) FROM ServiceAddress
                    WHERE UserID = @0 AND PositionID = @1
                            AND TravelFromLocation = 1 -- Only travel from addresses
                            AND AddressID <> @2 --Don't count this address!
                ", u.UserID, p.PositionID, locationID) > 0) {
                ModelState.AddFormError("You already have a 'travel from location' address (can be only one).");
            }

            if (ModelState.IsValid) {
                db.Execute(LcData.sqlSetServiceAddress,
                    locationID,
                    u.UserID,
                    Request["addressline1"],
                    Request["addressline2"],
                    Request["city"],
                    state,
                    postalCodeID,
                    u.PreferredCountryID,
                    Request["name"],
                    Request["type"].AsInt(),
                    Request["special-instructions"],
                    Request["latitude"].AsDecimal(),
                    Request["longitude"].AsDecimal(),
                    null, //Request["google-map-url"],
                    p.PositionID,
                    Request["iworkon"].AsBool(),
                    Request["itravel"].AsBool(),
                    Request["travel-radius"].AsDecimal(),
                    Request["travel-transport"].AsInt(),
                    Request["preferred-address"].AsBool()
                );
            }
        }
        
        if (ModelState.IsValid) {
            LcHelpers.ReturnJsonResult(0, "Location saved");
        }
    }

    var sqlGetTransports = @"
        SELECT *
        FROM    TransportType
        WHERE   Active = 1
    ";
    var sqlCondAddressID = @"
        AND L.AddressID = @2
    ";
    var sqlGetAddressTypes = @"
        SELECT  AddressTypeID, AddressType
        FROM    AddressType
        WHERE   Active = 1 AND UniquePerUser = 0
    ";
    var sqlGetUserAddresses = @"
        SELECT  AddressID, AddressName
        FROM    Address
        WHERE   UserID = @0 AND AddressName is not null AND AddressName not like ''
    ";
    dynamic transports = null, location = null, types = null, userAddresses = null;
    using (var db = Database.Open("sqlloco")) {
        location = db.QuerySingle(LcData.sqlGetServiceAddresses + sqlCondAddressID, p.UserID, p.PositionID, locationID);
        transports = db.Query(sqlGetTransports);
        types = db.Query(sqlGetAddressTypes);
        userAddresses = db.Query(sqlGetUserAddresses, u.UserID);
    }
}
@helper printDistanceOptions(string selected){
        <option @LcHelpers.IsSelected(selected, "1") value="1">1 mile</option>
        <option @LcHelpers.IsSelected(selected, "5") value="5">5 miles</option>
        <option @LcHelpers.IsSelected(selected, "10") value="10">10 miles</option>
        <option @LcHelpers.IsSelected(selected, "25") value="25">25 miles</option>
}
    <form action="@(UrlUtil.LangPath)Dashboard/$PositionsLocationEdit/?LocationID=@(locationID)&PositionID=@(p.PositionID)" method="post" class="ajax ajax-box edit-location">
        @LcHelpers.GetValidationScripts()
        @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
        <fieldset>
            @if (locationID == 0)
            {
            <ul class="copy-location">
                <li>
                    <label>You can specify a full new address or use one of yours addresses from the list:
                        <select class="copy-location">
                            <option value=""></option>
                            @foreach (var add in userAddresses)
                            {
                                <option @LcHelpers.IsSelected(Request["select-address"], add.AddressID) value="@add.AddressID">@add.AddressName</option>
                            }
                        </select>
                    </label>
                </li>
            </ul>
            }
            <ul class="location-data">
                <li class="location-name">
                    <label>Name: <input type="text" name="name" value="@(Request["name"] ?? (location != null ? location.AddressName : null))" @Validation.GetHtml("name") /></label>
                    @Html.ValidationMessage("name")
                </li>
                <li class="location-addressline location-addressline1">
                    <label>Address Line 1: <input type="text" name="addressline1" value="@(Request["addressline1"] ?? (location != null ? location.AddressLine1 : null))" @Validation.GetHtml("addressline1") /></label>
                    @Html.ValidationMessage("addressline1")
                </li>
                <li class="location-addressline location-addressline2">
                    <label>Address Line 2: <input type="text" name="addressline2" value="@(Request["addressline2"] ?? (location != null ? location.AddressLine2 : null))" @Validation.GetHtml("addressline2") /></label>
                    @Html.ValidationMessage("addressline2")
                </li>
                <li class="location-city">
                    <label>City: <input type="text" name="city" value="@(Request["city"] ?? (location != null ? location.City : null))" @Validation.GetHtml("city") /></label>
                </li>
                <li class="location-state">
                    <label>State:
                        <select name="state" @Validation.GetHtml("state")>
                            @LcHelpers.StateProvinceOptions(Request["state"] ?? (location != null ? location.StateProvinceID : null))
                        </select>
                        @Html.ValidationMessage("state")
                    </label>
                </li>
                <li class="location-zipcode">
                    <label>Zip Code: <input type="text" name="postalcode" value="@(Request["postalcode"] ?? (location != null ? location.PostalCode : null))" data-val-postalcode="Postal Code is not valid" @Validation.GetHtml("postalcode")/></label>
                    @Html.ValidationMessage("postalcode")
                </li>
                <li class="location-specialinstructions">
                    <label>Special instructions: <textarea rows="3" name="special-instructions" @Validation.GetHtml("special-instructions")>@(Request["special-instructions"] ?? (location != null ? location.SpecialInstructions : null))</textarea></label>
                    @Html.ValidationMessage("special-instructions")
                </li>
                <li class="location-preferredaddress input-option">
                    <label><input type="checkbox" name="preferred-address" value="true" @LcHelpers.IsChecked(true, Request["preferred-address"] ?? (location != null && location.IsServiceAddress ? location.PreferredAddress : null)) /> This is my prefered address</label>
                </li>
                <li class="location-type">
                    <label>Address Type:
                        @if (location != null && location.UniquePerUser)
                        {
                            <input type="text" disabled="disabled" value="@location.AddressType" /> <span>(this type of address cannot be changed)</span>
                        }
                        else
                        {
                        <select name="type" @Validation.GetHtml("type")>
                            @foreach (var t in types)
                            {
                                <option @LcHelpers.IsSelected(t.AddressTypeID, Request["type"] ?? (location != null ? location.AddressTypeID : null)) value="@t.AddressTypeID">@t.AddressType</option>
                            }
                        </select>
                        }
                    </label>
                </li>
            </ul>
            <ul class="location-map">
                <li>
                    <strong>GPS Coordinates</strong>
                </li>
                <li class="gps-lat"><label>Latitude: <input type="text" name="latitude" value="@(Request["latitude"] ?? (location != null ? location.Latitude : null) )" @Validation.GetHtml("latitude") /></label></li>
                <li class="gps-lng"><label>Longitude: <input type="text" name="longitude" value="@(Request["longitude"] ?? (location != null ? location.longitude : null))" @Validation.GetHtml("longitude") /></label></li>
                <li class="map-selector"><div class="google-map"></div></li>
                @*<li><label>Google Maps URL: <input type="text" name="google-map-url" value="@(Request["google-map-url"] ?? (location != null ? location.GoogleMapsURL : null))" @Validation.GetHtml("google-map-url") /></label></li>*@
            </ul>
            <ul class="location-travel">
                <li class="input-option">
                    I perform services at this location:
                    <label>Yes<input type="radio" @LcHelpers.IsChecked(true, Request["iworkon"] ?? (location != null && location.IsServiceAddress ? location.ServicesPerformedAtLocation : null)) name="iworkon" value="True"/></label>
                    <label>No<input type="radio" @LcHelpers.IsChecked(false, Request["iworkon"] ?? (location != null && location.IsServiceAddress ? location.ServicesPerformedAtLocation : false)) name="iworkon" value="False"/></label>
                </li>
                <li class="input-option">
                    <fieldset class="has-confirm">
                     <legend>I travel to clients from this location</legend> 
                        <div class="confirm positionlocations-itravel-confirm">
                            <label>Yes<input type="radio" @LcHelpers.IsChecked(true, Request["itravel"] ?? (location != null && location.IsServiceAddress ? location.TravelFromLocation : null)) name="itravel" value="True"/></label>
                            <label>No<input type="radio" @LcHelpers.IsChecked(false, Request["itravel"] ?? (location != null && location.IsServiceAddress ? location.TravelFromLocation : false)) name="itravel" value="False"/></label>
                        </div>
                        <ul class="travel-options">
                            <li><label>I will travel up to 
                                <select name="travel-radius" @Validation.GetHtml("travel-radius")>
                                    @printDistanceOptions(Request["travel-radius"] ?? (location != null && location.IsServiceAddress ? location.ServiceRadiusFromLocation : null))
                                </select>
                                from this location.</label>
                                @Html.ValidationMessage("travel-radius")
                                </li>
                            <li>
                                <span>I travel to jobs using primarily:</span>
                                <ul class="transport-type">
                                @foreach (var t in transports)
                                {
                                    <li>
                                        <label><input type="radio" @LcHelpers.IsChecked(t.TransportTypeID, Request["travel-transport"] ?? (location != null && location.IsServiceAddress ? location.TransportTypeID : null)) name="travel-transport" value="@t.TransportTypeID" @Validation.GetHtml("travel-transport") />@t.TransportTypeName</label>
                                    </li>
                                }
                                </ul>
                                @Html.ValidationMessage("travel-transport")
                            </li>
                        </ul>
                    </fieldset>
                </li>
            </ul>
            <script type="text/javascript">
                @* Force execution of the 'has-confirm' script *@
                $('fieldset.has-confirm > .confirm input').change();
            </script>
        </fieldset>
        <fieldset class="actions">
            <button class="button cancel-action" type="button">Cancel</button>
            <button class="button main-action" type="submit">Save</button>
        </fieldset>
        <script type="text/javascript">
            $(function () {
                $('select.copy-location').change(function () {
                    var $t = $(this);
                    $t.closest('.edit-panel').reload(function (currentUrl, defaultUrl) {
                        return defaultUrl.replace(/LocationID=\d+/gi, 'LocationID=' + $t.val());
                    });
                });
            });
            Modernizr.load({
                load: { googleapi: "https://www.google.com/jsapi" },
                complete: function () {
                    google.load("maps", "3.9", { other_params: "sensor=false", "callback": function () {
                        // Register if user selects or writes a position (to not overwrite it with automatic positioning)
                        var positionedByUser = false;
                        // Some confs
                        var detailedZoomLevel = 16;
                        var generalZoomLevel = 1;

                        var l = $('.edit-location .location-map');
                        var m = l.find('.map-selector > .google-map').get(0);
                        var $lat = l.find('[name=latitude]');
                        var $lng = l.find('[name=longitude]');

                        // Creating position coordinates
                        var myLatlng = new google.maps.LatLng($lat.val(), $lng.val());
                        // We consider as 'positioned by user' when there was a saved value for the position coordinates (we are editing a location)
                        positionedByUser = (myLatlng.lat() != 0 && myLatlng.lng() != 0);
                        // Create map
                        var mapOptions = {
                            zoom: (positionedByUser ? detailedZoomLevel : generalZoomLevel), // Best detail when we already had a location
                            center: myLatlng,
                            mapTypeId: google.maps.MapTypeId.ROADMAP
                        }
                        var map = new google.maps.Map(m, mapOptions);
                        // Create the position marker
                        var marker = new google.maps.Marker({
                            position: myLatlng,
                            map: map,
                            draggable: true,
                            animation: google.maps.Animation.DROP
                        });
                        // Listen when user clicks map or move the marker to move marker or set position in the form
                        google.maps.event.addListener(marker, 'dragend', saveCoordinates);
                        google.maps.event.addListener(map, 'click', function (event) {
                            placeMarker(event.latLng);
                            positionedByUser = true;
                        });
                        function placeMarker(latlng) {
                            marker.setPosition(latlng);
                            // Move map
                            map.panTo(latlng);
                            saveCoordinates();
                            return marker;
                        }
                        function saveCoordinates() {
                            var latlng = marker.getPosition();
                            $lat.val(latlng.lat()); //marker.position.Xa
                            $lng.val(latlng.lng()); //marker.position.Ya
                            positionedByUser = true;
                        }
                        // Listen when user changes form coordinates values to update the map
                        $lat.change(updateMapMarker);
                        $lng.change(updateMapMarker);
                        function updateMapMarker() {
                            positionedByUser = true;
                            var newPos = new google.maps.LatLng($lat.val(), $lng.val());
                            // Move marker
                            marker.setPosition(newPos);
                            // Move map
                            map.panTo(newPos);
                        }

                        // Use browser geolocation support to get an automatic location if there is no a location selected by user
                        // Check to see if this browser supports geolocation.
                        if (!positionedByUser && navigator.geolocation) {

                            // This is the location marker that we will be using
                            // on the map. Let's store a reference to it here so
                            // that it can be updated in several places.
                            var locationMarker = null;

                            // Get the location of the user's browser using the
                            // native geolocation service. When we invoke this method
                            // only the first callback is requied. The second
                            // callback - the error handler - and the third
                            // argument - our configuration options - are optional.
                            navigator.geolocation.getCurrentPosition(
                                function (position) {
                                    // Check to see if there is already a location.
                                    // There is a bug in FireFox where this gets
                                    // invoked more than once with a cached result.
                                    if (locationMarker) {
                                        return;
                                    }

                                    // Move marker to the map using the position, only if user doesn't set a position
                                    if (!positionedByUser) {
                                        locationMarker = placeMarker(
                                            new google.maps.LatLng(
                                                position.coords.latitude,
                                                position.coords.longitude
                                            )
                                        );
                                        // Set zoom to something more detailed
                                        map.setZoom(detailedZoomLevel);
                                    }
                                },
                                function (error) {
                                    console.log("Something went wrong: ", error);
                                },
                                {
                                    timeout: (5 * 1000),
                                    maximumAge: (1000 * 60 * 15),
                                    enableHighAccuracy: true
                                }
                            );


                            // Now that we have asked for the position of the user,
                            // let's watch the position to see if it updates. This
                            // can happen if the user physically moves, of if more
                            // accurate location information has been found (ex.
                            // GPS vs. IP address).
                            //
                            // NOTE: This acts much like the native setInterval(),
                            // invoking the given callback a number of times to
                            // monitor the position. As such, it returns a "timer ID"
                            // that can be used to later stop the monitoring.
                            var positionTimer = navigator.geolocation.watchPosition(
                                function (position) {
                                    // Move again to the new or accurated position, if user doesn't set a position
                                    if (!positionedByUser) {
                                        locationMarker = placeMarker(
                                            new google.maps.LatLng(
                                                position.coords.latitude,
                                                position.coords.longitude
                                            )
                                        );
                                        // Set zoom to something more detailed
                                        map.setZoom(detailedZoomLevel);
                                    }  else
                                        navigator.geolocation.clearWatch(positionTimer);
                                }
                            );

                            // If the position hasn't updated within 5 minutes, stop
                            // monitoring the position for changes.
                            setTimeout(
                                function () {
                                    // Clear the position watcher.
                                    navigator.geolocation.clearWatch(positionTimer);
                                },
                                (1000 * 60 * 5)
                            );
                        } // Ends geolocation position
                    }
                    });
                }
            });
        </script>
    </form>