@using Braintree;
@using WebMatrix.Data;
@{
    var idprefix = "account-taxes";
    var user = LcData.UserInfo.GetUserRow();
    var redirectURL = LcHelpers.GetRedirectURLFromReferrer("/alerts");
    
    BraintreeGateway gateway = null;
    dynamic taxentities = null, tintypes = null;
    
    Validation.RequireField("tin_fullname", LcRessources.RequiredField("Full name"));
    // Business name is only required if taxentitytype is not 'individual'
    //Validation.RequireField("tin_businessname", LcRessources.RequiredField("Business name"));
    Validation.RequireField("tin_streetaddress", LcRessources.RequiredField("Street Address"));
    Validation.RequireField("tin_city", LcRessources.RequiredField("City"));
    Validation.RequireField("tin_state", LcRessources.RequiredField("State"));
    Validation.RequireField("tin_zipcode", LcRessources.RequiredField("Zip Code"));
    Validation.RequireField("tin_taxentitytype", LcRessources.RequiredField("Tax Entity Type"));
    //Validation.RequireField("tin_tax_classification", LcRessources.RequiredField("Tax classification"));
    Validation.RequireField("tin_number", LcRessources.RequiredField("Tax Identification Number"));
    Validation.RequireField("tin_type", LcRessources.RequiredField("TIN Type"));
    Validation.RequireField("tin_signature", LcRessources.RequiredField("Signature"));
    Validation.Add("tin_number", Validator.Integer("The tax identification number must be a nine digit number, without dashes"));
    Validation.Add("tin_number", Validator.StringLength(9, 9, "The tax identification number must be a nine digit number"));
   
    if (IsPost && Validation.IsValid()) {
            
        var zipcodeID = LcData.GetPostalCodeID(Request["tin_zipcode"], Request["tin_state"].AsInt());
        if (zipcodeID == 0) {
            ModelState.AddError("tin_zipcode", "Zip code is not valid");
        }
        int individualEntityTypeID = 1; // Hardcoded ID=1 for individual/sole propeitor entity type
        if (Request["tin_taxentitytype"].AsInt() != individualEntityTypeID &&
            Request["tin_businessname"].IsEmpty()) {
            ModelState.AddError("tin_businessname", LcRessources.RequiredField("Business name"));
        }

        if (ModelState.IsValid) {
            try{
                gateway = LcPayment.NewBraintreeGateway();
            } catch {
                ModelState.AddFormError("There was an error communicating with our secure data store, please try again later.");
            }
            
            if (ModelState.IsValid) {
                // We save data on our database
                var sqlSetProviderTaxForm = @"
                BEGIN TRAN
                    UPDATE  providertaxform WITH (serializable)
                    SET     FullName = @1,
                            BusinessName = @2,
                            StreetApt = @3, 
                            City = @4,
                            PostalCodeID = @5,
                            StateProvinceID = @6,   
                            CountryID = @7,
                            TaxEntityTypeID = @8,
                            ExemptPayee = @9,
                            TINTypeID = @10,
                            Signature = @11,
                            UserIPAddress = @12,
                            DateTimeSubmitted = @13,
                            LastThreeTINDigits = @14,
                            Active = 1,
                            UpdatedDate = getdate(),
                            ModifiedBy = 'sys'
                    WHERE   ProviderUserId = @0

                    IF @@rowcount = 0
                    BEGIN
                        INSERT INTO providertaxform (ProviderUserId,
                            FullName, BusinessName, StreetApt, City, PostalCodeID, StateProvinceID, CountryID,
                            TaxEntityTypeID, ExemptPayee, TINTypeID, Signature, UserIPAddress,
                            DateTimeSubmitted, LastThreeTINDigits,
                            Active, CreatedDate, UpdatedDate, ModifiedBy)
                        VALUES (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, 1, getdate(), getdate(), 'sys')
                    END
                COMMIT TRAN
                EXEC TestAlertTaxDocs @0
                ";
                
                using (var db = Database.Open("sqlloco")) {
                    db.Execute(sqlSetProviderTaxForm, user.UserID,
                        Request["tin_fullname"],
                        Request["tin_businessname"],
                        Request["tin_streetaddress"],
                        Request["tin_city"],
                        zipcodeID,
                        Request["tin_state"],
                        1, // CountryID
                        Request["tin_taxentitytype"].AsInt(),
                        Request["tin_exempt_payee"].AsBool(),
                        //Request["tin_tax_classification"],
                        Request["tin_type"].AsInt(),
                        Request["tin_signature"],
                        // AUDIT data for security
                        Request.UserHostAddress,
                        DateTime.Now,
                        // TIN Number: ONLY THE THREE LAST DIGITS
                        LcEncryptor.Encrypt(LcHelpers.GetLastStringChars(Request["tin_number"], 3))
                    );
                }
                
                // Save TIN number on Braintree
                CustomerRequest request = new CustomerRequest{
                    //need to pass in the userid from the cookie
                    Id = user.UserID.ToString(),
                    CustomerId = user.UserID.ToString(),
                    CustomFields = new Dictionary<string,string> {
                        { "loco_tin", Request["tin_number"] }
                    }
                };
                // Check if user exists and must be updated, or be created
                Customer customer = null;
                try {
                    customer = gateway.Customer.Find(user.UserID.ToString());
                } catch (Braintree.Exceptions.NotFoundException ex){
                }
                Result<Customer> result = null;
                if (customer != null) {
                    result = gateway.Customer.Update(user.UserID.ToString(), request);
                } else {
                    result = gateway.Customer.Create(request);
                }
                if (result.IsSuccess()){
                    string success = LcRessources.DataSaved;
                    if (!String.IsNullOrEmpty(redirectURL)) {
                        LcHelpers.ReturnJsonResult(4, new { SuccessMessage = success, RedirectURL = redirectURL } );
                    } else {
                        LcHelpers.ReturnJsonResult(0, success);
                    }
                    
                } else {
                    foreach (var row in result.Errors.DeepAll())
                    {
                        if (Context.IsDebuggingEnabled) {
                            ModelState.AddFormError(row.Code.ToString() + ": " + row.Message);
                        } else {
                            ModelState.AddFormError(row.Message);
                        }
                    }
                }
            }
        }
    }
    dynamic taxinfo = null;
    using (var db = Database.Open("sqlloco")) {
        taxentities = db.Query(@"
            SELECT  TaxEntityTypeID, TaxEntityTypeName
            FROM    TaxEntityType
            WHERE   LanguageID = @0 AND CountryID = @1 AND Active=1
        ", 1, 1);
        tintypes = db.Query(@"
            SELECT  TINTypeID, TINTypeAbbr, TINTypeName
            FROM    TINType
            WHERE   LanguageID = @0 AND CountryID = @1 AND Active=1
        ", 1, 1);
        PageData["taxinfo"] = taxinfo = db.QuerySingle(@"
            SELECT  T.*, PC.PostalCode
            FROM    ProviderTaxForm As T
                     LEFT JOIN
                    PostalCode As PC
                      ON T.PostalCodeID = PC.PostalCodeID
            WHERE   ProviderUserID = @0 AND Active=1
        ", user.UserID);
    }
}
@helper printEntityType(int entityID, string name){
    var taxinfo = PageData["taxinfo"];
    <li><label><input type="radio" @Validation.GetHtml("tin_taxentitytype") name="tin_taxentitytype" value="@entityID" @LcHelpers.IsChecked(Request["tin_taxentitytype"] ?? (taxinfo != null ? taxinfo.TaxEntityTypeID : ""), entityID)/>@name</label></li>
}
 
<p class="setting-instructions">
Federal law requires us to issue you a 1099 form at the end of the year.  In order to do this, we need you to complete the information below.  Rest assured all your data is stored securely and used strictly for tax purposes.  
</p>
<form method="post" id="@idprefix-form" action="@(UrlUtil.LangPath)Dashboard/$AccountTaxes/" class="ajax ajax-box">
    <input type="hidden" name="RedirectURL" value="@(redirectURL)" />
    @LcHelpers.GetValidationScripts()
    @Html.ValidationSummary(LcRessources.ValidationSummaryTitle)
    <fieldset id="@idprefix-fs-taxinfo" class="tax-info">
        <legend>IRS Form W-9:</legend>
        <ul>
            <li><label for="@idprefix-fullname">Full Name:</label><input id="@idprefix-fullname" @Validation.GetHtml("tin_fullname") type="text" name="tin_fullname" value="@(Request["tin_fullname"] ?? (taxinfo != null ? taxinfo.FullName : ""))"/><span class="info">(corresponding to your Tax Identification Number)</span></li>
            <li><label for="@idprefix-businessname">Business Name:</label><input id="@idprefix-businessname" @Validation.GetHtml("tin_businessname") type="text" name="tin_businessname" value="@(Request["tin_businessname"] ?? (taxinfo != null ? taxinfo.BusinessName : ""))"/><span class="info">(only if different from above)</span></li>
            <li>Mailing Address:</li>
            <li><label for="@idprefix-streetaddress">Street, Apt:</label><input id="@idprefix-streetaddress" type="text" name="tin_streetaddress" @Validation.GetHtml("tin_streetaddress") value="@(Request["tin_streetaddress"] ?? (taxinfo != null ? taxinfo.StreetApt : ""))"/></li>
            <li><label for="@idprefix-city">City:</label><input id="@idprefix-city" type="text" name="tin_city" value="@(Request["tin_city"] ?? (taxinfo != null ? taxinfo.City : ""))" @Validation.GetHtml("tin_city")/></li>
            <li><label for="@idprefix-state">State:</label>
                <select id="@idprefix-state" name="tin_state" @Validation.GetHtml("tin_state")>
                    @LcHelpers.StateProvinceOptions(Request["tin_state"] ?? (taxinfo != null ? taxinfo.StateProvinceID.ToString() : ""))
                </select>
            </li>
            <li><label for="@idprefix-zipcode">Zip Code:</label><input id="@idprefix-zipcode" type="text" name="tin_zipcode" value="@(Request["tin_zipcode"] ?? (taxinfo != null ? taxinfo.PostalCode : ""))" @Validation.GetHtml("tin_zipcode")/></li>
            <li class="tax-entity-type">
                <span>Tax Entity Type:</span>
                <ul>
                    @foreach (var entity in taxentities)
                    {
                        @printEntityType(entity.TaxEntityTypeID, entity.TaxEntityTypeName)
                    }
                </ul>
            </li>
            @*<li class="tax-clasification">
                <label for="@idprefix-tax-clasification">Choose the tax classification:</label>
                <select id="@idprefix-tax-clasification" name="tin_tax_classification" @Validation.GetHtml("tin_tax_classification")>
                    <option value="C" @LcHelpers.IsSelected(getTaxData("tin_tax_classification"), "C")>C Corporation</option>
                    <option value="S" @LcHelpers.IsSelected(getTaxData("tin_tax_classification"), "S")>S Corporation</option>
                    <option value="P" @LcHelpers.IsSelected(getTaxData("tin_tax_classification"), "P")>Partnership</option>
                </select>
            </li>*@
            <li class="tax-exempt-payee"><label>Exempt payee: <input type="checkbox" @LcHelpers.IsChecked(Request["tin_exempt_payee"] ?? (taxinfo != null ? (taxinfo.ExemptPayee ? "true" : "false") : ""), "true") name="tin_exempt_payee" value="true" @Validation.GetHtml("tin_exempt_payee")/></label></li>
        </ul>
    </fieldset>
    <fieldset id="@idprefix-fs-part1">
        <legend>Part 1: Taxpayer Identification Number (TIN):</legend>
        <span class="info">(This is a secure form. Your Tax ID Number will be stored in encrypted form.)</span>
        <input type="text" name="tin_number" value="@(Request["tin_number"] ?? (taxinfo != null ? "*****" + LcEncryptor.Decrypt(taxinfo.LastThreeTINDigits) : ""))" @Validation.GetHtml("tin_number")/>
        @foreach (var tintype in tintypes)
        {
        <label><input type="radio" @Validation.GetHtml("tin_type") name="tin_type" @LcHelpers.IsChecked(Request["tin_type"] ?? (taxinfo != null ? taxinfo.TINTypeID : ""), tintype.TINTypeID) value="@tintype.TINTypeID"/><abbr title="@tintype.TINTypeName">@tintype.TINTypeAbbr</abbr></label>
        }
    </fieldset>
    <fieldset id="@idprefix-fs-part2">
        <legend>Part 2: Certification</legend>
        <div class="info">
        <p>
            Under penalties of perjury, I certify that:
        </p>
        <p>
            The number shown on this form is my correct taxpayer identification number (or I am waiting for a number to be issued to me), and
        </p>
        <p>
            I am not subject to backup withholding because: (a) I am exempt from backup withholding, or (b) I have not been notified by 
            the Internal Revenue Service (IRS) that I am subject to backup withholding as a result of a failure to report all interest or dividends, or 
            (c) the IRS has notified me that I am no longer subject to backup withholding, and
        </p>
        <p>
            I am a U.S. person (including a U.S. resident alien).
        </p>
        </div>
        <fieldset class="signature">
            <label for="@idprefix-signature">Your Signature:</label><input @Validation.GetHtml("tin_signature") id="@idprefix-signature" type="text" name="tin_signature" value="@(Request["tin_signature"] ?? (taxinfo != null ? taxinfo.Signature : ""))"/><span class="info">(typing in your name acts as your signature)</span>
        </fieldset>
        <p class="info">
            The date and time of submission and your computer's IP address will be recorded when you click Submit.
        </p>
    </fieldset>
    <fieldset class="actions">
        <button class="save main-action" type="submit">Submit</button>
    </fieldset>
</form>