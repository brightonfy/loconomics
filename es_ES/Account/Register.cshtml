@{
    // Set the layout page and page title
    Layout = "~/es_ES/_SiteLayout.cshtml";
    Page.Title = "Sign Up";

    // Initialize general page variables
    var email = "";
    var password = "";
    var confirmPassword = "";

    // Validation
    Scripts.Add("~/Scripts/jquery-1.6.2.min.js");
    Scripts.Add("~/Scripts/jquery.validate.min.js");
    Scripts.Add("~/Scripts/jquery.validate.unobtrusive.min.js");
    
	// Validate the user's email address
    Validation.RequireField("email", "You must specify an email address.");
    // Validate the user's password and password confirmation
    Validation.Add("email",
        Validator.Regex(@"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*","The email is not valid."));

	Validation.RequireField("password", "The password cannot be blank.");
    Validation.Add("confirmPassword", 
        Validator.EqualsTo("password", "The new password and confirmation password do not match."));
    
    // var captchaMessage = "";

    // If this is a POST request, validate and process data
    if (IsPost) {
        email = Request.Form["email"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];
        
        // Validate the user's captcha answer
        // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
        //     ModelState.AddError("recaptcha", "Captcha response was not correct");
        // }

        // If all information is valid, create a new account
        if (Validation.IsValid()) { 
            // Insert a new user into the database
            var db = Database.Open("sqlloco");

            // Check if user already exists
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null) {
                // Insert email into the profile table
                db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);

                // Create and associate a new entry in the membership database.
                // If successful, continue processing the request
                try {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    if (requireEmailConfirmation) {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/es_ES/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                        WebMail.Send(
                            to: email,	
                            subject: "Please confirm your account", 
                            body: "Your confirmation code is: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> to activate your account."
                        ); 
                    }

                    if (requireEmailConfirmation) {
                        // Thank the user for registering and let them know an email is on its way
                        Response.Redirect("~/es_ES/Account/Thanks");
                    } else {
                        // Navigate back to the homepage and exit
                        WebSecurity.Login(email, password);

                        // mark the user as logged in via a normal account,
                        // as opposed to via an OAuth or OpenID provider.
                        Session["OAuthLoggedIn"] = false;
                        
                        Response.Redirect("~/es_ES/");
                    }
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
            } else {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            }
        }    
    }
}

  <div id="container" class="clearfix">


<hgroup class="title">
    <h1>Sign up</h1>
 
</hgroup>

<form method="post" action="">
    @* If at least one validation error exists, notify the user *@
    @Html.ValidationSummary("Please correct the errors and try again.")

    <fieldset>
        <legend>Registration Form</legend>
        <ul>
            <li class="email">
                <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}>Email:</label>
                <input type="text" id="email" name="email" title="Email address" value="@email" @Validation.GetHtml("email") />
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("email")
            </li>
            <li class="password">
                <label for="password" @if(!ModelState.IsValidField("password")) {<text>class="error-label"</text>}>Password:</label>
                <input type="password" id="password" name="password" title="Password" @Validation.GetHtml("password") />
                @* Write any password validation errors to the page *@
                @Html.ValidationMessage("password")
            </li>
            <li class="confirm-password">
                <label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>} >Confirm Password:</label>
                <input type="password" id="confirmPassword" name="confirmPassword" title="Confirm password" @Validation.GetHtml("confirmPassword") />
                @* Write any password validation errors to the page *@
                @Html.ValidationMessage("confirmPassword")
            </li>
             @*<li class="recaptcha">
             
               @ReCaptcha.GetHtml("PUBLIC_KEY", theme: "white")
                  @Html.ValidationMessage("recaptcha")
                }
            </li>*@
        </ul>
        <input type="submit" value="Register" title="Register" />
       
    </fieldset>
</form>
</div>