    @using System.Text.RegularExpressions;
@{
 
    if (WebSecurity.IsAuthenticated) {
        Layout = "~/_SiteLayout.cshtml";
        var UserID  = WebSecurity.CurrentUserId;
    }else{
        Response.Redirect("~/Default");
    }

    var providerID = "";
    var positionID = "";
    var pricingTypeID = "";
    var estimateVarID = "";
    var servicePricingTypeID = 0;
    var estimateVarValue = "";
    var listSize = "";
    var errors = "";
    var sysdate = DateTime.Now;
    
    if(IsPost){
        //TODO: insert relation into servicepricingtype
        var db = Database.Open("sqlloco");

        providerID = Convert.ToString(WebSecurity.CurrentUserId);//"1";//Testing
        positionID = Request["positionID"];//==null?"14"/*TODO: REMOVE TESTING VALUE*/:Request["positionID"];//Testing
        pricingTypeID = Request["pricingtype"];
        
        var SQLISNEW = @"SELECT ServicePricingTypeID 
                       FROM dbo.servicepricingtype 
                       WHERE ProviderID=@0 and PositionID=@1 and PricingTypeID=@2";
        var isNewRegister = db.QuerySingle(SQLISNEW,providerID,positionID,pricingTypeID);

        var SQLINSERT = @"INSERT INTO dbo.servicepricingtype 
                        (ProviderID,PositionID,PricingTypeID,CreatedDate,UpdatedDate,ModifiedBy) 
                        VALUES (@0,@1,@2,@3,@4,@5)";
        if(isNewRegister==null){            
            db.Execute(SQLINSERT, providerID, positionID, pricingTypeID,sysdate,sysdate,"UserID:"+providerID);
            servicePricingTypeID=Convert.ToInt32(db.GetLastInsertId());
        }else{
            servicePricingTypeID = Convert.ToInt32(isNewRegister.ServicePricingTypeID);
        }
            
        //TODO: insert estimate profile into providerestimatevar 
        listSize = Request["listSize"];
        var size = listSize.AsInt();
        var SQLINSERT2 = @"INSERT INTO dbo.providerestimateprofile 
                        (ServicePricingTypeID,EstimateVarID,EstimateVarValue,CreatedDate,UpdatedDate,ModifiedBy) 
                        VALUES (@0,@1,@2,@3,@4,@5)";
        var SQLUPDATE = @"UPDATE dbo.providerestimateprofile 
                        Set EstimateVarValue=@2 , UpdatedDate=@3 , ModifiedBy=@4                         
                        WHERE ServicePricingTypeID=@0 and EstimateVarID=@1";
        for(int i=size;i>0;i--){
            estimateVarID = Request["EstimateVarID" + i];
            estimateVarValue = Request["EstimateVarValue" + i];
            
            
            //validate data
            var match = Regex.Match(estimateVarValue, @"^([0-9]*\.?[0-9]{1,2}?)+");
            if(!match.Success){
                ModelState.AddError(estimateVarValue,"The value must be a number");
                //TODO: REVIEW VALIDATIONS(EX: PACKAGE TYPE VARS)
            }else{ 
                if(isNewRegister==null){
                    db.Execute(SQLINSERT2, servicePricingTypeID, estimateVarID, estimateVarValue.IsEmpty() ? null : estimateVarValue, sysdate, sysdate, "UserID:" + providerID);
                }else{
                    db.Execute(SQLUPDATE, servicePricingTypeID, estimateVarID, estimateVarValue.IsEmpty() ? null : estimateVarValue, sysdate, "UserID:" + providerID);
                }
            }
        }
        db.Close();
        Response.Redirect("~/provider-dashboard-profile.cshtml");               
    }
}
  
<script type="text/javascript">
$(document).ready(function () {

    //Fill the Pricing Type drop down
    $('#pricingtype').addOption('', "Loading....").attr('disabled', true);
    $.getJSON('ListPricingTypes', function (data) {
        var estimatetypes = data;
        $.each(estimatetypes, function (index, estimatetype) {
            var val = estimatetype.PricingTypeID;
            var text = estimatetype.Description;
            /*Debug
            End Debug*/

            $("#debugval").append(val);
            $("#debugtext").append(text);
            $('#pricingtype').addOption(val, text, false);
        });

        $('#pricingtype').addOption('', "Select type").attr('disabled', false);
        var firstselected = true;
        $('#pricingtype').change(function () {
            if (firstselected) {
                firstselected = false;
                $('#pricingtype').removeOption(0);
            };
        });

    });
    //Paint and fill Estimate Var List
    function getURLParameter(name) {
        return decodeURI(
        (RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, null])[1]
    );
    }
    var positionID = getURLParameter("positionID");//14;//Testing

    $('#pricingtype').change(function () {

        var pricingTypeID = $('#pricingtype').val();
        /*Debug
        $("#debugpricingtype").append(pricingTypeID);
        End Debug*/

        //Reset the form
        $(".estimatevarrow").remove();
        $(".listSize").remove();

        $.getJSON('ListServiceEstimateVars', { PositionID: positionID, PricingTypeID: pricingTypeID }, function (data) {
            var estimatevars = data;
            var i = 0;
            $.each(estimatevars, function (index2, estimatevar) {
                var val2 = estimatevar.EstimateVarID;
                var text2 = estimatevar.ProviderDescription;
                i++;
                /*Debug
                $("#debugval2").append(val2);
                $("#debugtext2").append(text2);
                End Debug*/
                $('#form tr:last').after('<tr class="estimatevarrow"><td><label for=' + text2 + '@if(!ModelState.IsValidField("estimateVarValue")){<text>class="error-label"</text>}>' + text2 + '</label></td><td><input id="EstimateVarID' + i + '" name="EstimateVarID' + i + '" value=' + val2 + ' size = 1></td>');
                $('#EstimateVarID' + i).hide();
                $('#form td:last').after('<td class="estimatevarrow"><input id="estimateVarValue' + i + '" name="estimateVarValue' + i + '" type="text"></td></tr>');
            });
            $("#form tr:last").after('<input class="idSize" id="listSize" name="listSize" type="text" value='+i+'>');
            $("#listSize").hide();
        });
    });
});
</script>

<div id="container" class="sign-up">
    <div id="main">

        @* If at least one validation error exists, notify the user *@
        @Html.ValidationSummary(errors)

        <h1>Service Estimate Profile</h1>
	    <form id="createEstimateProfile" class="stepped" action="" method="post">
		    <img class="inset" src="img/media-placeholder.png" alt="" />
		    <p>Set the estimate parameters for your service</p>
            <!-- debug statements 
            <p id="debugval">val:</p>
            <p id="debugtext">text:</p>
            <p id="debugval2">val2:</p>
            <p id="debugtext2">text2:</p>
            <p id="debugpricingtype">pricingType:</p>
            End debug statementes -->
 
            <table id="form">
                <tr>
                    <td><label for="pricingTypeLabel">Pincing Type</label></td>
                    <td>
                        <select id="pricingtype" name="pricingtype"></select>
                    </td>
                </tr>
            </table>
            <fieldset class="buttons">
				<button id="advancer" class="next fancy" type="submit">Finish</button>
				<input type="submit" class="hidden" />
			</fieldset>
        </form>
   </div>
</div>